// Code generated from query/sql/SqlBase.g4 by ANTLR 4.7.1. DO NOT EDIT.

package antlrgen // SqlBase
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 222, 1505,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 5, 4, 144, 10, 4, 3, 4, 3, 4, 3, 4, 5, 4, 149, 10, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 5, 4, 155, 10, 4, 3, 4, 3, 4, 5, 4, 159, 10, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 173, 10,
	4, 3, 4, 3, 4, 5, 4, 177, 10, 4, 3, 4, 3, 4, 5, 4, 181, 10, 4, 3, 4, 3,
	4, 5, 4, 185, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 193, 10,
	4, 3, 4, 3, 4, 5, 4, 197, 10, 4, 3, 4, 5, 4, 200, 10, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 5, 4, 207, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 214,
	10, 4, 12, 4, 14, 4, 217, 11, 4, 3, 4, 3, 4, 3, 4, 5, 4, 222, 10, 4, 3,
	4, 3, 4, 5, 4, 226, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 232, 10, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 239, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 5, 4, 248, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 5, 4, 283, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 5, 4, 294, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 7, 4, 303, 10, 4, 12, 4, 14, 4, 306, 11, 4, 5, 4, 308, 10, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 316, 10, 4, 12, 4, 14, 4, 319, 11,
	4, 3, 4, 3, 4, 5, 4, 323, 10, 4, 3, 4, 3, 4, 5, 4, 327, 10, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 335, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5,
	4, 341, 10, 4, 3, 4, 3, 4, 3, 4, 7, 4, 346, 10, 4, 12, 4, 14, 4, 349, 11,
	4, 3, 4, 3, 4, 5, 4, 353, 10, 4, 3, 4, 3, 4, 5, 4, 357, 10, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 367, 10, 4, 3, 4, 5, 4, 370,
	10, 4, 3, 4, 3, 4, 5, 4, 374, 10, 4, 3, 4, 5, 4, 377, 10, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 7, 4, 383, 10, 4, 12, 4, 14, 4, 386, 11, 4, 3, 4, 3, 4, 5,
	4, 390, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 5, 4, 405, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 411,
	10, 4, 5, 4, 413, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 419, 10, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 5, 4, 425, 10, 4, 5, 4, 427, 10, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 5, 4, 433, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 472, 10, 4, 12, 4, 14, 4, 475, 11,
	4, 5, 4, 477, 10, 4, 3, 4, 3, 4, 5, 4, 481, 10, 4, 3, 4, 3, 4, 5, 4, 485,
	10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 493, 10, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 7, 4, 500, 10, 4, 12, 4, 14, 4, 503, 11, 4, 5, 4, 505,
	10, 4, 3, 4, 3, 4, 5, 4, 509, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 525, 10, 4, 12, 4,
	14, 4, 528, 11, 4, 5, 4, 530, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	5, 4, 538, 10, 4, 3, 5, 5, 5, 541, 10, 5, 3, 5, 3, 5, 3, 6, 3, 6, 5, 6,
	547, 10, 6, 3, 6, 3, 6, 3, 6, 7, 6, 552, 10, 6, 12, 6, 14, 6, 555, 11,
	6, 3, 7, 3, 7, 5, 7, 559, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 565, 10,
	8, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 571, 10, 9, 3, 10, 3, 10, 3, 10, 3, 10,
	7, 10, 577, 10, 10, 12, 10, 14, 10, 580, 11, 10, 3, 10, 3, 10, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 594,
	10, 12, 12, 12, 14, 12, 597, 11, 12, 5, 12, 599, 10, 12, 3, 12, 3, 12,
	5, 12, 603, 10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 611,
	10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 617, 10, 13, 3, 13, 7, 13, 620,
	10, 13, 12, 13, 14, 13, 623, 11, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 7, 14, 632, 10, 14, 12, 14, 14, 14, 635, 11, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 5, 14, 641, 10, 14, 3, 15, 3, 15, 5, 15, 645, 10, 15,
	3, 15, 3, 15, 5, 15, 649, 10, 15, 3, 16, 3, 16, 5, 16, 653, 10, 16, 3,
	16, 3, 16, 3, 16, 7, 16, 658, 10, 16, 12, 16, 14, 16, 661, 11, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 7, 16, 667, 10, 16, 12, 16, 14, 16, 670, 11, 16, 5,
	16, 672, 10, 16, 3, 16, 3, 16, 5, 16, 676, 10, 16, 3, 16, 3, 16, 3, 16,
	5, 16, 681, 10, 16, 3, 16, 3, 16, 5, 16, 685, 10, 16, 3, 17, 5, 17, 688,
	10, 17, 3, 17, 3, 17, 3, 17, 7, 17, 693, 10, 17, 12, 17, 14, 17, 696, 11,
	17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 7, 18, 704, 10, 18, 12, 18,
	14, 18, 707, 11, 18, 5, 18, 709, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3,
	18, 3, 18, 7, 18, 717, 10, 18, 12, 18, 14, 18, 720, 11, 18, 5, 18, 722,
	10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 7, 18, 731, 10,
	18, 12, 18, 14, 18, 734, 11, 18, 3, 18, 3, 18, 5, 18, 738, 10, 18, 3, 19,
	3, 19, 3, 19, 3, 19, 7, 19, 744, 10, 19, 12, 19, 14, 19, 747, 11, 19, 5,
	19, 749, 10, 19, 3, 19, 3, 19, 5, 19, 753, 10, 19, 3, 20, 3, 20, 3, 20,
	3, 20, 7, 20, 759, 10, 20, 12, 20, 14, 20, 762, 11, 20, 5, 20, 764, 10,
	20, 3, 20, 3, 20, 5, 20, 768, 10, 20, 3, 21, 3, 21, 5, 21, 772, 10, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 23, 3, 23, 5, 23, 783,
	10, 23, 3, 23, 5, 23, 786, 10, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5,
	23, 793, 10, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 812,
	10, 24, 7, 24, 814, 10, 24, 12, 24, 14, 24, 817, 11, 24, 3, 25, 5, 25,
	820, 10, 25, 3, 25, 3, 25, 5, 25, 824, 10, 25, 3, 25, 3, 25, 5, 25, 828,
	10, 25, 3, 25, 3, 25, 5, 25, 832, 10, 25, 5, 25, 834, 10, 25, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 7, 26, 843, 10, 26, 12, 26, 14,
	26, 846, 11, 26, 3, 26, 3, 26, 5, 26, 850, 10, 26, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 859, 10, 27, 3, 28, 3, 28, 3, 29, 3,
	29, 5, 29, 865, 10, 29, 3, 29, 3, 29, 5, 29, 869, 10, 29, 5, 29, 871, 10,
	29, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 877, 10, 30, 12, 30, 14, 30, 880,
	11, 30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 7, 31, 894, 10, 31, 12, 31, 14, 31, 897, 11, 31, 3,
	31, 3, 31, 3, 31, 5, 31, 902, 10, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 913, 10, 31, 3, 32, 3, 32, 3, 33, 3,
	33, 3, 33, 3, 33, 5, 33, 921, 10, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 7, 33, 929, 10, 33, 12, 33, 14, 33, 932, 11, 33, 3, 34, 3, 34, 5,
	34, 936, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 5, 35, 948, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 5, 35, 956, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35, 963,
	10, 35, 12, 35, 14, 35, 966, 11, 35, 3, 35, 3, 35, 3, 35, 5, 35, 971, 10,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 979, 10, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 5, 35, 985, 10, 35, 3, 35, 3, 35, 5, 35, 989, 10,
	35, 3, 35, 3, 35, 3, 35, 5, 35, 994, 10, 35, 3, 35, 3, 35, 3, 35, 5, 35,
	999, 10, 35, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36, 1005, 10, 36, 3, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36,
	7, 36, 1019, 10, 36, 12, 36, 14, 36, 1022, 11, 36, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	6, 37, 1048, 10, 37, 13, 37, 14, 37, 1049, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 7, 37, 1059, 10, 37, 12, 37, 14, 37, 1062, 11, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1071, 10, 37, 3,
	37, 5, 37, 1074, 10, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1079, 10, 37, 3, 37,
	3, 37, 3, 37, 7, 37, 1084, 10, 37, 12, 37, 14, 37, 1087, 11, 37, 5, 37,
	1089, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 7, 37, 1096, 10, 37, 12,
	37, 14, 37, 1099, 11, 37, 5, 37, 1101, 10, 37, 3, 37, 3, 37, 5, 37, 1105,
	10, 37, 3, 37, 5, 37, 1108, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 7, 37, 1118, 10, 37, 12, 37, 14, 37, 1121, 11, 37,
	5, 37, 1123, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 6, 37, 1140, 10, 37,
	13, 37, 14, 37, 1141, 3, 37, 3, 37, 5, 37, 1146, 10, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 6, 37, 1152, 10, 37, 13, 37, 14, 37, 1153, 3, 37, 3, 37,
	5, 37, 1158, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 7, 37, 1181, 10, 37, 12, 37, 14, 37, 1184, 11, 37,
	5, 37, 1186, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5,
	37, 1195, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1201, 10, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 5, 37, 1207, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5,
	37, 1213, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	5, 37, 1223, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5,
	37, 1232, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 7,
	37, 1252, 10, 37, 12, 37, 14, 37, 1255, 11, 37, 5, 37, 1257, 10, 37, 3,
	37, 5, 37, 1260, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 7, 37, 1270, 10, 37, 12, 37, 14, 37, 1273, 11, 37, 3, 38, 3, 38,
	3, 38, 3, 38, 5, 38, 1279, 10, 38, 5, 38, 1281, 10, 38, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 5, 39, 1289, 10, 39, 3, 40, 3, 40, 3, 41, 3, 41,
	3, 42, 3, 42, 3, 43, 3, 43, 5, 43, 1299, 10, 43, 3, 43, 3, 43, 3, 43, 3,
	43, 5, 43, 1305, 10, 43, 3, 44, 3, 44, 3, 45, 3, 45, 3, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3,
	46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 7, 46, 1332, 10, 46,
	12, 46, 14, 46, 1335, 11, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 7, 46, 1344, 10, 46, 12, 46, 14, 46, 1347, 11, 46, 3, 46, 3, 46,
	5, 46, 1351, 10, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 1358, 10,
	46, 3, 46, 3, 46, 7, 46, 1362, 10, 46, 12, 46, 14, 46, 1365, 11, 46, 3,
	47, 3, 47, 5, 47, 1369, 10, 47, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1375,
	10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 7, 51, 1395,
	10, 51, 12, 51, 14, 51, 1398, 11, 51, 5, 51, 1400, 10, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 7, 51, 1407, 10, 51, 12, 51, 14, 51, 1410, 11, 51,
	5, 51, 1412, 10, 51, 3, 51, 5, 51, 1415, 10, 51, 3, 51, 3, 51, 3, 52, 3,
	52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52,
	3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 1435, 10, 52, 3, 53, 3, 53, 3, 53, 3,
	53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1446, 10, 53, 3, 54, 3, 54,
	3, 54, 3, 54, 5, 54, 1452, 10, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 5,
	55, 1459, 10, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56,
	1468, 10, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 1475, 10, 57, 3,
	58, 3, 58, 3, 58, 3, 58, 5, 58, 1481, 10, 58, 3, 59, 3, 59, 3, 59, 7, 59,
	1486, 10, 59, 12, 59, 14, 59, 1489, 11, 59, 3, 60, 3, 60, 3, 60, 3, 60,
	3, 60, 5, 60, 1496, 10, 60, 3, 61, 3, 61, 3, 61, 5, 61, 1501, 10, 61, 3,
	62, 3, 62, 3, 62, 2, 8, 24, 46, 64, 70, 72, 90, 63, 2, 4, 6, 8, 10, 12,
	14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48,
	50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,
	86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116,
	118, 120, 122, 2, 24, 4, 2, 26, 26, 140, 140, 4, 2, 70, 70, 81, 81, 4,
	2, 68, 68, 116, 116, 4, 2, 13, 13, 208, 208, 4, 2, 59, 59, 82, 82, 4, 2,
	58, 58, 178, 178, 4, 2, 20, 20, 50, 50, 4, 2, 66, 66, 93, 93, 4, 2, 13,
	13, 52, 52, 4, 2, 22, 22, 161, 161, 3, 2, 199, 200, 3, 2, 201, 203, 3,
	2, 193, 198, 5, 2, 13, 13, 17, 17, 157, 157, 4, 2, 64, 64, 172, 172, 7,
	2, 47, 47, 79, 79, 103, 104, 149, 149, 191, 191, 3, 2, 106, 109, 4, 2,
	67, 67, 128, 128, 4, 2, 75, 75, 165, 165, 5, 2, 53, 53, 101, 101, 182,
	182, 4, 2, 117, 117, 190, 190, 45, 2, 12, 13, 15, 15, 17, 18, 20, 22, 25,
	26, 29, 35, 40, 40, 45, 47, 50, 50, 53, 53, 59, 59, 62, 62, 65, 67, 69,
	69, 72, 75, 79, 80, 82, 82, 84, 84, 86, 86, 88, 88, 91, 91, 93, 94, 96,
	96, 98, 98, 101, 104, 106, 110, 114, 115, 117, 118, 121, 121, 123, 128,
	130, 134, 136, 141, 143, 143, 145, 149, 151, 161, 163, 165, 167, 171, 173,
	174, 176, 177, 180, 180, 182, 182, 184, 185, 189, 192, 2, 1742, 2, 124,
	3, 2, 2, 2, 4, 127, 3, 2, 2, 2, 6, 537, 3, 2, 2, 2, 8, 540, 3, 2, 2, 2,
	10, 544, 3, 2, 2, 2, 12, 558, 3, 2, 2, 2, 14, 560, 3, 2, 2, 2, 16, 566,
	3, 2, 2, 2, 18, 572, 3, 2, 2, 2, 20, 583, 3, 2, 2, 2, 22, 587, 3, 2, 2,
	2, 24, 604, 3, 2, 2, 2, 26, 640, 3, 2, 2, 2, 28, 642, 3, 2, 2, 2, 30, 650,
	3, 2, 2, 2, 32, 687, 3, 2, 2, 2, 34, 737, 3, 2, 2, 2, 36, 752, 3, 2, 2,
	2, 38, 767, 3, 2, 2, 2, 40, 769, 3, 2, 2, 2, 42, 778, 3, 2, 2, 2, 44, 792,
	3, 2, 2, 2, 46, 794, 3, 2, 2, 2, 48, 833, 3, 2, 2, 2, 50, 849, 3, 2, 2,
	2, 52, 851, 3, 2, 2, 2, 54, 860, 3, 2, 2, 2, 56, 862, 3, 2, 2, 2, 58, 872,
	3, 2, 2, 2, 60, 912, 3, 2, 2, 2, 62, 914, 3, 2, 2, 2, 64, 920, 3, 2, 2,
	2, 66, 933, 3, 2, 2, 2, 68, 998, 3, 2, 2, 2, 70, 1004, 3, 2, 2, 2, 72,
	1259, 3, 2, 2, 2, 74, 1280, 3, 2, 2, 2, 76, 1288, 3, 2, 2, 2, 78, 1290,
	3, 2, 2, 2, 80, 1292, 3, 2, 2, 2, 82, 1294, 3, 2, 2, 2, 84, 1296, 3, 2,
	2, 2, 86, 1306, 3, 2, 2, 2, 88, 1308, 3, 2, 2, 2, 90, 1357, 3, 2, 2, 2,
	92, 1368, 3, 2, 2, 2, 94, 1374, 3, 2, 2, 2, 96, 1376, 3, 2, 2, 2, 98, 1381,
	3, 2, 2, 2, 100, 1387, 3, 2, 2, 2, 102, 1434, 3, 2, 2, 2, 104, 1445, 3,
	2, 2, 2, 106, 1451, 3, 2, 2, 2, 108, 1458, 3, 2, 2, 2, 110, 1467, 3, 2,
	2, 2, 112, 1474, 3, 2, 2, 2, 114, 1480, 3, 2, 2, 2, 116, 1482, 3, 2, 2,
	2, 118, 1495, 3, 2, 2, 2, 120, 1500, 3, 2, 2, 2, 122, 1502, 3, 2, 2, 2,
	124, 125, 5, 6, 4, 2, 125, 126, 7, 2, 2, 3, 126, 3, 3, 2, 2, 2, 127, 128,
	5, 62, 32, 2, 128, 129, 7, 2, 2, 3, 129, 5, 3, 2, 2, 2, 130, 538, 5, 8,
	5, 2, 131, 132, 7, 180, 2, 2, 132, 538, 5, 118, 60, 2, 133, 134, 7, 180,
	2, 2, 134, 135, 5, 118, 60, 2, 135, 136, 7, 3, 2, 2, 136, 137, 5, 118,
	60, 2, 137, 538, 3, 2, 2, 2, 138, 139, 7, 37, 2, 2, 139, 143, 7, 147, 2,
	2, 140, 141, 7, 80, 2, 2, 141, 142, 7, 112, 2, 2, 142, 144, 7, 61, 2, 2,
	143, 140, 3, 2, 2, 2, 143, 144, 3, 2, 2, 2, 144, 145, 3, 2, 2, 2, 145,
	148, 5, 116, 59, 2, 146, 147, 7, 188, 2, 2, 147, 149, 5, 18, 10, 2, 148,
	146, 3, 2, 2, 2, 148, 149, 3, 2, 2, 2, 149, 538, 3, 2, 2, 2, 150, 151,
	7, 54, 2, 2, 151, 154, 7, 147, 2, 2, 152, 153, 7, 80, 2, 2, 153, 155, 7,
	61, 2, 2, 154, 152, 3, 2, 2, 2, 154, 155, 3, 2, 2, 2, 155, 156, 3, 2, 2,
	2, 156, 158, 5, 116, 59, 2, 157, 159, 9, 2, 2, 2, 158, 157, 3, 2, 2, 2,
	158, 159, 3, 2, 2, 2, 159, 538, 3, 2, 2, 2, 160, 161, 7, 14, 2, 2, 161,
	162, 7, 147, 2, 2, 162, 163, 5, 116, 59, 2, 163, 164, 7, 136, 2, 2, 164,
	165, 7, 170, 2, 2, 165, 166, 5, 118, 60, 2, 166, 538, 3, 2, 2, 2, 167,
	168, 7, 37, 2, 2, 168, 172, 7, 162, 2, 2, 169, 170, 7, 80, 2, 2, 170, 171,
	7, 112, 2, 2, 171, 173, 7, 61, 2, 2, 172, 169, 3, 2, 2, 2, 172, 173, 3,
	2, 2, 2, 173, 174, 3, 2, 2, 2, 174, 176, 5, 116, 59, 2, 175, 177, 5, 58,
	30, 2, 176, 175, 3, 2, 2, 2, 176, 177, 3, 2, 2, 2, 177, 180, 3, 2, 2, 2,
	178, 179, 7, 33, 2, 2, 179, 181, 5, 74, 38, 2, 180, 178, 3, 2, 2, 2, 180,
	181, 3, 2, 2, 2, 181, 184, 3, 2, 2, 2, 182, 183, 7, 188, 2, 2, 183, 185,
	5, 18, 10, 2, 184, 182, 3, 2, 2, 2, 184, 185, 3, 2, 2, 2, 185, 186, 3,
	2, 2, 2, 186, 192, 7, 19, 2, 2, 187, 193, 5, 8, 5, 2, 188, 189, 7, 4, 2,
	2, 189, 190, 5, 8, 5, 2, 190, 191, 7, 5, 2, 2, 191, 193, 3, 2, 2, 2, 192,
	187, 3, 2, 2, 2, 192, 188, 3, 2, 2, 2, 193, 199, 3, 2, 2, 2, 194, 196,
	7, 188, 2, 2, 195, 197, 7, 110, 2, 2, 196, 195, 3, 2, 2, 2, 196, 197, 3,
	2, 2, 2, 197, 198, 3, 2, 2, 2, 198, 200, 7, 45, 2, 2, 199, 194, 3, 2, 2,
	2, 199, 200, 3, 2, 2, 2, 200, 538, 3, 2, 2, 2, 201, 202, 7, 37, 2, 2, 202,
	206, 7, 162, 2, 2, 203, 204, 7, 80, 2, 2, 204, 205, 7, 112, 2, 2, 205,
	207, 7, 61, 2, 2, 206, 203, 3, 2, 2, 2, 206, 207, 3, 2, 2, 2, 207, 208,
	3, 2, 2, 2, 208, 209, 5, 116, 59, 2, 209, 210, 7, 4, 2, 2, 210, 215, 5,
	12, 7, 2, 211, 212, 7, 6, 2, 2, 212, 214, 5, 12, 7, 2, 213, 211, 3, 2,
	2, 2, 214, 217, 3, 2, 2, 2, 215, 213, 3, 2, 2, 2, 215, 216, 3, 2, 2, 2,
	216, 218, 3, 2, 2, 2, 217, 215, 3, 2, 2, 2, 218, 221, 7, 5, 2, 2, 219,
	220, 7, 33, 2, 2, 220, 222, 5, 74, 38, 2, 221, 219, 3, 2, 2, 2, 221, 222,
	3, 2, 2, 2, 222, 225, 3, 2, 2, 2, 223, 224, 7, 188, 2, 2, 224, 226, 5,
	18, 10, 2, 225, 223, 3, 2, 2, 2, 225, 226, 3, 2, 2, 2, 226, 538, 3, 2,
	2, 2, 227, 228, 7, 54, 2, 2, 228, 231, 7, 162, 2, 2, 229, 230, 7, 80, 2,
	2, 230, 232, 7, 61, 2, 2, 231, 229, 3, 2, 2, 2, 231, 232, 3, 2, 2, 2, 232,
	233, 3, 2, 2, 2, 233, 538, 5, 116, 59, 2, 234, 235, 7, 85, 2, 2, 235, 236,
	7, 89, 2, 2, 236, 238, 5, 116, 59, 2, 237, 239, 5, 58, 30, 2, 238, 237,
	3, 2, 2, 2, 238, 239, 3, 2, 2, 2, 239, 240, 3, 2, 2, 2, 240, 241, 5, 8,
	5, 2, 241, 538, 3, 2, 2, 2, 242, 243, 7, 49, 2, 2, 243, 244, 7, 70, 2,
	2, 244, 247, 5, 116, 59, 2, 245, 246, 7, 187, 2, 2, 246, 248, 5, 64, 33,
	2, 247, 245, 3, 2, 2, 2, 247, 248, 3, 2, 2, 2, 248, 538, 3, 2, 2, 2, 249,
	250, 7, 14, 2, 2, 250, 251, 7, 162, 2, 2, 251, 252, 5, 116, 59, 2, 252,
	253, 7, 136, 2, 2, 253, 254, 7, 170, 2, 2, 254, 255, 5, 116, 59, 2, 255,
	538, 3, 2, 2, 2, 256, 257, 7, 14, 2, 2, 257, 258, 7, 162, 2, 2, 258, 259,
	5, 116, 59, 2, 259, 260, 7, 136, 2, 2, 260, 261, 7, 31, 2, 2, 261, 262,
	5, 118, 60, 2, 262, 263, 7, 170, 2, 2, 263, 264, 5, 118, 60, 2, 264, 538,
	3, 2, 2, 2, 265, 266, 7, 14, 2, 2, 266, 267, 7, 162, 2, 2, 267, 268, 5,
	116, 59, 2, 268, 269, 7, 54, 2, 2, 269, 270, 7, 31, 2, 2, 270, 271, 5,
	116, 59, 2, 271, 538, 3, 2, 2, 2, 272, 273, 7, 14, 2, 2, 273, 274, 7, 162,
	2, 2, 274, 275, 5, 116, 59, 2, 275, 276, 7, 12, 2, 2, 276, 277, 7, 31,
	2, 2, 277, 278, 5, 14, 8, 2, 278, 538, 3, 2, 2, 2, 279, 282, 7, 37, 2,
	2, 280, 281, 7, 119, 2, 2, 281, 283, 7, 138, 2, 2, 282, 280, 3, 2, 2, 2,
	282, 283, 3, 2, 2, 2, 283, 284, 3, 2, 2, 2, 284, 285, 7, 185, 2, 2, 285,
	286, 5, 116, 59, 2, 286, 287, 7, 19, 2, 2, 287, 288, 5, 8, 5, 2, 288, 538,
	3, 2, 2, 2, 289, 290, 7, 54, 2, 2, 290, 293, 7, 185, 2, 2, 291, 292, 7,
	80, 2, 2, 292, 294, 7, 61, 2, 2, 293, 291, 3, 2, 2, 2, 293, 294, 3, 2,
	2, 2, 294, 295, 3, 2, 2, 2, 295, 538, 5, 116, 59, 2, 296, 297, 7, 25, 2,
	2, 297, 298, 5, 116, 59, 2, 298, 307, 7, 4, 2, 2, 299, 304, 5, 112, 57,
	2, 300, 301, 7, 6, 2, 2, 301, 303, 5, 112, 57, 2, 302, 300, 3, 2, 2, 2,
	303, 306, 3, 2, 2, 2, 304, 302, 3, 2, 2, 2, 304, 305, 3, 2, 2, 2, 305,
	308, 3, 2, 2, 2, 306, 304, 3, 2, 2, 2, 307, 299, 3, 2, 2, 2, 307, 308,
	3, 2, 2, 2, 308, 309, 3, 2, 2, 2, 309, 310, 7, 5, 2, 2, 310, 538, 3, 2,
	2, 2, 311, 322, 7, 73, 2, 2, 312, 317, 5, 114, 58, 2, 313, 314, 7, 6, 2,
	2, 314, 316, 5, 114, 58, 2, 315, 313, 3, 2, 2, 2, 316, 319, 3, 2, 2, 2,
	317, 315, 3, 2, 2, 2, 317, 318, 3, 2, 2, 2, 318, 323, 3, 2, 2, 2, 319,
	317, 3, 2, 2, 2, 320, 321, 7, 13, 2, 2, 321, 323, 7, 130, 2, 2, 322, 312,
	3, 2, 2, 2, 322, 320, 3, 2, 2, 2, 323, 324, 3, 2, 2, 2, 324, 326, 7, 116,
	2, 2, 325, 327, 7, 162, 2, 2, 326, 325, 3, 2, 2, 2, 326, 327, 3, 2, 2,
	2, 327, 328, 3, 2, 2, 2, 328, 329, 5, 116, 59, 2, 329, 330, 7, 170, 2,
	2, 330, 334, 5, 118, 60, 2, 331, 332, 7, 188, 2, 2, 332, 333, 7, 73, 2,
	2, 333, 335, 7, 118, 2, 2, 334, 331, 3, 2, 2, 2, 334, 335, 3, 2, 2, 2,
	335, 538, 3, 2, 2, 2, 336, 340, 7, 141, 2, 2, 337, 338, 7, 73, 2, 2, 338,
	339, 7, 118, 2, 2, 339, 341, 7, 68, 2, 2, 340, 337, 3, 2, 2, 2, 340, 341,
	3, 2, 2, 2, 341, 352, 3, 2, 2, 2, 342, 347, 5, 114, 58, 2, 343, 344, 7,
	6, 2, 2, 344, 346, 5, 114, 58, 2, 345, 343, 3, 2, 2, 2, 346, 349, 3, 2,
	2, 2, 347, 345, 3, 2, 2, 2, 347, 348, 3, 2, 2, 2, 348, 353, 3, 2, 2, 2,
	349, 347, 3, 2, 2, 2, 350, 351, 7, 13, 2, 2, 351, 353, 7, 130, 2, 2, 352,
	342, 3, 2, 2, 2, 352, 350, 3, 2, 2, 2, 353, 354, 3, 2, 2, 2, 354, 356,
	7, 116, 2, 2, 355, 357, 7, 162, 2, 2, 356, 355, 3, 2, 2, 2, 356, 357, 3,
	2, 2, 2, 357, 358, 3, 2, 2, 2, 358, 359, 5, 116, 59, 2, 359, 360, 7, 70,
	2, 2, 360, 361, 5, 118, 60, 2, 361, 538, 3, 2, 2, 2, 362, 363, 7, 155,
	2, 2, 363, 369, 7, 74, 2, 2, 364, 366, 7, 116, 2, 2, 365, 367, 7, 162,
	2, 2, 366, 365, 3, 2, 2, 2, 366, 367, 3, 2, 2, 2, 367, 368, 3, 2, 2, 2,
	368, 370, 5, 116, 59, 2, 369, 364, 3, 2, 2, 2, 369, 370, 3, 2, 2, 2, 370,
	538, 3, 2, 2, 2, 371, 373, 7, 62, 2, 2, 372, 374, 7, 15, 2, 2, 373, 372,
	3, 2, 2, 2, 373, 374, 3, 2, 2, 2, 374, 376, 3, 2, 2, 2, 375, 377, 7, 184,
	2, 2, 376, 375, 3, 2, 2, 2, 376, 377, 3, 2, 2, 2, 377, 389, 3, 2, 2, 2,
	378, 379, 7, 4, 2, 2, 379, 384, 5, 106, 54, 2, 380, 381, 7, 6, 2, 2, 381,
	383, 5, 106, 54, 2, 382, 380, 3, 2, 2, 2, 383, 386, 3, 2, 2, 2, 384, 382,
	3, 2, 2, 2, 384, 385, 3, 2, 2, 2, 385, 387, 3, 2, 2, 2, 386, 384, 3, 2,
	2, 2, 387, 388, 7, 5, 2, 2, 388, 390, 3, 2, 2, 2, 389, 378, 3, 2, 2, 2,
	389, 390, 3, 2, 2, 2, 390, 391, 3, 2, 2, 2, 391, 538, 5, 6, 4, 2, 392,
	393, 7, 155, 2, 2, 393, 394, 7, 37, 2, 2, 394, 395, 7, 162, 2, 2, 395,
	538, 5, 116, 59, 2, 396, 397, 7, 155, 2, 2, 397, 398, 7, 37, 2, 2, 398,
	399, 7, 185, 2, 2, 399, 538, 5, 116, 59, 2, 400, 401, 7, 155, 2, 2, 401,
	404, 7, 163, 2, 2, 402, 403, 9, 3, 2, 2, 403, 405, 5, 116, 59, 2, 404,
	402, 3, 2, 2, 2, 404, 405, 3, 2, 2, 2, 405, 412, 3, 2, 2, 2, 406, 407,
	7, 97, 2, 2, 407, 410, 5, 74, 38, 2, 408, 409, 7, 57, 2, 2, 409, 411, 5,
	74, 38, 2, 410, 408, 3, 2, 2, 2, 410, 411, 3, 2, 2, 2, 411, 413, 3, 2,
	2, 2, 412, 406, 3, 2, 2, 2, 412, 413, 3, 2, 2, 2, 413, 538, 3, 2, 2, 2,
	414, 415, 7, 155, 2, 2, 415, 418, 7, 148, 2, 2, 416, 417, 9, 3, 2, 2, 417,
	419, 5, 118, 60, 2, 418, 416, 3, 2, 2, 2, 418, 419, 3, 2, 2, 2, 419, 426,
	3, 2, 2, 2, 420, 421, 7, 97, 2, 2, 421, 424, 5, 74, 38, 2, 422, 423, 7,
	57, 2, 2, 423, 425, 5, 74, 38, 2, 424, 422, 3, 2, 2, 2, 424, 425, 3, 2,
	2, 2, 425, 427, 3, 2, 2, 2, 426, 420, 3, 2, 2, 2, 426, 427, 3, 2, 2, 2,
	427, 538, 3, 2, 2, 2, 428, 429, 7, 155, 2, 2, 429, 432, 7, 29, 2, 2, 430,
	431, 7, 97, 2, 2, 431, 433, 5, 74, 38, 2, 432, 430, 3, 2, 2, 2, 432, 433,
	3, 2, 2, 2, 433, 538, 3, 2, 2, 2, 434, 435, 7, 155, 2, 2, 435, 436, 7,
	32, 2, 2, 436, 437, 9, 3, 2, 2, 437, 538, 5, 116, 59, 2, 438, 439, 7, 155,
	2, 2, 439, 440, 7, 159, 2, 2, 440, 441, 9, 4, 2, 2, 441, 538, 5, 116, 59,
	2, 442, 443, 7, 155, 2, 2, 443, 444, 7, 159, 2, 2, 444, 445, 7, 68, 2,
	2, 445, 446, 7, 4, 2, 2, 446, 447, 5, 30, 16, 2, 447, 448, 7, 5, 2, 2,
	448, 538, 3, 2, 2, 2, 449, 450, 7, 51, 2, 2, 450, 538, 5, 116, 59, 2, 451,
	452, 7, 50, 2, 2, 452, 538, 5, 116, 59, 2, 453, 454, 7, 155, 2, 2, 454,
	538, 7, 72, 2, 2, 455, 456, 7, 155, 2, 2, 456, 538, 7, 152, 2, 2, 457,
	458, 7, 153, 2, 2, 458, 459, 7, 152, 2, 2, 459, 460, 5, 116, 59, 2, 460,
	461, 7, 193, 2, 2, 461, 462, 5, 62, 32, 2, 462, 538, 3, 2, 2, 2, 463, 464,
	7, 139, 2, 2, 464, 465, 7, 152, 2, 2, 465, 538, 5, 116, 59, 2, 466, 467,
	7, 158, 2, 2, 467, 476, 7, 171, 2, 2, 468, 473, 5, 108, 55, 2, 469, 470,
	7, 6, 2, 2, 470, 472, 5, 108, 55, 2, 471, 469, 3, 2, 2, 2, 472, 475, 3,
	2, 2, 2, 473, 471, 3, 2, 2, 2, 473, 474, 3, 2, 2, 2, 474, 477, 3, 2, 2,
	2, 475, 473, 3, 2, 2, 2, 476, 468, 3, 2, 2, 2, 476, 477, 3, 2, 2, 2, 477,
	538, 3, 2, 2, 2, 478, 480, 7, 34, 2, 2, 479, 481, 7, 189, 2, 2, 480, 479,
	3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481, 538, 3, 2, 2, 2, 482, 484, 7, 143,
	2, 2, 483, 485, 7, 189, 2, 2, 484, 483, 3, 2, 2, 2, 484, 485, 3, 2, 2,
	2, 485, 538, 3, 2, 2, 2, 486, 487, 7, 155, 2, 2, 487, 488, 7, 126, 2, 2,
	488, 489, 9, 3, 2, 2, 489, 492, 5, 116, 59, 2, 490, 491, 7, 187, 2, 2,
	491, 493, 5, 64, 33, 2, 492, 490, 3, 2, 2, 2, 492, 493, 3, 2, 2, 2, 493,
	504, 3, 2, 2, 2, 494, 495, 7, 120, 2, 2, 495, 496, 7, 24, 2, 2, 496, 501,
	5, 28, 15, 2, 497, 498, 7, 6, 2, 2, 498, 500, 5, 28, 15, 2, 499, 497, 3,
	2, 2, 2, 500, 503, 3, 2, 2, 2, 501, 499, 3, 2, 2, 2, 501, 502, 3, 2, 2,
	2, 502, 505, 3, 2, 2, 2, 503, 501, 3, 2, 2, 2, 504, 494, 3, 2, 2, 2, 504,
	505, 3, 2, 2, 2, 505, 508, 3, 2, 2, 2, 506, 507, 7, 98, 2, 2, 507, 509,
	9, 5, 2, 2, 508, 506, 3, 2, 2, 2, 508, 509, 3, 2, 2, 2, 509, 538, 3, 2,
	2, 2, 510, 511, 7, 129, 2, 2, 511, 512, 5, 118, 60, 2, 512, 513, 7, 70,
	2, 2, 513, 514, 5, 6, 4, 2, 514, 538, 3, 2, 2, 2, 515, 516, 7, 48, 2, 2,
	516, 517, 7, 129, 2, 2, 517, 538, 5, 118, 60, 2, 518, 519, 7, 60, 2, 2,
	519, 529, 5, 118, 60, 2, 520, 521, 7, 181, 2, 2, 521, 526, 5, 62, 32, 2,
	522, 523, 7, 6, 2, 2, 523, 525, 5, 62, 32, 2, 524, 522, 3, 2, 2, 2, 525,
	528, 3, 2, 2, 2, 526, 524, 3, 2, 2, 2, 526, 527, 3, 2, 2, 2, 527, 530,
	3, 2, 2, 2, 528, 526, 3, 2, 2, 2, 529, 520, 3, 2, 2, 2, 529, 530, 3, 2,
	2, 2, 530, 538, 3, 2, 2, 2, 531, 532, 7, 51, 2, 2, 532, 533, 7, 84, 2,
	2, 533, 538, 5, 118, 60, 2, 534, 535, 7, 51, 2, 2, 535, 536, 7, 123, 2,
	2, 536, 538, 5, 118, 60, 2, 537, 130, 3, 2, 2, 2, 537, 131, 3, 2, 2, 2,
	537, 133, 3, 2, 2, 2, 537, 138, 3, 2, 2, 2, 537, 150, 3, 2, 2, 2, 537,
	160, 3, 2, 2, 2, 537, 167, 3, 2, 2, 2, 537, 201, 3, 2, 2, 2, 537, 227,
	3, 2, 2, 2, 537, 234, 3, 2, 2, 2, 537, 242, 3, 2, 2, 2, 537, 249, 3, 2,
	2, 2, 537, 256, 3, 2, 2, 2, 537, 265, 3, 2, 2, 2, 537, 272, 3, 2, 2, 2,
	537, 279, 3, 2, 2, 2, 537, 289, 3, 2, 2, 2, 537, 296, 3, 2, 2, 2, 537,
	311, 3, 2, 2, 2, 537, 336, 3, 2, 2, 2, 537, 362, 3, 2, 2, 2, 537, 371,
	3, 2, 2, 2, 537, 392, 3, 2, 2, 2, 537, 396, 3, 2, 2, 2, 537, 400, 3, 2,
	2, 2, 537, 414, 3, 2, 2, 2, 537, 428, 3, 2, 2, 2, 537, 434, 3, 2, 2, 2,
	537, 438, 3, 2, 2, 2, 537, 442, 3, 2, 2, 2, 537, 449, 3, 2, 2, 2, 537,
	451, 3, 2, 2, 2, 537, 453, 3, 2, 2, 2, 537, 455, 3, 2, 2, 2, 537, 457,
	3, 2, 2, 2, 537, 463, 3, 2, 2, 2, 537, 466, 3, 2, 2, 2, 537, 478, 3, 2,
	2, 2, 537, 482, 3, 2, 2, 2, 537, 486, 3, 2, 2, 2, 537, 510, 3, 2, 2, 2,
	537, 515, 3, 2, 2, 2, 537, 518, 3, 2, 2, 2, 537, 531, 3, 2, 2, 2, 537,
	534, 3, 2, 2, 2, 538, 7, 3, 2, 2, 2, 539, 541, 5, 10, 6, 2, 540, 539, 3,
	2, 2, 2, 540, 541, 3, 2, 2, 2, 541, 542, 3, 2, 2, 2, 542, 543, 5, 22, 12,
	2, 543, 9, 3, 2, 2, 2, 544, 546, 7, 188, 2, 2, 545, 547, 7, 135, 2, 2,
	546, 545, 3, 2, 2, 2, 546, 547, 3, 2, 2, 2, 547, 548, 3, 2, 2, 2, 548,
	553, 5, 40, 21, 2, 549, 550, 7, 6, 2, 2, 550, 552, 5, 40, 21, 2, 551, 549,
	3, 2, 2, 2, 552, 555, 3, 2, 2, 2, 553, 551, 3, 2, 2, 2, 553, 554, 3, 2,
	2, 2, 554, 11, 3, 2, 2, 2, 555, 553, 3, 2, 2, 2, 556, 559, 5, 14, 8, 2,
	557, 559, 5, 16, 9, 2, 558, 556, 3, 2, 2, 2, 558, 557, 3, 2, 2, 2, 559,
	13, 3, 2, 2, 2, 560, 561, 5, 118, 60, 2, 561, 564, 5, 90, 46, 2, 562, 563,
	7, 33, 2, 2, 563, 565, 5, 74, 38, 2, 564, 562, 3, 2, 2, 2, 564, 565, 3,
	2, 2, 2, 565, 15, 3, 2, 2, 2, 566, 567, 7, 97, 2, 2, 567, 570, 5, 116,
	59, 2, 568, 569, 9, 6, 2, 2, 569, 571, 7, 131, 2, 2, 570, 568, 3, 2, 2,
	2, 570, 571, 3, 2, 2, 2, 571, 17, 3, 2, 2, 2, 572, 573, 7, 4, 2, 2, 573,
	578, 5, 20, 11, 2, 574, 575, 7, 6, 2, 2, 575, 577, 5, 20, 11, 2, 576, 574,
	3, 2, 2, 2, 577, 580, 3, 2, 2, 2, 578, 576, 3, 2, 2, 2, 578, 579, 3, 2,
	2, 2, 579, 581, 3, 2, 2, 2, 580, 578, 3, 2, 2, 2, 581, 582, 7, 5, 2, 2,
	582, 19, 3, 2, 2, 2, 583, 584, 5, 118, 60, 2, 584, 585, 7, 193, 2, 2, 585,
	586, 5, 62, 32, 2, 586, 21, 3, 2, 2, 2, 587, 598, 5, 24, 13, 2, 588, 589,
	7, 120, 2, 2, 589, 590, 7, 24, 2, 2, 590, 595, 5, 28, 15, 2, 591, 592,
	7, 6, 2, 2, 592, 594, 5, 28, 15, 2, 593, 591, 3, 2, 2, 2, 594, 597, 3,
	2, 2, 2, 595, 593, 3, 2, 2, 2, 595, 596, 3, 2, 2, 2, 596, 599, 3, 2, 2,
	2, 597, 595, 3, 2, 2, 2, 598, 588, 3, 2, 2, 2, 598, 599, 3, 2, 2, 2, 599,
	602, 3, 2, 2, 2, 600, 601, 7, 98, 2, 2, 601, 603, 9, 5, 2, 2, 602, 600,
	3, 2, 2, 2, 602, 603, 3, 2, 2, 2, 603, 23, 3, 2, 2, 2, 604, 605, 8, 13,
	1, 2, 605, 606, 5, 26, 14, 2, 606, 621, 3, 2, 2, 2, 607, 608, 12, 4, 2,
	2, 608, 610, 7, 87, 2, 2, 609, 611, 5, 42, 22, 2, 610, 609, 3, 2, 2, 2,
	610, 611, 3, 2, 2, 2, 611, 612, 3, 2, 2, 2, 612, 620, 5, 24, 13, 5, 613,
	614, 12, 3, 2, 2, 614, 616, 9, 7, 2, 2, 615, 617, 5, 42, 22, 2, 616, 615,
	3, 2, 2, 2, 616, 617, 3, 2, 2, 2, 617, 618, 3, 2, 2, 2, 618, 620, 5, 24,
	13, 4, 619, 607, 3, 2, 2, 2, 619, 613, 3, 2, 2, 2, 620, 623, 3, 2, 2, 2,
	621, 619, 3, 2, 2, 2, 621, 622, 3, 2, 2, 2, 622, 25, 3, 2, 2, 2, 623, 621,
	3, 2, 2, 2, 624, 641, 5, 30, 16, 2, 625, 626, 7, 162, 2, 2, 626, 641, 5,
	116, 59, 2, 627, 628, 7, 183, 2, 2, 628, 633, 5, 62, 32, 2, 629, 630, 7,
	6, 2, 2, 630, 632, 5, 62, 32, 2, 631, 629, 3, 2, 2, 2, 632, 635, 3, 2,
	2, 2, 633, 631, 3, 2, 2, 2, 633, 634, 3, 2, 2, 2, 634, 641, 3, 2, 2, 2,
	635, 633, 3, 2, 2, 2, 636, 637, 7, 4, 2, 2, 637, 638, 5, 22, 12, 2, 638,
	639, 7, 5, 2, 2, 639, 641, 3, 2, 2, 2, 640, 624, 3, 2, 2, 2, 640, 625,
	3, 2, 2, 2, 640, 627, 3, 2, 2, 2, 640, 636, 3, 2, 2, 2, 641, 27, 3, 2,
	2, 2, 642, 644, 5, 62, 32, 2, 643, 645, 9, 8, 2, 2, 644, 643, 3, 2, 2,
	2, 644, 645, 3, 2, 2, 2, 645, 648, 3, 2, 2, 2, 646, 647, 7, 115, 2, 2,
	647, 649, 9, 9, 2, 2, 648, 646, 3, 2, 2, 2, 648, 649, 3, 2, 2, 2, 649,
	29, 3, 2, 2, 2, 650, 652, 7, 150, 2, 2, 651, 653, 5, 42, 22, 2, 652, 651,
	3, 2, 2, 2, 652, 653, 3, 2, 2, 2, 653, 654, 3, 2, 2, 2, 654, 659, 5, 44,
	23, 2, 655, 656, 7, 6, 2, 2, 656, 658, 5, 44, 23, 2, 657, 655, 3, 2, 2,
	2, 658, 661, 3, 2, 2, 2, 659, 657, 3, 2, 2, 2, 659, 660, 3, 2, 2, 2, 660,
	671, 3, 2, 2, 2, 661, 659, 3, 2, 2, 2, 662, 663, 7, 70, 2, 2, 663, 668,
	5, 46, 24, 2, 664, 665, 7, 6, 2, 2, 665, 667, 5, 46, 24, 2, 666, 664, 3,
	2, 2, 2, 667, 670, 3, 2, 2, 2, 668, 666, 3, 2, 2, 2, 668, 669, 3, 2, 2,
	2, 669, 672, 3, 2, 2, 2, 670, 668, 3, 2, 2, 2, 671, 662, 3, 2, 2, 2, 671,
	672, 3, 2, 2, 2, 672, 675, 3, 2, 2, 2, 673, 674, 7, 187, 2, 2, 674, 676,
	5, 64, 33, 2, 675, 673, 3, 2, 2, 2, 675, 676, 3, 2, 2, 2, 676, 680, 3,
	2, 2, 2, 677, 678, 7, 76, 2, 2, 678, 679, 7, 24, 2, 2, 679, 681, 5, 32,
	17, 2, 680, 677, 3, 2, 2, 2, 680, 681, 3, 2, 2, 2, 681, 684, 3, 2, 2, 2,
	682, 683, 7, 78, 2, 2, 683, 685, 5, 64, 33, 2, 684, 682, 3, 2, 2, 2, 684,
	685, 3, 2, 2, 2, 685, 31, 3, 2, 2, 2, 686, 688, 5, 42, 22, 2, 687, 686,
	3, 2, 2, 2, 687, 688, 3, 2, 2, 2, 688, 689, 3, 2, 2, 2, 689, 694, 5, 34,
	18, 2, 690, 691, 7, 6, 2, 2, 691, 693, 5, 34, 18, 2, 692, 690, 3, 2, 2,
	2, 693, 696, 3, 2, 2, 2, 694, 692, 3, 2, 2, 2, 694, 695, 3, 2, 2, 2, 695,
	33, 3, 2, 2, 2, 696, 694, 3, 2, 2, 2, 697, 738, 5, 36, 19, 2, 698, 699,
	7, 144, 2, 2, 699, 708, 7, 4, 2, 2, 700, 705, 5, 116, 59, 2, 701, 702,
	7, 6, 2, 2, 702, 704, 5, 116, 59, 2, 703, 701, 3, 2, 2, 2, 704, 707, 3,
	2, 2, 2, 705, 703, 3, 2, 2, 2, 705, 706, 3, 2, 2, 2, 706, 709, 3, 2, 2,
	2, 707, 705, 3, 2, 2, 2, 708, 700, 3, 2, 2, 2, 708, 709, 3, 2, 2, 2, 709,
	710, 3, 2, 2, 2, 710, 738, 7, 5, 2, 2, 711, 712, 7, 39, 2, 2, 712, 721,
	7, 4, 2, 2, 713, 718, 5, 116, 59, 2, 714, 715, 7, 6, 2, 2, 715, 717, 5,
	116, 59, 2, 716, 714, 3, 2, 2, 2, 717, 720, 3, 2, 2, 2, 718, 716, 3, 2,
	2, 2, 718, 719, 3, 2, 2, 2, 719, 722, 3, 2, 2, 2, 720, 718, 3, 2, 2, 2,
	721, 713, 3, 2, 2, 2, 721, 722, 3, 2, 2, 2, 722, 723, 3, 2, 2, 2, 723,
	738, 7, 5, 2, 2, 724, 725, 7, 77, 2, 2, 725, 726, 7, 154, 2, 2, 726, 727,
	7, 4, 2, 2, 727, 732, 5, 38, 20, 2, 728, 729, 7, 6, 2, 2, 729, 731, 5,
	38, 20, 2, 730, 728, 3, 2, 2, 2, 731, 734, 3, 2, 2, 2, 732, 730, 3, 2,
	2, 2, 732, 733, 3, 2, 2, 2, 733, 735, 3, 2, 2, 2, 734, 732, 3, 2, 2, 2,
	735, 736, 7, 5, 2, 2, 736, 738, 3, 2, 2, 2, 737, 697, 3, 2, 2, 2, 737,
	698, 3, 2, 2, 2, 737, 711, 3, 2, 2, 2, 737, 724, 3, 2, 2, 2, 738, 35, 3,
	2, 2, 2, 739, 748, 7, 4, 2, 2, 740, 745, 5, 62, 32, 2, 741, 742, 7, 6,
	2, 2, 742, 744, 5, 62, 32, 2, 743, 741, 3, 2, 2, 2, 744, 747, 3, 2, 2,
	2, 745, 743, 3, 2, 2, 2, 745, 746, 3, 2, 2, 2, 746, 749, 3, 2, 2, 2, 747,
	745, 3, 2, 2, 2, 748, 740, 3, 2, 2, 2, 748, 749, 3, 2, 2, 2, 749, 750,
	3, 2, 2, 2, 750, 753, 7, 5, 2, 2, 751, 753, 5, 62, 32, 2, 752, 739, 3,
	2, 2, 2, 752, 751, 3, 2, 2, 2, 753, 37, 3, 2, 2, 2, 754, 763, 7, 4, 2,
	2, 755, 760, 5, 116, 59, 2, 756, 757, 7, 6, 2, 2, 757, 759, 5, 116, 59,
	2, 758, 756, 3, 2, 2, 2, 759, 762, 3, 2, 2, 2, 760, 758, 3, 2, 2, 2, 760,
	761, 3, 2, 2, 2, 761, 764, 3, 2, 2, 2, 762, 760, 3, 2, 2, 2, 763, 755,
	3, 2, 2, 2, 763, 764, 3, 2, 2, 2, 764, 765, 3, 2, 2, 2, 765, 768, 7, 5,
	2, 2, 766, 768, 5, 116, 59, 2, 767, 754, 3, 2, 2, 2, 767, 766, 3, 2, 2,
	2, 768, 39, 3, 2, 2, 2, 769, 771, 5, 118, 60, 2, 770, 772, 5, 58, 30, 2,
	771, 770, 3, 2, 2, 2, 771, 772, 3, 2, 2, 2, 772, 773, 3, 2, 2, 2, 773,
	774, 7, 19, 2, 2, 774, 775, 7, 4, 2, 2, 775, 776, 5, 8, 5, 2, 776, 777,
	7, 5, 2, 2, 777, 41, 3, 2, 2, 2, 778, 779, 9, 10, 2, 2, 779, 43, 3, 2,
	2, 2, 780, 785, 5, 62, 32, 2, 781, 783, 7, 19, 2, 2, 782, 781, 3, 2, 2,
	2, 782, 783, 3, 2, 2, 2, 783, 784, 3, 2, 2, 2, 784, 786, 5, 118, 60, 2,
	785, 782, 3, 2, 2, 2, 785, 786, 3, 2, 2, 2, 786, 793, 3, 2, 2, 2, 787,
	788, 5, 116, 59, 2, 788, 789, 7, 3, 2, 2, 789, 790, 7, 201, 2, 2, 790,
	793, 3, 2, 2, 2, 791, 793, 7, 201, 2, 2, 792, 780, 3, 2, 2, 2, 792, 787,
	3, 2, 2, 2, 792, 791, 3, 2, 2, 2, 793, 45, 3, 2, 2, 2, 794, 795, 8, 24,
	1, 2, 795, 796, 5, 52, 27, 2, 796, 815, 3, 2, 2, 2, 797, 811, 12, 4, 2,
	2, 798, 799, 7, 38, 2, 2, 799, 800, 7, 92, 2, 2, 800, 812, 5, 52, 27, 2,
	801, 802, 5, 48, 25, 2, 802, 803, 7, 92, 2, 2, 803, 804, 5, 46, 24, 2,
	804, 805, 5, 50, 26, 2, 805, 812, 3, 2, 2, 2, 806, 807, 7, 105, 2, 2, 807,
	808, 5, 48, 25, 2, 808, 809, 7, 92, 2, 2, 809, 810, 5, 52, 27, 2, 810,
	812, 3, 2, 2, 2, 811, 798, 3, 2, 2, 2, 811, 801, 3, 2, 2, 2, 811, 806,
	3, 2, 2, 2, 812, 814, 3, 2, 2, 2, 813, 797, 3, 2, 2, 2, 814, 817, 3, 2,
	2, 2, 815, 813, 3, 2, 2, 2, 815, 816, 3, 2, 2, 2, 816, 47, 3, 2, 2, 2,
	817, 815, 3, 2, 2, 2, 818, 820, 7, 83, 2, 2, 819, 818, 3, 2, 2, 2, 819,
	820, 3, 2, 2, 2, 820, 834, 3, 2, 2, 2, 821, 823, 7, 95, 2, 2, 822, 824,
	7, 122, 2, 2, 823, 822, 3, 2, 2, 2, 823, 824, 3, 2, 2, 2, 824, 834, 3,
	2, 2, 2, 825, 827, 7, 142, 2, 2, 826, 828, 7, 122, 2, 2, 827, 826, 3, 2,
	2, 2, 827, 828, 3, 2, 2, 2, 828, 834, 3, 2, 2, 2, 829, 831, 7, 71, 2, 2,
	830, 832, 7, 122, 2, 2, 831, 830, 3, 2, 2, 2, 831, 832, 3, 2, 2, 2, 832,
	834, 3, 2, 2, 2, 833, 819, 3, 2, 2, 2, 833, 821, 3, 2, 2, 2, 833, 825,
	3, 2, 2, 2, 833, 829, 3, 2, 2, 2, 834, 49, 3, 2, 2, 2, 835, 836, 7, 116,
	2, 2, 836, 850, 5, 64, 33, 2, 837, 838, 7, 181, 2, 2, 838, 839, 7, 4, 2,
	2, 839, 844, 5, 118, 60, 2, 840, 841, 7, 6, 2, 2, 841, 843, 5, 118, 60,
	2, 842, 840, 3, 2, 2, 2, 843, 846, 3, 2, 2, 2, 844, 842, 3, 2, 2, 2, 844,
	845, 3, 2, 2, 2, 845, 847, 3, 2, 2, 2, 846, 844, 3, 2, 2, 2, 847, 848,
	7, 5, 2, 2, 848, 850, 3, 2, 2, 2, 849, 835, 3, 2, 2, 2, 849, 837, 3, 2,
	2, 2, 850, 51, 3, 2, 2, 2, 851, 858, 5, 56, 29, 2, 852, 853, 7, 164, 2,
	2, 853, 854, 5, 54, 28, 2, 854, 855, 7, 4, 2, 2, 855, 856, 5, 62, 32, 2,
	856, 857, 7, 5, 2, 2, 857, 859, 3, 2, 2, 2, 858, 852, 3, 2, 2, 2, 858,
	859, 3, 2, 2, 2, 859, 53, 3, 2, 2, 2, 860, 861, 9, 11, 2, 2, 861, 55, 3,
	2, 2, 2, 862, 870, 5, 60, 31, 2, 863, 865, 7, 19, 2, 2, 864, 863, 3, 2,
	2, 2, 864, 865, 3, 2, 2, 2, 865, 866, 3, 2, 2, 2, 866, 868, 5, 118, 60,
	2, 867, 869, 5, 58, 30, 2, 868, 867, 3, 2, 2, 2, 868, 869, 3, 2, 2, 2,
	869, 871, 3, 2, 2, 2, 870, 864, 3, 2, 2, 2, 870, 871, 3, 2, 2, 2, 871,
	57, 3, 2, 2, 2, 872, 873, 7, 4, 2, 2, 873, 878, 5, 118, 60, 2, 874, 875,
	7, 6, 2, 2, 875, 877, 5, 118, 60, 2, 876, 874, 3, 2, 2, 2, 877, 880, 3,
	2, 2, 2, 878, 876, 3, 2, 2, 2, 878, 879, 3, 2, 2, 2, 879, 881, 3, 2, 2,
	2, 880, 878, 3, 2, 2, 2, 881, 882, 7, 5, 2, 2, 882, 59, 3, 2, 2, 2, 883,
	913, 5, 116, 59, 2, 884, 885, 7, 4, 2, 2, 885, 886, 5, 8, 5, 2, 886, 887,
	7, 5, 2, 2, 887, 913, 3, 2, 2, 2, 888, 889, 7, 179, 2, 2, 889, 890, 7,
	4, 2, 2, 890, 895, 5, 62, 32, 2, 891, 892, 7, 6, 2, 2, 892, 894, 5, 62,
	32, 2, 893, 891, 3, 2, 2, 2, 894, 897, 3, 2, 2, 2, 895, 893, 3, 2, 2, 2,
	895, 896, 3, 2, 2, 2, 896, 898, 3, 2, 2, 2, 897, 895, 3, 2, 2, 2, 898,
	901, 7, 5, 2, 2, 899, 900, 7, 188, 2, 2, 900, 902, 7, 121, 2, 2, 901, 899,
	3, 2, 2, 2, 901, 902, 3, 2, 2, 2, 902, 913, 3, 2, 2, 2, 903, 904, 7, 94,
	2, 2, 904, 905, 7, 4, 2, 2, 905, 906, 5, 8, 5, 2, 906, 907, 7, 5, 2, 2,
	907, 913, 3, 2, 2, 2, 908, 909, 7, 4, 2, 2, 909, 910, 5, 46, 24, 2, 910,
	911, 7, 5, 2, 2, 911, 913, 3, 2, 2, 2, 912, 883, 3, 2, 2, 2, 912, 884,
	3, 2, 2, 2, 912, 888, 3, 2, 2, 2, 912, 903, 3, 2, 2, 2, 912, 908, 3, 2,
	2, 2, 913, 61, 3, 2, 2, 2, 914, 915, 5, 64, 33, 2, 915, 63, 3, 2, 2, 2,
	916, 917, 8, 33, 1, 2, 917, 921, 5, 66, 34, 2, 918, 919, 7, 112, 2, 2,
	919, 921, 5, 64, 33, 5, 920, 916, 3, 2, 2, 2, 920, 918, 3, 2, 2, 2, 921,
	930, 3, 2, 2, 2, 922, 923, 12, 4, 2, 2, 923, 924, 7, 16, 2, 2, 924, 929,
	5, 64, 33, 5, 925, 926, 12, 3, 2, 2, 926, 927, 7, 119, 2, 2, 927, 929,
	5, 64, 33, 4, 928, 922, 3, 2, 2, 2, 928, 925, 3, 2, 2, 2, 929, 932, 3,
	2, 2, 2, 930, 928, 3, 2, 2, 2, 930, 931, 3, 2, 2, 2, 931, 65, 3, 2, 2,
	2, 932, 930, 3, 2, 2, 2, 933, 935, 5, 70, 36, 2, 934, 936, 5, 68, 35, 2,
	935, 934, 3, 2, 2, 2, 935, 936, 3, 2, 2, 2, 936, 67, 3, 2, 2, 2, 937, 938,
	5, 78, 40, 2, 938, 939, 5, 70, 36, 2, 939, 999, 3, 2, 2, 2, 940, 941, 5,
	78, 40, 2, 941, 942, 5, 80, 41, 2, 942, 943, 7, 4, 2, 2, 943, 944, 5, 8,
	5, 2, 944, 945, 7, 5, 2, 2, 945, 999, 3, 2, 2, 2, 946, 948, 7, 112, 2,
	2, 947, 946, 3, 2, 2, 2, 947, 948, 3, 2, 2, 2, 948, 949, 3, 2, 2, 2, 949,
	950, 7, 23, 2, 2, 950, 951, 5, 70, 36, 2, 951, 952, 7, 16, 2, 2, 952, 953,
	5, 70, 36, 2, 953, 999, 3, 2, 2, 2, 954, 956, 7, 112, 2, 2, 955, 954, 3,
	2, 2, 2, 955, 956, 3, 2, 2, 2, 956, 957, 3, 2, 2, 2, 957, 958, 7, 81, 2,
	2, 958, 959, 7, 4, 2, 2, 959, 964, 5, 62, 32, 2, 960, 961, 7, 6, 2, 2,
	961, 963, 5, 62, 32, 2, 962, 960, 3, 2, 2, 2, 963, 966, 3, 2, 2, 2, 964,
	962, 3, 2, 2, 2, 964, 965, 3, 2, 2, 2, 965, 967, 3, 2, 2, 2, 966, 964,
	3, 2, 2, 2, 967, 968, 7, 5, 2, 2, 968, 999, 3, 2, 2, 2, 969, 971, 7, 112,
	2, 2, 970, 969, 3, 2, 2, 2, 970, 971, 3, 2, 2, 2, 971, 972, 3, 2, 2, 2,
	972, 973, 7, 81, 2, 2, 973, 974, 7, 4, 2, 2, 974, 975, 5, 8, 5, 2, 975,
	976, 7, 5, 2, 2, 976, 999, 3, 2, 2, 2, 977, 979, 7, 112, 2, 2, 978, 977,
	3, 2, 2, 2, 978, 979, 3, 2, 2, 2, 979, 980, 3, 2, 2, 2, 980, 981, 7, 97,
	2, 2, 981, 984, 5, 70, 36, 2, 982, 983, 7, 57, 2, 2, 983, 985, 5, 70, 36,
	2, 984, 982, 3, 2, 2, 2, 984, 985, 3, 2, 2, 2, 985, 999, 3, 2, 2, 2, 986,
	988, 7, 90, 2, 2, 987, 989, 7, 112, 2, 2, 988, 987, 3, 2, 2, 2, 988, 989,
	3, 2, 2, 2, 989, 990, 3, 2, 2, 2, 990, 999, 7, 113, 2, 2, 991, 993, 7,
	90, 2, 2, 992, 994, 7, 112, 2, 2, 993, 992, 3, 2, 2, 2, 993, 994, 3, 2,
	2, 2, 994, 995, 3, 2, 2, 2, 995, 996, 7, 52, 2, 2, 996, 997, 7, 70, 2,
	2, 997, 999, 5, 70, 36, 2, 998, 937, 3, 2, 2, 2, 998, 940, 3, 2, 2, 2,
	998, 947, 3, 2, 2, 2, 998, 955, 3, 2, 2, 2, 998, 970, 3, 2, 2, 2, 998,
	978, 3, 2, 2, 2, 998, 986, 3, 2, 2, 2, 998, 991, 3, 2, 2, 2, 999, 69, 3,
	2, 2, 2, 1000, 1001, 8, 36, 1, 2, 1001, 1005, 5, 72, 37, 2, 1002, 1003,
	9, 12, 2, 2, 1003, 1005, 5, 70, 36, 6, 1004, 1000, 3, 2, 2, 2, 1004, 1002,
	3, 2, 2, 2, 1005, 1020, 3, 2, 2, 2, 1006, 1007, 12, 5, 2, 2, 1007, 1008,
	9, 13, 2, 2, 1008, 1019, 5, 70, 36, 6, 1009, 1010, 12, 4, 2, 2, 1010, 1011,
	9, 12, 2, 2, 1011, 1019, 5, 70, 36, 5, 1012, 1013, 12, 3, 2, 2, 1013, 1014,
	7, 204, 2, 2, 1014, 1019, 5, 70, 36, 4, 1015, 1016, 12, 7, 2, 2, 1016,
	1017, 7, 21, 2, 2, 1017, 1019, 5, 76, 39, 2, 1018, 1006, 3, 2, 2, 2, 1018,
	1009, 3, 2, 2, 2, 1018, 1012, 3, 2, 2, 2, 1018, 1015, 3, 2, 2, 2, 1019,
	1022, 3, 2, 2, 2, 1020, 1018, 3, 2, 2, 2, 1020, 1021, 3, 2, 2, 2, 1021,
	71, 3, 2, 2, 2, 1022, 1020, 3, 2, 2, 2, 1023, 1024, 8, 37, 1, 2, 1024,
	1260, 7, 113, 2, 2, 1025, 1260, 5, 84, 43, 2, 1026, 1027, 5, 118, 60, 2,
	1027, 1028, 5, 74, 38, 2, 1028, 1260, 3, 2, 2, 2, 1029, 1030, 7, 217, 2,
	2, 1030, 1260, 5, 74, 38, 2, 1031, 1260, 5, 120, 61, 2, 1032, 1260, 5,
	82, 42, 2, 1033, 1260, 5, 74, 38, 2, 1034, 1260, 7, 207, 2, 2, 1035, 1260,
	7, 7, 2, 2, 1036, 1037, 7, 127, 2, 2, 1037, 1038, 7, 4, 2, 2, 1038, 1039,
	5, 70, 36, 2, 1039, 1040, 7, 81, 2, 2, 1040, 1041, 5, 70, 36, 2, 1041,
	1042, 7, 5, 2, 2, 1042, 1260, 3, 2, 2, 2, 1043, 1044, 7, 4, 2, 2, 1044,
	1047, 5, 62, 32, 2, 1045, 1046, 7, 6, 2, 2, 1046, 1048, 5, 62, 32, 2, 1047,
	1045, 3, 2, 2, 2, 1048, 1049, 3, 2, 2, 2, 1049, 1047, 3, 2, 2, 2, 1049,
	1050, 3, 2, 2, 2, 1050, 1051, 3, 2, 2, 2, 1051, 1052, 7, 5, 2, 2, 1052,
	1260, 3, 2, 2, 2, 1053, 1054, 7, 145, 2, 2, 1054, 1055, 7, 4, 2, 2, 1055,
	1060, 5, 62, 32, 2, 1056, 1057, 7, 6, 2, 2, 1057, 1059, 5, 62, 32, 2, 1058,
	1056, 3, 2, 2, 2, 1059, 1062, 3, 2, 2, 2, 1060, 1058, 3, 2, 2, 2, 1060,
	1061, 3, 2, 2, 2, 1061, 1063, 3, 2, 2, 2, 1062, 1060, 3, 2, 2, 2, 1063,
	1064, 7, 5, 2, 2, 1064, 1260, 3, 2, 2, 2, 1065, 1066, 5, 116, 59, 2, 1066,
	1067, 7, 4, 2, 2, 1067, 1068, 7, 201, 2, 2, 1068, 1070, 7, 5, 2, 2, 1069,
	1071, 5, 98, 50, 2, 1070, 1069, 3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071,
	1073, 3, 2, 2, 2, 1072, 1074, 5, 100, 51, 2, 1073, 1072, 3, 2, 2, 2, 1073,
	1074, 3, 2, 2, 2, 1074, 1260, 3, 2, 2, 2, 1075, 1076, 5, 116, 59, 2, 1076,
	1088, 7, 4, 2, 2, 1077, 1079, 5, 42, 22, 2, 1078, 1077, 3, 2, 2, 2, 1078,
	1079, 3, 2, 2, 2, 1079, 1080, 3, 2, 2, 2, 1080, 1085, 5, 62, 32, 2, 1081,
	1082, 7, 6, 2, 2, 1082, 1084, 5, 62, 32, 2, 1083, 1081, 3, 2, 2, 2, 1084,
	1087, 3, 2, 2, 2, 1085, 1083, 3, 2, 2, 2, 1085, 1086, 3, 2, 2, 2, 1086,
	1089, 3, 2, 2, 2, 1087, 1085, 3, 2, 2, 2, 1088, 1078, 3, 2, 2, 2, 1088,
	1089, 3, 2, 2, 2, 1089, 1100, 3, 2, 2, 2, 1090, 1091, 7, 120, 2, 2, 1091,
	1092, 7, 24, 2, 2, 1092, 1097, 5, 28, 15, 2, 1093, 1094, 7, 6, 2, 2, 1094,
	1096, 5, 28, 15, 2, 1095, 1093, 3, 2, 2, 2, 1096, 1099, 3, 2, 2, 2, 1097,
	1095, 3, 2, 2, 2, 1097, 1098, 3, 2, 2, 2, 1098, 1101, 3, 2, 2, 2, 1099,
	1097, 3, 2, 2, 2, 1100, 1090, 3, 2, 2, 2, 1100, 1101, 3, 2, 2, 2, 1101,
	1102, 3, 2, 2, 2, 1102, 1104, 7, 5, 2, 2, 1103, 1105, 5, 98, 50, 2, 1104,
	1103, 3, 2, 2, 2, 1104, 1105, 3, 2, 2, 2, 1105, 1107, 3, 2, 2, 2, 1106,
	1108, 5, 100, 51, 2, 1107, 1106, 3, 2, 2, 2, 1107, 1108, 3, 2, 2, 2, 1108,
	1260, 3, 2, 2, 2, 1109, 1110, 5, 118, 60, 2, 1110, 1111, 7, 8, 2, 2, 1111,
	1112, 5, 62, 32, 2, 1112, 1260, 3, 2, 2, 2, 1113, 1122, 7, 4, 2, 2, 1114,
	1119, 5, 118, 60, 2, 1115, 1116, 7, 6, 2, 2, 1116, 1118, 5, 118, 60, 2,
	1117, 1115, 3, 2, 2, 2, 1118, 1121, 3, 2, 2, 2, 1119, 1117, 3, 2, 2, 2,
	1119, 1120, 3, 2, 2, 2, 1120, 1123, 3, 2, 2, 2, 1121, 1119, 3, 2, 2, 2,
	1122, 1114, 3, 2, 2, 2, 1122, 1123, 3, 2, 2, 2, 1123, 1124, 3, 2, 2, 2,
	1124, 1125, 7, 5, 2, 2, 1125, 1126, 7, 8, 2, 2, 1126, 1260, 5, 62, 32,
	2, 1127, 1128, 7, 4, 2, 2, 1128, 1129, 5, 8, 5, 2, 1129, 1130, 7, 5, 2,
	2, 1130, 1260, 3, 2, 2, 2, 1131, 1132, 7, 61, 2, 2, 1132, 1133, 7, 4, 2,
	2, 1133, 1134, 5, 8, 5, 2, 1134, 1135, 7, 5, 2, 2, 1135, 1260, 3, 2, 2,
	2, 1136, 1137, 7, 27, 2, 2, 1137, 1139, 5, 70, 36, 2, 1138, 1140, 5, 96,
	49, 2, 1139, 1138, 3, 2, 2, 2, 1140, 1141, 3, 2, 2, 2, 1141, 1139, 3, 2,
	2, 2, 1141, 1142, 3, 2, 2, 2, 1142, 1145, 3, 2, 2, 2, 1143, 1144, 7, 55,
	2, 2, 1144, 1146, 5, 62, 32, 2, 1145, 1143, 3, 2, 2, 2, 1145, 1146, 3,
	2, 2, 2, 1146, 1147, 3, 2, 2, 2, 1147, 1148, 7, 56, 2, 2, 1148, 1260, 3,
	2, 2, 2, 1149, 1151, 7, 27, 2, 2, 1150, 1152, 5, 96, 49, 2, 1151, 1150,
	3, 2, 2, 2, 1152, 1153, 3, 2, 2, 2, 1153, 1151, 3, 2, 2, 2, 1153, 1154,
	3, 2, 2, 2, 1154, 1157, 3, 2, 2, 2, 1155, 1156, 7, 55, 2, 2, 1156, 1158,
	5, 62, 32, 2, 1157, 1155, 3, 2, 2, 2, 1157, 1158, 3, 2, 2, 2, 1158, 1159,
	3, 2, 2, 2, 1159, 1160, 7, 56, 2, 2, 1160, 1260, 3, 2, 2, 2, 1161, 1162,
	7, 28, 2, 2, 1162, 1163, 7, 4, 2, 2, 1163, 1164, 5, 62, 32, 2, 1164, 1165,
	7, 19, 2, 2, 1165, 1166, 5, 90, 46, 2, 1166, 1167, 7, 5, 2, 2, 1167, 1260,
	3, 2, 2, 2, 1168, 1169, 7, 173, 2, 2, 1169, 1170, 7, 4, 2, 2, 1170, 1171,
	5, 62, 32, 2, 1171, 1172, 7, 19, 2, 2, 1172, 1173, 5, 90, 46, 2, 1173,
	1174, 7, 5, 2, 2, 1174, 1260, 3, 2, 2, 2, 1175, 1176, 7, 18, 2, 2, 1176,
	1185, 7, 9, 2, 2, 1177, 1182, 5, 62, 32, 2, 1178, 1179, 7, 6, 2, 2, 1179,
	1181, 5, 62, 32, 2, 1180, 1178, 3, 2, 2, 2, 1181, 1184, 3, 2, 2, 2, 1182,
	1180, 3, 2, 2, 2, 1182, 1183, 3, 2, 2, 2, 1183, 1186, 3, 2, 2, 2, 1184,
	1182, 3, 2, 2, 2, 1185, 1177, 3, 2, 2, 2, 1185, 1186, 3, 2, 2, 2, 1186,
	1187, 3, 2, 2, 2, 1187, 1260, 7, 10, 2, 2, 1188, 1260, 5, 118, 60, 2, 1189,
	1260, 7, 41, 2, 2, 1190, 1194, 7, 42, 2, 2, 1191, 1192, 7, 4, 2, 2, 1192,
	1193, 7, 208, 2, 2, 1193, 1195, 7, 5, 2, 2, 1194, 1191, 3, 2, 2, 2, 1194,
	1195, 3, 2, 2, 2, 1195, 1260, 3, 2, 2, 2, 1196, 1200, 7, 43, 2, 2, 1197,
	1198, 7, 4, 2, 2, 1198, 1199, 7, 208, 2, 2, 1199, 1201, 7, 5, 2, 2, 1200,
	1197, 3, 2, 2, 2, 1200, 1201, 3, 2, 2, 2, 1201, 1260, 3, 2, 2, 2, 1202,
	1206, 7, 99, 2, 2, 1203, 1204, 7, 4, 2, 2, 1204, 1205, 7, 208, 2, 2, 1205,
	1207, 7, 5, 2, 2, 1206, 1203, 3, 2, 2, 2, 1206, 1207, 3, 2, 2, 2, 1207,
	1260, 3, 2, 2, 2, 1208, 1212, 7, 100, 2, 2, 1209, 1210, 7, 4, 2, 2, 1210,
	1211, 7, 208, 2, 2, 1211, 1213, 7, 5, 2, 2, 1212, 1209, 3, 2, 2, 2, 1212,
	1213, 3, 2, 2, 2, 1213, 1260, 3, 2, 2, 2, 1214, 1260, 7, 44, 2, 2, 1215,
	1216, 7, 160, 2, 2, 1216, 1217, 7, 4, 2, 2, 1217, 1218, 5, 70, 36, 2, 1218,
	1219, 7, 70, 2, 2, 1219, 1222, 5, 70, 36, 2, 1220, 1221, 7, 68, 2, 2, 1221,
	1223, 5, 70, 36, 2, 1222, 1220, 3, 2, 2, 2, 1222, 1223, 3, 2, 2, 2, 1223,
	1224, 3, 2, 2, 2, 1224, 1225, 7, 5, 2, 2, 1225, 1260, 3, 2, 2, 2, 1226,
	1227, 7, 111, 2, 2, 1227, 1228, 7, 4, 2, 2, 1228, 1231, 5, 70, 36, 2, 1229,
	1230, 7, 6, 2, 2, 1230, 1232, 5, 88, 45, 2, 1231, 1229, 3, 2, 2, 2, 1231,
	1232, 3, 2, 2, 2, 1232, 1233, 3, 2, 2, 2, 1233, 1234, 7, 5, 2, 2, 1234,
	1260, 3, 2, 2, 2, 1235, 1236, 7, 63, 2, 2, 1236, 1237, 7, 4, 2, 2, 1237,
	1238, 5, 118, 60, 2, 1238, 1239, 7, 70, 2, 2, 1239, 1240, 5, 70, 36, 2,
	1240, 1241, 7, 5, 2, 2, 1241, 1260, 3, 2, 2, 2, 1242, 1243, 7, 4, 2, 2,
	1243, 1244, 5, 62, 32, 2, 1244, 1245, 7, 5, 2, 2, 1245, 1260, 3, 2, 2,
	2, 1246, 1247, 7, 77, 2, 2, 1247, 1256, 7, 4, 2, 2, 1248, 1253, 5, 116,
	59, 2, 1249, 1250, 7, 6, 2, 2, 1250, 1252, 5, 116, 59, 2, 1251, 1249, 3,
	2, 2, 2, 1252, 1255, 3, 2, 2, 2, 1253, 1251, 3, 2, 2, 2, 1253, 1254, 3,
	2, 2, 2, 1254, 1257, 3, 2, 2, 2, 1255, 1253, 3, 2, 2, 2, 1256, 1248, 3,
	2, 2, 2, 1256, 1257, 3, 2, 2, 2, 1257, 1258, 3, 2, 2, 2, 1258, 1260, 7,
	5, 2, 2, 1259, 1023, 3, 2, 2, 2, 1259, 1025, 3, 2, 2, 2, 1259, 1026, 3,
	2, 2, 2, 1259, 1029, 3, 2, 2, 2, 1259, 1031, 3, 2, 2, 2, 1259, 1032, 3,
	2, 2, 2, 1259, 1033, 3, 2, 2, 2, 1259, 1034, 3, 2, 2, 2, 1259, 1035, 3,
	2, 2, 2, 1259, 1036, 3, 2, 2, 2, 1259, 1043, 3, 2, 2, 2, 1259, 1053, 3,
	2, 2, 2, 1259, 1065, 3, 2, 2, 2, 1259, 1075, 3, 2, 2, 2, 1259, 1109, 3,
	2, 2, 2, 1259, 1113, 3, 2, 2, 2, 1259, 1127, 3, 2, 2, 2, 1259, 1131, 3,
	2, 2, 2, 1259, 1136, 3, 2, 2, 2, 1259, 1149, 3, 2, 2, 2, 1259, 1161, 3,
	2, 2, 2, 1259, 1168, 3, 2, 2, 2, 1259, 1175, 3, 2, 2, 2, 1259, 1188, 3,
	2, 2, 2, 1259, 1189, 3, 2, 2, 2, 1259, 1190, 3, 2, 2, 2, 1259, 1196, 3,
	2, 2, 2, 1259, 1202, 3, 2, 2, 2, 1259, 1208, 3, 2, 2, 2, 1259, 1214, 3,
	2, 2, 2, 1259, 1215, 3, 2, 2, 2, 1259, 1226, 3, 2, 2, 2, 1259, 1235, 3,
	2, 2, 2, 1259, 1242, 3, 2, 2, 2, 1259, 1246, 3, 2, 2, 2, 1260, 1271, 3,
	2, 2, 2, 1261, 1262, 12, 16, 2, 2, 1262, 1263, 7, 9, 2, 2, 1263, 1264,
	5, 70, 36, 2, 1264, 1265, 7, 10, 2, 2, 1265, 1270, 3, 2, 2, 2, 1266, 1267,
	12, 14, 2, 2, 1267, 1268, 7, 3, 2, 2, 1268, 1270, 5, 118, 60, 2, 1269,
	1261, 3, 2, 2, 2, 1269, 1266, 3, 2, 2, 2, 1270, 1273, 3, 2, 2, 2, 1271,
	1269, 3, 2, 2, 2, 1271, 1272, 3, 2, 2, 2, 1272, 73, 3, 2, 2, 2, 1273, 1271,
	3, 2, 2, 2, 1274, 1281, 7, 205, 2, 2, 1275, 1278, 7, 206, 2, 2, 1276, 1277,
	7, 175, 2, 2, 1277, 1279, 7, 205, 2, 2, 1278, 1276, 3, 2, 2, 2, 1278, 1279,
	3, 2, 2, 2, 1279, 1281, 3, 2, 2, 2, 1280, 1274, 3, 2, 2, 2, 1280, 1275,
	3, 2, 2, 2, 1281, 75, 3, 2, 2, 2, 1282, 1283, 7, 167, 2, 2, 1283, 1284,
	7, 192, 2, 2, 1284, 1289, 5, 84, 43, 2, 1285, 1286, 7, 167, 2, 2, 1286,
	1287, 7, 192, 2, 2, 1287, 1289, 5, 74, 38, 2, 1288, 1282, 3, 2, 2, 2, 1288,
	1285, 3, 2, 2, 2, 1289, 77, 3, 2, 2, 2, 1290, 1291, 9, 14, 2, 2, 1291,
	79, 3, 2, 2, 2, 1292, 1293, 9, 15, 2, 2, 1293, 81, 3, 2, 2, 2, 1294, 1295,
	9, 16, 2, 2, 1295, 83, 3, 2, 2, 2, 1296, 1298, 7, 88, 2, 2, 1297, 1299,
	9, 12, 2, 2, 1298, 1297, 3, 2, 2, 2, 1298, 1299, 3, 2, 2, 2, 1299, 1300,
	3, 2, 2, 2, 1300, 1301, 5, 74, 38, 2, 1301, 1304, 5, 86, 44, 2, 1302, 1303,
	7, 170, 2, 2, 1303, 1305, 5, 86, 44, 2, 1304, 1302, 3, 2, 2, 2, 1304, 1305,
	3, 2, 2, 2, 1305, 85, 3, 2, 2, 2, 1306, 1307, 9, 17, 2, 2, 1307, 87, 3,
	2, 2, 2, 1308, 1309, 9, 18, 2, 2, 1309, 89, 3, 2, 2, 2, 1310, 1311, 8,
	46, 1, 2, 1311, 1312, 7, 18, 2, 2, 1312, 1313, 7, 195, 2, 2, 1313, 1314,
	5, 90, 46, 2, 1314, 1315, 7, 197, 2, 2, 1315, 1358, 3, 2, 2, 2, 1316, 1317,
	7, 102, 2, 2, 1317, 1318, 7, 195, 2, 2, 1318, 1319, 5, 90, 46, 2, 1319,
	1320, 7, 6, 2, 2, 1320, 1321, 5, 90, 46, 2, 1321, 1322, 7, 197, 2, 2, 1322,
	1358, 3, 2, 2, 2, 1323, 1324, 7, 145, 2, 2, 1324, 1325, 7, 4, 2, 2, 1325,
	1326, 5, 118, 60, 2, 1326, 1333, 5, 90, 46, 2, 1327, 1328, 7, 6, 2, 2,
	1328, 1329, 5, 118, 60, 2, 1329, 1330, 5, 90, 46, 2, 1330, 1332, 3, 2,
	2, 2, 1331, 1327, 3, 2, 2, 2, 1332, 1335, 3, 2, 2, 2, 1333, 1331, 3, 2,
	2, 2, 1333, 1334, 3, 2, 2, 2, 1334, 1336, 3, 2, 2, 2, 1335, 1333, 3, 2,
	2, 2, 1336, 1337, 7, 5, 2, 2, 1337, 1358, 3, 2, 2, 2, 1338, 1350, 5, 94,
	48, 2, 1339, 1340, 7, 4, 2, 2, 1340, 1345, 5, 92, 47, 2, 1341, 1342, 7,
	6, 2, 2, 1342, 1344, 5, 92, 47, 2, 1343, 1341, 3, 2, 2, 2, 1344, 1347,
	3, 2, 2, 2, 1345, 1343, 3, 2, 2, 2, 1345, 1346, 3, 2, 2, 2, 1346, 1348,
	3, 2, 2, 2, 1347, 1345, 3, 2, 2, 2, 1348, 1349, 7, 5, 2, 2, 1349, 1351,
	3, 2, 2, 2, 1350, 1339, 3, 2, 2, 2, 1350, 1351, 3, 2, 2, 2, 1351, 1358,
	3, 2, 2, 2, 1352, 1353, 7, 88, 2, 2, 1353, 1354, 5, 86, 44, 2, 1354, 1355,
	7, 170, 2, 2, 1355, 1356, 5, 86, 44, 2, 1356, 1358, 3, 2, 2, 2, 1357, 1310,
	3, 2, 2, 2, 1357, 1316, 3, 2, 2, 2, 1357, 1323, 3, 2, 2, 2, 1357, 1338,
	3, 2, 2, 2, 1357, 1352, 3, 2, 2, 2, 1358, 1363, 3, 2, 2, 2, 1359, 1360,
	12, 8, 2, 2, 1360, 1362, 7, 18, 2, 2, 1361, 1359, 3, 2, 2, 2, 1362, 1365,
	3, 2, 2, 2, 1363, 1361, 3, 2, 2, 2, 1363, 1364, 3, 2, 2, 2, 1364, 91, 3,
	2, 2, 2, 1365, 1363, 3, 2, 2, 2, 1366, 1369, 7, 208, 2, 2, 1367, 1369,
	5, 90, 46, 2, 1368, 1366, 3, 2, 2, 2, 1368, 1367, 3, 2, 2, 2, 1369, 93,
	3, 2, 2, 2, 1370, 1375, 7, 215, 2, 2, 1371, 1375, 7, 216, 2, 2, 1372, 1375,
	7, 217, 2, 2, 1373, 1375, 5, 118, 60, 2, 1374, 1370, 3, 2, 2, 2, 1374,
	1371, 3, 2, 2, 2, 1374, 1372, 3, 2, 2, 2, 1374, 1373, 3, 2, 2, 2, 1375,
	95, 3, 2, 2, 2, 1376, 1377, 7, 186, 2, 2, 1377, 1378, 5, 62, 32, 2, 1378,
	1379, 7, 166, 2, 2, 1379, 1380, 5, 62, 32, 2, 1380, 97, 3, 2, 2, 2, 1381,
	1382, 7, 65, 2, 2, 1382, 1383, 7, 4, 2, 2, 1383, 1384, 7, 187, 2, 2, 1384,
	1385, 5, 64, 33, 2, 1385, 1386, 7, 5, 2, 2, 1386, 99, 3, 2, 2, 2, 1387,
	1388, 7, 124, 2, 2, 1388, 1399, 7, 4, 2, 2, 1389, 1390, 7, 125, 2, 2, 1390,
	1391, 7, 24, 2, 2, 1391, 1396, 5, 62, 32, 2, 1392, 1393, 7, 6, 2, 2, 1393,
	1395, 5, 62, 32, 2, 1394, 1392, 3, 2, 2, 2, 1395, 1398, 3, 2, 2, 2, 1396,
	1394, 3, 2, 2, 2, 1396, 1397, 3, 2, 2, 2, 1397, 1400, 3, 2, 2, 2, 1398,
	1396, 3, 2, 2, 2, 1399, 1389, 3, 2, 2, 2, 1399, 1400, 3, 2, 2, 2, 1400,
	1411, 3, 2, 2, 2, 1401, 1402, 7, 120, 2, 2, 1402, 1403, 7, 24, 2, 2, 1403,
	1408, 5, 28, 15, 2, 1404, 1405, 7, 6, 2, 2, 1405, 1407, 5, 28, 15, 2, 1406,
	1404, 3, 2, 2, 2, 1407, 1410, 3, 2, 2, 2, 1408, 1406, 3, 2, 2, 2, 1408,
	1409, 3, 2, 2, 2, 1409, 1412, 3, 2, 2, 2, 1410, 1408, 3, 2, 2, 2, 1411,
	1401, 3, 2, 2, 2, 1411, 1412, 3, 2, 2, 2, 1412, 1414, 3, 2, 2, 2, 1413,
	1415, 5, 102, 52, 2, 1414, 1413, 3, 2, 2, 2, 1414, 1415, 3, 2, 2, 2, 1415,
	1416, 3, 2, 2, 2, 1416, 1417, 7, 5, 2, 2, 1417, 101, 3, 2, 2, 2, 1418,
	1419, 7, 133, 2, 2, 1419, 1435, 5, 104, 53, 2, 1420, 1421, 7, 146, 2, 2,
	1421, 1435, 5, 104, 53, 2, 1422, 1423, 7, 133, 2, 2, 1423, 1424, 7, 23,
	2, 2, 1424, 1425, 5, 104, 53, 2, 1425, 1426, 7, 16, 2, 2, 1426, 1427, 5,
	104, 53, 2, 1427, 1435, 3, 2, 2, 2, 1428, 1429, 7, 146, 2, 2, 1429, 1430,
	7, 23, 2, 2, 1430, 1431, 5, 104, 53, 2, 1431, 1432, 7, 16, 2, 2, 1432,
	1433, 5, 104, 53, 2, 1433, 1435, 3, 2, 2, 2, 1434, 1418, 3, 2, 2, 2, 1434,
	1420, 3, 2, 2, 2, 1434, 1422, 3, 2, 2, 2, 1434, 1428, 3, 2, 2, 2, 1435,
	103, 3, 2, 2, 2, 1436, 1437, 7, 176, 2, 2, 1437, 1446, 7, 128, 2, 2, 1438,
	1439, 7, 176, 2, 2, 1439, 1446, 7, 67, 2, 2, 1440, 1441, 7, 40, 2, 2, 1441,
	1446, 7, 145, 2, 2, 1442, 1443, 5, 62, 32, 2, 1443, 1444, 9, 19, 2, 2,
	1444, 1446, 3, 2, 2, 2, 1445, 1436, 3, 2, 2, 2, 1445, 1438, 3, 2, 2, 2,
	1445, 1440, 3, 2, 2, 2, 1445, 1442, 3, 2, 2, 2, 1446, 105, 3, 2, 2, 2,
	1447, 1448, 7, 69, 2, 2, 1448, 1452, 9, 20, 2, 2, 1449, 1450, 7, 174, 2,
	2, 1450, 1452, 9, 21, 2, 2, 1451, 1447, 3, 2, 2, 2, 1451, 1449, 3, 2, 2,
	2, 1452, 107, 3, 2, 2, 2, 1453, 1454, 7, 91, 2, 2, 1454, 1455, 7, 96, 2,
	2, 1455, 1459, 5, 110, 56, 2, 1456, 1457, 7, 134, 2, 2, 1457, 1459, 9,
	22, 2, 2, 1458, 1453, 3, 2, 2, 2, 1458, 1456, 3, 2, 2, 2, 1459, 109, 3,
	2, 2, 2, 1460, 1461, 7, 134, 2, 2, 1461, 1468, 7, 177, 2, 2, 1462, 1463,
	7, 134, 2, 2, 1463, 1468, 7, 35, 2, 2, 1464, 1465, 7, 137, 2, 2, 1465,
	1468, 7, 134, 2, 2, 1466, 1468, 7, 151, 2, 2, 1467, 1460, 3, 2, 2, 2, 1467,
	1462, 3, 2, 2, 2, 1467, 1464, 3, 2, 2, 2, 1467, 1466, 3, 2, 2, 2, 1468,
	111, 3, 2, 2, 2, 1469, 1475, 5, 62, 32, 2, 1470, 1471, 5, 118, 60, 2, 1471,
	1472, 7, 11, 2, 2, 1472, 1473, 5, 62, 32, 2, 1473, 1475, 3, 2, 2, 2, 1474,
	1469, 3, 2, 2, 2, 1474, 1470, 3, 2, 2, 2, 1475, 113, 3, 2, 2, 2, 1476,
	1481, 7, 150, 2, 2, 1477, 1481, 7, 49, 2, 2, 1478, 1481, 7, 85, 2, 2, 1479,
	1481, 5, 118, 60, 2, 1480, 1476, 3, 2, 2, 2, 1480, 1477, 3, 2, 2, 2, 1480,
	1478, 3, 2, 2, 2, 1480, 1479, 3, 2, 2, 2, 1481, 115, 3, 2, 2, 2, 1482,
	1487, 5, 118, 60, 2, 1483, 1484, 7, 3, 2, 2, 1484, 1486, 5, 118, 60, 2,
	1485, 1483, 3, 2, 2, 2, 1486, 1489, 3, 2, 2, 2, 1487, 1485, 3, 2, 2, 2,
	1487, 1488, 3, 2, 2, 2, 1488, 117, 3, 2, 2, 2, 1489, 1487, 3, 2, 2, 2,
	1490, 1496, 7, 211, 2, 2, 1491, 1496, 7, 213, 2, 2, 1492, 1496, 5, 122,
	62, 2, 1493, 1496, 7, 214, 2, 2, 1494, 1496, 7, 212, 2, 2, 1495, 1490,
	3, 2, 2, 2, 1495, 1491, 3, 2, 2, 2, 1495, 1492, 3, 2, 2, 2, 1495, 1493,
	3, 2, 2, 2, 1495, 1494, 3, 2, 2, 2, 1496, 119, 3, 2, 2, 2, 1497, 1501,
	7, 209, 2, 2, 1498, 1501, 7, 210, 2, 2, 1499, 1501, 7, 208, 2, 2, 1500,
	1497, 3, 2, 2, 2, 1500, 1498, 3, 2, 2, 2, 1500, 1499, 3, 2, 2, 2, 1501,
	121, 3, 2, 2, 2, 1502, 1503, 9, 23, 2, 2, 1503, 123, 3, 2, 2, 2, 189, 143,
	148, 154, 158, 172, 176, 180, 184, 192, 196, 199, 206, 215, 221, 225, 231,
	238, 247, 282, 293, 304, 307, 317, 322, 326, 334, 340, 347, 352, 356, 366,
	369, 373, 376, 384, 389, 404, 410, 412, 418, 424, 426, 432, 473, 476, 480,
	484, 492, 501, 504, 508, 526, 529, 537, 540, 546, 553, 558, 564, 570, 578,
	595, 598, 602, 610, 616, 619, 621, 633, 640, 644, 648, 652, 659, 668, 671,
	675, 680, 684, 687, 694, 705, 708, 718, 721, 732, 737, 745, 748, 752, 760,
	763, 767, 771, 782, 785, 792, 811, 815, 819, 823, 827, 831, 833, 844, 849,
	858, 864, 868, 870, 878, 895, 901, 912, 920, 928, 930, 935, 947, 955, 964,
	970, 978, 984, 988, 993, 998, 1004, 1018, 1020, 1049, 1060, 1070, 1073,
	1078, 1085, 1088, 1097, 1100, 1104, 1107, 1119, 1122, 1141, 1145, 1153,
	1157, 1182, 1185, 1194, 1200, 1206, 1212, 1222, 1231, 1253, 1256, 1259,
	1269, 1271, 1278, 1280, 1288, 1298, 1304, 1333, 1345, 1350, 1357, 1363,
	1368, 1374, 1396, 1399, 1408, 1411, 1414, 1434, 1445, 1451, 1458, 1467,
	1474, 1480, 1487, 1495, 1500,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'.'", "'('", "')'", "','", "'?'", "'->'", "'['", "']'", "'=>'", "'ADD'",
	"'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'",
	"'AT'", "'BERNOULLI'", "'BETWEEN'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'",
	"'CAST'", "'CATALOGS'", "'COALESCE'", "'COLUMN'", "'COLUMNS'", "'COMMENT'",
	"'COMMIT'", "'COMMITTED'", "'CONSTRAINT'", "'CREATE'", "'CROSS'", "'CUBE'",
	"'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'",
	"'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", "'DELETE'",
	"'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DISTRIBUTED'", "'DROP'", "'ELSE'",
	"'END'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", "'EXISTS'",
	"'EXPLAIN'", "'EXTRACT'", "'FALSE'", "'FILTER'", "'FIRST'", "'FOLLOWING'",
	"'FOR'", "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTIONS'", "'GRANT'", "'GRANTS'",
	"'GRAPHVIZ'", "'GROUP'", "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", "'IN'",
	"'INCLUDING'", "'INNER'", "'INPUT'", "'INSERT'", "'INTEGER'", "'INTERSECT'",
	"'INTERVAL'", "'INTO'", "'IS'", "'ISOLATION'", "'JOIN'", "'LAST'", "'LATERAL'",
	"'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'",
	"'LOGICAL'", "'MAP'", "'MINUTE'", "'MONTH'", "'NATURAL'", "'NFC'", "'NFD'",
	"'NFKC'", "'NFKD'", "'NO'", "'NORMALIZE'", "'NOT'", "'NULL'", "'NULLIF'",
	"'NULLS'", "'ON'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", "'ORDINALITY'",
	"'OUTER'", "'OUTPUT'", "'OVER'", "'PARTITION'", "'PARTITIONS'", "'POSITION'",
	"'PRECEDING'", "'PREPARE'", "'PRIVILEGES'", "'PROPERTIES'", "'PUBLIC'",
	"'RANGE'", "'READ'", "'RECURSIVE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'",
	"'RESET'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", "'ROLLBACK'", "'ROLLUP'",
	"'ROW'", "'ROWS'", "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SELECT'", "'SERIALIZABLE'",
	"'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SMALLINT'", "'SOME'", "'START'",
	"'STATS'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'",
	"'TEXT'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TINYINT'", "'TO'", "'TRANSACTION'",
	"'TRUE'", "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'",
	"'UNION'", "'UNNEST'", "'USE'", "'USING'", "'VALIDATE'", "'VALUES'", "'VERBOSE'",
	"'VIEW'", "'WHEN'", "'WHERE'", "'WITH'", "'WORK'", "'WRITE'", "'YEAR'",
	"'ZONE'", "'='", "", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'",
	"'/'", "'%'", "'||'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "ADD", "ALL", "ALTER", "ANALYZE",
	"AND", "ANY", "ARRAY", "AS", "ASC", "AT", "BERNOULLI", "BETWEEN", "BY",
	"CALL", "CASCADE", "CASE", "CAST", "CATALOGS", "COALESCE", "COLUMN", "COLUMNS",
	"COMMENT", "COMMIT", "COMMITTED", "CONSTRAINT", "CREATE", "CROSS", "CUBE",
	"CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
	"DATA", "DATE", "DAY", "DEALLOCATE", "DELETE", "DESC", "DESCRIBE", "DISTINCT",
	"DISTRIBUTED", "DROP", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUDING",
	"EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", "FALSE", "FILTER", "FIRST",
	"FOLLOWING", "FOR", "FORMAT", "FROM", "FULL", "FUNCTIONS", "GRANT", "GRANTS",
	"GRAPHVIZ", "GROUP", "GROUPING", "HAVING", "HOUR", "IF", "IN", "INCLUDING",
	"INNER", "INPUT", "INSERT", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
	"IS", "ISOLATION", "JOIN", "LAST", "LATERAL", "LEFT", "LEVEL", "LIKE",
	"LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", "MAP", "MINUTE", "MONTH",
	"NATURAL", "NFC", "NFD", "NFKC", "NFKD", "NO", "NORMALIZE", "NOT", "NULL",
	"NULLIF", "NULLS", "ON", "ONLY", "OPTION", "OR", "ORDER", "ORDINALITY",
	"OUTER", "OUTPUT", "OVER", "PARTITION", "PARTITIONS", "POSITION", "PRECEDING",
	"PREPARE", "PRIVILEGES", "PROPERTIES", "PUBLIC", "RANGE", "READ", "RECURSIVE",
	"RENAME", "REPEATABLE", "REPLACE", "RESET", "RESTRICT", "REVOKE", "RIGHT",
	"ROLLBACK", "ROLLUP", "ROW", "ROWS", "SCHEMA", "SCHEMAS", "SECOND", "SELECT",
	"SERIALIZABLE", "SESSION", "SET", "SETS", "SHOW", "SMALLINT", "SOME", "START",
	"STATS", "SUBSTRING", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TEXT",
	"THEN", "TIME", "TIMESTAMP", "TINYINT", "TO", "TRANSACTION", "TRUE", "TRY_CAST",
	"TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", "UNION", "UNNEST", "USE",
	"USING", "VALIDATE", "VALUES", "VERBOSE", "VIEW", "WHEN", "WHERE", "WITH",
	"WORK", "WRITE", "YEAR", "ZONE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE",
	"PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", "STRING", "UNICODE_STRING",
	"BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER",
	"DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE",
	"TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION", "SIMPLE_COMMENT", "BRACKETED_COMMENT",
	"WS", "UNRECOGNIZED", "DELIMITER",
}

var ruleNames = []string{
	"singleStatement", "singleExpression", "statement", "query", "with", "tableElement",
	"columnDefinition", "likeClause", "properties", "property", "queryNoWith",
	"queryTerm", "queryPrimary", "sortItem", "querySpecification", "groupBy",
	"groupingElement", "groupingExpressions", "groupingSet", "namedQuery",
	"setQuantifier", "selectItem", "relation", "joinType", "joinCriteria",
	"sampledRelation", "sampleType", "aliasedRelation", "columnAliases", "relationPrimary",
	"expression", "booleanExpression", "predicated", "predicate", "valueExpression",
	"primaryExpression", "sql_string", "timeZoneSpecifier", "comparisonOperator",
	"comparisonQuantifier", "booleanValue", "interval", "intervalField", "normalForm",
	"sqltype", "typeParameter", "baseType", "whenClause", "filter", "over",
	"windowFrame", "frameBound", "explainOption", "transactionMode", "levelOfIsolation",
	"callArgument", "privilege", "qualifiedName", "identifier", "number", "nonReserved",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type SqlBaseParser struct {
	*antlr.BaseParser
}

func NewSqlBaseParser(input antlr.TokenStream) *SqlBaseParser {
	this := new(SqlBaseParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SqlBase.g4"

	return this
}

// SqlBaseParser tokens.
const (
	SqlBaseParserEOF                      = antlr.TokenEOF
	SqlBaseParserT__0                     = 1
	SqlBaseParserT__1                     = 2
	SqlBaseParserT__2                     = 3
	SqlBaseParserT__3                     = 4
	SqlBaseParserT__4                     = 5
	SqlBaseParserT__5                     = 6
	SqlBaseParserT__6                     = 7
	SqlBaseParserT__7                     = 8
	SqlBaseParserT__8                     = 9
	SqlBaseParserADD                      = 10
	SqlBaseParserALL                      = 11
	SqlBaseParserALTER                    = 12
	SqlBaseParserANALYZE                  = 13
	SqlBaseParserAND                      = 14
	SqlBaseParserANY                      = 15
	SqlBaseParserARRAY                    = 16
	SqlBaseParserAS                       = 17
	SqlBaseParserASC                      = 18
	SqlBaseParserAT                       = 19
	SqlBaseParserBERNOULLI                = 20
	SqlBaseParserBETWEEN                  = 21
	SqlBaseParserBY                       = 22
	SqlBaseParserCALL                     = 23
	SqlBaseParserCASCADE                  = 24
	SqlBaseParserCASE                     = 25
	SqlBaseParserCAST                     = 26
	SqlBaseParserCATALOGS                 = 27
	SqlBaseParserCOALESCE                 = 28
	SqlBaseParserCOLUMN                   = 29
	SqlBaseParserCOLUMNS                  = 30
	SqlBaseParserCOMMENT                  = 31
	SqlBaseParserCOMMIT                   = 32
	SqlBaseParserCOMMITTED                = 33
	SqlBaseParserCONSTRAINT               = 34
	SqlBaseParserCREATE                   = 35
	SqlBaseParserCROSS                    = 36
	SqlBaseParserCUBE                     = 37
	SqlBaseParserCURRENT                  = 38
	SqlBaseParserCURRENT_DATE             = 39
	SqlBaseParserCURRENT_TIME             = 40
	SqlBaseParserCURRENT_TIMESTAMP        = 41
	SqlBaseParserCURRENT_USER             = 42
	SqlBaseParserDATA                     = 43
	SqlBaseParserDATE                     = 44
	SqlBaseParserDAY                      = 45
	SqlBaseParserDEALLOCATE               = 46
	SqlBaseParserDELETE                   = 47
	SqlBaseParserDESC                     = 48
	SqlBaseParserDESCRIBE                 = 49
	SqlBaseParserDISTINCT                 = 50
	SqlBaseParserDISTRIBUTED              = 51
	SqlBaseParserDROP                     = 52
	SqlBaseParserELSE                     = 53
	SqlBaseParserEND                      = 54
	SqlBaseParserESCAPE                   = 55
	SqlBaseParserEXCEPT                   = 56
	SqlBaseParserEXCLUDING                = 57
	SqlBaseParserEXECUTE                  = 58
	SqlBaseParserEXISTS                   = 59
	SqlBaseParserEXPLAIN                  = 60
	SqlBaseParserEXTRACT                  = 61
	SqlBaseParserFALSE                    = 62
	SqlBaseParserFILTER                   = 63
	SqlBaseParserFIRST                    = 64
	SqlBaseParserFOLLOWING                = 65
	SqlBaseParserFOR                      = 66
	SqlBaseParserFORMAT                   = 67
	SqlBaseParserFROM                     = 68
	SqlBaseParserFULL                     = 69
	SqlBaseParserFUNCTIONS                = 70
	SqlBaseParserGRANT                    = 71
	SqlBaseParserGRANTS                   = 72
	SqlBaseParserGRAPHVIZ                 = 73
	SqlBaseParserGROUP                    = 74
	SqlBaseParserGROUPING                 = 75
	SqlBaseParserHAVING                   = 76
	SqlBaseParserHOUR                     = 77
	SqlBaseParserIF                       = 78
	SqlBaseParserIN                       = 79
	SqlBaseParserINCLUDING                = 80
	SqlBaseParserINNER                    = 81
	SqlBaseParserINPUT                    = 82
	SqlBaseParserINSERT                   = 83
	SqlBaseParserINTEGER                  = 84
	SqlBaseParserINTERSECT                = 85
	SqlBaseParserINTERVAL                 = 86
	SqlBaseParserINTO                     = 87
	SqlBaseParserIS                       = 88
	SqlBaseParserISOLATION                = 89
	SqlBaseParserJOIN                     = 90
	SqlBaseParserLAST                     = 91
	SqlBaseParserLATERAL                  = 92
	SqlBaseParserLEFT                     = 93
	SqlBaseParserLEVEL                    = 94
	SqlBaseParserLIKE                     = 95
	SqlBaseParserLIMIT                    = 96
	SqlBaseParserLOCALTIME                = 97
	SqlBaseParserLOCALTIMESTAMP           = 98
	SqlBaseParserLOGICAL                  = 99
	SqlBaseParserMAP                      = 100
	SqlBaseParserMINUTE                   = 101
	SqlBaseParserMONTH                    = 102
	SqlBaseParserNATURAL                  = 103
	SqlBaseParserNFC                      = 104
	SqlBaseParserNFD                      = 105
	SqlBaseParserNFKC                     = 106
	SqlBaseParserNFKD                     = 107
	SqlBaseParserNO                       = 108
	SqlBaseParserNORMALIZE                = 109
	SqlBaseParserNOT                      = 110
	SqlBaseParserNULL                     = 111
	SqlBaseParserNULLIF                   = 112
	SqlBaseParserNULLS                    = 113
	SqlBaseParserON                       = 114
	SqlBaseParserONLY                     = 115
	SqlBaseParserOPTION                   = 116
	SqlBaseParserOR                       = 117
	SqlBaseParserORDER                    = 118
	SqlBaseParserORDINALITY               = 119
	SqlBaseParserOUTER                    = 120
	SqlBaseParserOUTPUT                   = 121
	SqlBaseParserOVER                     = 122
	SqlBaseParserPARTITION                = 123
	SqlBaseParserPARTITIONS               = 124
	SqlBaseParserPOSITION                 = 125
	SqlBaseParserPRECEDING                = 126
	SqlBaseParserPREPARE                  = 127
	SqlBaseParserPRIVILEGES               = 128
	SqlBaseParserPROPERTIES               = 129
	SqlBaseParserPUBLIC                   = 130
	SqlBaseParserRANGE                    = 131
	SqlBaseParserREAD                     = 132
	SqlBaseParserRECURSIVE                = 133
	SqlBaseParserRENAME                   = 134
	SqlBaseParserREPEATABLE               = 135
	SqlBaseParserREPLACE                  = 136
	SqlBaseParserRESET                    = 137
	SqlBaseParserRESTRICT                 = 138
	SqlBaseParserREVOKE                   = 139
	SqlBaseParserRIGHT                    = 140
	SqlBaseParserROLLBACK                 = 141
	SqlBaseParserROLLUP                   = 142
	SqlBaseParserROW                      = 143
	SqlBaseParserROWS                     = 144
	SqlBaseParserSCHEMA                   = 145
	SqlBaseParserSCHEMAS                  = 146
	SqlBaseParserSECOND                   = 147
	SqlBaseParserSELECT                   = 148
	SqlBaseParserSERIALIZABLE             = 149
	SqlBaseParserSESSION                  = 150
	SqlBaseParserSET                      = 151
	SqlBaseParserSETS                     = 152
	SqlBaseParserSHOW                     = 153
	SqlBaseParserSMALLINT                 = 154
	SqlBaseParserSOME                     = 155
	SqlBaseParserSTART                    = 156
	SqlBaseParserSTATS                    = 157
	SqlBaseParserSUBSTRING                = 158
	SqlBaseParserSYSTEM                   = 159
	SqlBaseParserTABLE                    = 160
	SqlBaseParserTABLES                   = 161
	SqlBaseParserTABLESAMPLE              = 162
	SqlBaseParserTEXT                     = 163
	SqlBaseParserTHEN                     = 164
	SqlBaseParserTIME                     = 165
	SqlBaseParserTIMESTAMP                = 166
	SqlBaseParserTINYINT                  = 167
	SqlBaseParserTO                       = 168
	SqlBaseParserTRANSACTION              = 169
	SqlBaseParserTRUE                     = 170
	SqlBaseParserTRY_CAST                 = 171
	SqlBaseParserTYPE                     = 172
	SqlBaseParserUESCAPE                  = 173
	SqlBaseParserUNBOUNDED                = 174
	SqlBaseParserUNCOMMITTED              = 175
	SqlBaseParserUNION                    = 176
	SqlBaseParserUNNEST                   = 177
	SqlBaseParserUSE                      = 178
	SqlBaseParserUSING                    = 179
	SqlBaseParserVALIDATE                 = 180
	SqlBaseParserVALUES                   = 181
	SqlBaseParserVERBOSE                  = 182
	SqlBaseParserVIEW                     = 183
	SqlBaseParserWHEN                     = 184
	SqlBaseParserWHERE                    = 185
	SqlBaseParserWITH                     = 186
	SqlBaseParserWORK                     = 187
	SqlBaseParserWRITE                    = 188
	SqlBaseParserYEAR                     = 189
	SqlBaseParserZONE                     = 190
	SqlBaseParserEQ                       = 191
	SqlBaseParserNEQ                      = 192
	SqlBaseParserLT                       = 193
	SqlBaseParserLTE                      = 194
	SqlBaseParserGT                       = 195
	SqlBaseParserGTE                      = 196
	SqlBaseParserPLUS                     = 197
	SqlBaseParserMINUS                    = 198
	SqlBaseParserASTERISK                 = 199
	SqlBaseParserSLASH                    = 200
	SqlBaseParserPERCENT                  = 201
	SqlBaseParserCONCAT                   = 202
	SqlBaseParserSTRING                   = 203
	SqlBaseParserUNICODE_STRING           = 204
	SqlBaseParserBINARY_LITERAL           = 205
	SqlBaseParserINTEGER_VALUE            = 206
	SqlBaseParserDECIMAL_VALUE            = 207
	SqlBaseParserDOUBLE_VALUE             = 208
	SqlBaseParserIDENTIFIER               = 209
	SqlBaseParserDIGIT_IDENTIFIER         = 210
	SqlBaseParserQUOTED_IDENTIFIER        = 211
	SqlBaseParserBACKQUOTED_IDENTIFIER    = 212
	SqlBaseParserTIME_WITH_TIME_ZONE      = 213
	SqlBaseParserTIMESTAMP_WITH_TIME_ZONE = 214
	SqlBaseParserDOUBLE_PRECISION         = 215
	SqlBaseParserSIMPLE_COMMENT           = 216
	SqlBaseParserBRACKETED_COMMENT        = 217
	SqlBaseParserWS                       = 218
	SqlBaseParserUNRECOGNIZED             = 219
	SqlBaseParserDELIMITER                = 220
)

// SqlBaseParser rules.
const (
	SqlBaseParserRULE_singleStatement      = 0
	SqlBaseParserRULE_singleExpression     = 1
	SqlBaseParserRULE_statement            = 2
	SqlBaseParserRULE_query                = 3
	SqlBaseParserRULE_with                 = 4
	SqlBaseParserRULE_tableElement         = 5
	SqlBaseParserRULE_columnDefinition     = 6
	SqlBaseParserRULE_likeClause           = 7
	SqlBaseParserRULE_properties           = 8
	SqlBaseParserRULE_property             = 9
	SqlBaseParserRULE_queryNoWith          = 10
	SqlBaseParserRULE_queryTerm            = 11
	SqlBaseParserRULE_queryPrimary         = 12
	SqlBaseParserRULE_sortItem             = 13
	SqlBaseParserRULE_querySpecification   = 14
	SqlBaseParserRULE_groupBy              = 15
	SqlBaseParserRULE_groupingElement      = 16
	SqlBaseParserRULE_groupingExpressions  = 17
	SqlBaseParserRULE_groupingSet          = 18
	SqlBaseParserRULE_namedQuery           = 19
	SqlBaseParserRULE_setQuantifier        = 20
	SqlBaseParserRULE_selectItem           = 21
	SqlBaseParserRULE_relation             = 22
	SqlBaseParserRULE_joinType             = 23
	SqlBaseParserRULE_joinCriteria         = 24
	SqlBaseParserRULE_sampledRelation      = 25
	SqlBaseParserRULE_sampleType           = 26
	SqlBaseParserRULE_aliasedRelation      = 27
	SqlBaseParserRULE_columnAliases        = 28
	SqlBaseParserRULE_relationPrimary      = 29
	SqlBaseParserRULE_expression           = 30
	SqlBaseParserRULE_booleanExpression    = 31
	SqlBaseParserRULE_predicated           = 32
	SqlBaseParserRULE_predicate            = 33
	SqlBaseParserRULE_valueExpression      = 34
	SqlBaseParserRULE_primaryExpression    = 35
	SqlBaseParserRULE_sql_string           = 36
	SqlBaseParserRULE_timeZoneSpecifier    = 37
	SqlBaseParserRULE_comparisonOperator   = 38
	SqlBaseParserRULE_comparisonQuantifier = 39
	SqlBaseParserRULE_booleanValue         = 40
	SqlBaseParserRULE_interval             = 41
	SqlBaseParserRULE_intervalField        = 42
	SqlBaseParserRULE_normalForm           = 43
	SqlBaseParserRULE_sqltype              = 44
	SqlBaseParserRULE_typeParameter        = 45
	SqlBaseParserRULE_baseType             = 46
	SqlBaseParserRULE_whenClause           = 47
	SqlBaseParserRULE_filter               = 48
	SqlBaseParserRULE_over                 = 49
	SqlBaseParserRULE_windowFrame          = 50
	SqlBaseParserRULE_frameBound           = 51
	SqlBaseParserRULE_explainOption        = 52
	SqlBaseParserRULE_transactionMode      = 53
	SqlBaseParserRULE_levelOfIsolation     = 54
	SqlBaseParserRULE_callArgument         = 55
	SqlBaseParserRULE_privilege            = 56
	SqlBaseParserRULE_qualifiedName        = 57
	SqlBaseParserRULE_identifier           = 58
	SqlBaseParserRULE_number               = 59
	SqlBaseParserRULE_nonReserved          = 60
)

// ISingleStatementContext is an interface to support dynamic dispatch.
type ISingleStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleStatementContext differentiates from other interfaces.
	IsSingleStatementContext()
}

type SingleStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleStatementContext() *SingleStatementContext {
	var p = new(SingleStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_singleStatement
	return p
}

func (*SingleStatementContext) IsSingleStatementContext() {}

func NewSingleStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleStatementContext {
	var p = new(SingleStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_singleStatement

	return p
}

func (s *SingleStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *SingleStatementContext) EOF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEOF, 0)
}

func (s *SingleStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSingleStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) SingleStatement() (localctx ISingleStatementContext) {
	localctx = NewSingleStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SqlBaseParserRULE_singleStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(122)
		p.Statement()
	}
	{
		p.SetState(123)
		p.Match(SqlBaseParserEOF)
	}

	return localctx
}

// ISingleExpressionContext is an interface to support dynamic dispatch.
type ISingleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleExpressionContext differentiates from other interfaces.
	IsSingleExpressionContext()
}

type SingleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleExpressionContext() *SingleExpressionContext {
	var p = new(SingleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_singleExpression
	return p
}

func (*SingleExpressionContext) IsSingleExpressionContext() {}

func NewSingleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleExpressionContext {
	var p = new(SingleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_singleExpression

	return p
}

func (s *SingleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SingleExpressionContext) EOF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEOF, 0)
}

func (s *SingleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSingleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) SingleExpression() (localctx ISingleExpressionContext) {
	localctx = NewSingleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SqlBaseParserRULE_singleExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(125)
		p.Expression()
	}
	{
		p.SetState(126)
		p.Match(SqlBaseParserEOF)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) CopyFrom(ctx *StatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExplainContext struct {
	*StatementContext
}

func NewExplainContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplainContext {
	var p = new(ExplainContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ExplainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXPLAIN, 0)
}

func (s *ExplainContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ExplainContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserANALYZE, 0)
}

func (s *ExplainContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVERBOSE, 0)
}

func (s *ExplainContext) AllExplainOption() []IExplainOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExplainOptionContext)(nil)).Elem())
	var tst = make([]IExplainOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExplainOptionContext)
		}
	}

	return tst
}

func (s *ExplainContext) ExplainOption(i int) IExplainOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplainOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExplainOptionContext)
}

func (s *ExplainContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitExplain(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrepareContext struct {
	*StatementContext
}

func NewPrepareContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrepareContext {
	var p = new(PrepareContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *PrepareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrepareContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPREPARE, 0)
}

func (s *PrepareContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrepareContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *PrepareContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *PrepareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitPrepare(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateTableContext struct {
	*StatementContext
}

func NewCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateTableContext {
	var p = new(CreateTableContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *CreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCREATE, 0)
}

func (s *CreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *CreateTableContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *CreateTableContext) AllTableElement() []ITableElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableElementContext)(nil)).Elem())
	var tst = make([]ITableElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableElementContext)
		}
	}

	return tst
}

func (s *CreateTableContext) TableElement(i int) ITableElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableElementContext)
}

func (s *CreateTableContext) IF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIF, 0)
}

func (s *CreateTableContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *CreateTableContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXISTS, 0)
}

func (s *CreateTableContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOMMENT, 0)
}

func (s *CreateTableContext) Sql_string() ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *CreateTableContext) WITH() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWITH, 0)
}

func (s *CreateTableContext) Properties() IPropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertiesContext)
}

func (s *CreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type StartTransactionContext struct {
	*StatementContext
}

func NewStartTransactionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StartTransactionContext {
	var p = new(StartTransactionContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *StartTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartTransactionContext) START() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSTART, 0)
}

func (s *StartTransactionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTRANSACTION, 0)
}

func (s *StartTransactionContext) AllTransactionMode() []ITransactionModeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransactionModeContext)(nil)).Elem())
	var tst = make([]ITransactionModeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransactionModeContext)
		}
	}

	return tst
}

func (s *StartTransactionContext) TransactionMode(i int) ITransactionModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionModeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransactionModeContext)
}

func (s *StartTransactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitStartTransaction(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateTableAsSelectContext struct {
	*StatementContext
}

func NewCreateTableAsSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateTableAsSelectContext {
	var p = new(CreateTableAsSelectContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *CreateTableAsSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableAsSelectContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCREATE, 0)
}

func (s *CreateTableAsSelectContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *CreateTableAsSelectContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *CreateTableAsSelectContext) AS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAS, 0)
}

func (s *CreateTableAsSelectContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *CreateTableAsSelectContext) IF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIF, 0)
}

func (s *CreateTableAsSelectContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *CreateTableAsSelectContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXISTS, 0)
}

func (s *CreateTableAsSelectContext) ColumnAliases() IColumnAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAliasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *CreateTableAsSelectContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOMMENT, 0)
}

func (s *CreateTableAsSelectContext) Sql_string() ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *CreateTableAsSelectContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(SqlBaseParserWITH)
}

func (s *CreateTableAsSelectContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWITH, i)
}

func (s *CreateTableAsSelectContext) Properties() IPropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertiesContext)
}

func (s *CreateTableAsSelectContext) DATA() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDATA, 0)
}

func (s *CreateTableAsSelectContext) NO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNO, 0)
}

func (s *CreateTableAsSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCreateTableAsSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

type UseContext struct {
	*StatementContext
	schema  IIdentifierContext
	catalog IIdentifierContext
}

func NewUseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UseContext {
	var p = new(UseContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *UseContext) GetSchema() IIdentifierContext { return s.schema }

func (s *UseContext) GetCatalog() IIdentifierContext { return s.catalog }

func (s *UseContext) SetSchema(v IIdentifierContext) { s.schema = v }

func (s *UseContext) SetCatalog(v IIdentifierContext) { s.catalog = v }

func (s *UseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseContext) USE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUSE, 0)
}

func (s *UseContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *UseContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitUse(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowStatsContext struct {
	*StatementContext
}

func NewShowStatsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowStatsContext {
	var p = new(ShowStatsContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowStatsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowStatsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowStatsContext) STATS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSTATS, 0)
}

func (s *ShowStatsContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *ShowStatsContext) FOR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFOR, 0)
}

func (s *ShowStatsContext) ON() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserON, 0)
}

func (s *ShowStatsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowStats(s)

	default:
		return t.VisitChildren(s)
	}
}

type DeallocateContext struct {
	*StatementContext
}

func NewDeallocateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DeallocateContext {
	var p = new(DeallocateContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *DeallocateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeallocateContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDEALLOCATE, 0)
}

func (s *DeallocateContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPREPARE, 0)
}

func (s *DeallocateContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DeallocateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDeallocate(s)

	default:
		return t.VisitChildren(s)
	}
}

type RenameTableContext struct {
	*StatementContext
	from IQualifiedNameContext
	to   IQualifiedNameContext
}

func NewRenameTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RenameTableContext {
	var p = new(RenameTableContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *RenameTableContext) GetFrom() IQualifiedNameContext { return s.from }

func (s *RenameTableContext) GetTo() IQualifiedNameContext { return s.to }

func (s *RenameTableContext) SetFrom(v IQualifiedNameContext) { s.from = v }

func (s *RenameTableContext) SetTo(v IQualifiedNameContext) { s.to = v }

func (s *RenameTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameTableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALTER, 0)
}

func (s *RenameTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *RenameTableContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRENAME, 0)
}

func (s *RenameTableContext) TO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTO, 0)
}

func (s *RenameTableContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *RenameTableContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *RenameTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRenameTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type CommitContext struct {
	*StatementContext
}

func NewCommitContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CommitContext {
	var p = new(CommitContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *CommitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommitContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOMMIT, 0)
}

func (s *CommitContext) WORK() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWORK, 0)
}

func (s *CommitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCommit(s)

	default:
		return t.VisitChildren(s)
	}
}

type RevokeContext struct {
	*StatementContext
	grantee IIdentifierContext
}

func NewRevokeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RevokeContext {
	var p = new(RevokeContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *RevokeContext) GetGrantee() IIdentifierContext { return s.grantee }

func (s *RevokeContext) SetGrantee(v IIdentifierContext) { s.grantee = v }

func (s *RevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREVOKE, 0)
}

func (s *RevokeContext) ON() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserON, 0)
}

func (s *RevokeContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *RevokeContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *RevokeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RevokeContext) AllPrivilege() []IPrivilegeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivilegeContext)(nil)).Elem())
	var tst = make([]IPrivilegeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivilegeContext)
		}
	}

	return tst
}

func (s *RevokeContext) Privilege(i int) IPrivilegeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeContext)
}

func (s *RevokeContext) ALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALL, 0)
}

func (s *RevokeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPRIVILEGES, 0)
}

func (s *RevokeContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGRANT, 0)
}

func (s *RevokeContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOPTION, 0)
}

func (s *RevokeContext) FOR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFOR, 0)
}

func (s *RevokeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *RevokeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRevoke(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowPartitionsContext struct {
	*StatementContext
	limit antlr.Token
}

func NewShowPartitionsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowPartitionsContext {
	var p = new(ShowPartitionsContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowPartitionsContext) GetLimit() antlr.Token { return s.limit }

func (s *ShowPartitionsContext) SetLimit(v antlr.Token) { s.limit = v }

func (s *ShowPartitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowPartitionsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowPartitionsContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPARTITIONS, 0)
}

func (s *ShowPartitionsContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *ShowPartitionsContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *ShowPartitionsContext) IN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIN, 0)
}

func (s *ShowPartitionsContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWHERE, 0)
}

func (s *ShowPartitionsContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *ShowPartitionsContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserORDER, 0)
}

func (s *ShowPartitionsContext) BY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBY, 0)
}

func (s *ShowPartitionsContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *ShowPartitionsContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *ShowPartitionsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLIMIT, 0)
}

func (s *ShowPartitionsContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTEGER_VALUE, 0)
}

func (s *ShowPartitionsContext) ALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALL, 0)
}

func (s *ShowPartitionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowPartitions(s)

	default:
		return t.VisitChildren(s)
	}
}

type DropColumnContext struct {
	*StatementContext
	tableName IQualifiedNameContext
	column    IQualifiedNameContext
}

func NewDropColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DropColumnContext {
	var p = new(DropColumnContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *DropColumnContext) GetTableName() IQualifiedNameContext { return s.tableName }

func (s *DropColumnContext) GetColumn() IQualifiedNameContext { return s.column }

func (s *DropColumnContext) SetTableName(v IQualifiedNameContext) { s.tableName = v }

func (s *DropColumnContext) SetColumn(v IQualifiedNameContext) { s.column = v }

func (s *DropColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropColumnContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALTER, 0)
}

func (s *DropColumnContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *DropColumnContext) DROP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDROP, 0)
}

func (s *DropColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOLUMN, 0)
}

func (s *DropColumnContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *DropColumnContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *DropColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDropColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type DropViewContext struct {
	*StatementContext
}

func NewDropViewContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DropViewContext {
	var p = new(DropViewContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *DropViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropViewContext) DROP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDROP, 0)
}

func (s *DropViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVIEW, 0)
}

func (s *DropViewContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *DropViewContext) IF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIF, 0)
}

func (s *DropViewContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXISTS, 0)
}

func (s *DropViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDropView(s)

	default:
		return t.VisitChildren(s)
	}
}

type DeleteContext struct {
	*StatementContext
}

func NewDeleteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DeleteContext {
	var p = new(DeleteContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *DeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDELETE, 0)
}

func (s *DeleteContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *DeleteContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *DeleteContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWHERE, 0)
}

func (s *DeleteContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *DeleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDelete(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowTablesContext struct {
	*StatementContext
	pattern ISql_stringContext
	escape  ISql_stringContext
}

func NewShowTablesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowTablesContext {
	var p = new(ShowTablesContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowTablesContext) GetPattern() ISql_stringContext { return s.pattern }

func (s *ShowTablesContext) GetEscape() ISql_stringContext { return s.escape }

func (s *ShowTablesContext) SetPattern(v ISql_stringContext) { s.pattern = v }

func (s *ShowTablesContext) SetEscape(v ISql_stringContext) { s.escape = v }

func (s *ShowTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowTablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLES, 0)
}

func (s *ShowTablesContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *ShowTablesContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLIKE, 0)
}

func (s *ShowTablesContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *ShowTablesContext) IN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIN, 0)
}

func (s *ShowTablesContext) AllSql_string() []ISql_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_stringContext)(nil)).Elem())
	var tst = make([]ISql_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_stringContext)
		}
	}

	return tst
}

func (s *ShowTablesContext) Sql_string(i int) ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *ShowTablesContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserESCAPE, 0)
}

func (s *ShowTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowTables(s)

	default:
		return t.VisitChildren(s)
	}
}

type DescribeInputContext struct {
	*StatementContext
}

func NewDescribeInputContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DescribeInputContext {
	var p = new(DescribeInputContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *DescribeInputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeInputContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDESCRIBE, 0)
}

func (s *DescribeInputContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINPUT, 0)
}

func (s *DescribeInputContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DescribeInputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDescribeInput(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowStatsForQueryContext struct {
	*StatementContext
}

func NewShowStatsForQueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowStatsForQueryContext {
	var p = new(ShowStatsForQueryContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowStatsForQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowStatsForQueryContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowStatsForQueryContext) STATS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSTATS, 0)
}

func (s *ShowStatsForQueryContext) FOR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFOR, 0)
}

func (s *ShowStatsForQueryContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *ShowStatsForQueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowStatsForQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCatalogsContext struct {
	*StatementContext
	pattern ISql_stringContext
}

func NewShowCatalogsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCatalogsContext {
	var p = new(ShowCatalogsContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowCatalogsContext) GetPattern() ISql_stringContext { return s.pattern }

func (s *ShowCatalogsContext) SetPattern(v ISql_stringContext) { s.pattern = v }

func (s *ShowCatalogsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCatalogsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowCatalogsContext) CATALOGS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCATALOGS, 0)
}

func (s *ShowCatalogsContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLIKE, 0)
}

func (s *ShowCatalogsContext) Sql_string() ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *ShowCatalogsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowCatalogs(s)

	default:
		return t.VisitChildren(s)
	}
}

type StatementDefaultContext struct {
	*StatementContext
}

func NewStatementDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StatementDefaultContext {
	var p = new(StatementDefaultContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *StatementDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementDefaultContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *StatementDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitStatementDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

type RenameColumnContext struct {
	*StatementContext
	tableName IQualifiedNameContext
	from      IIdentifierContext
	to        IIdentifierContext
}

func NewRenameColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RenameColumnContext {
	var p = new(RenameColumnContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *RenameColumnContext) GetTableName() IQualifiedNameContext { return s.tableName }

func (s *RenameColumnContext) GetFrom() IIdentifierContext { return s.from }

func (s *RenameColumnContext) GetTo() IIdentifierContext { return s.to }

func (s *RenameColumnContext) SetTableName(v IQualifiedNameContext) { s.tableName = v }

func (s *RenameColumnContext) SetFrom(v IIdentifierContext) { s.from = v }

func (s *RenameColumnContext) SetTo(v IIdentifierContext) { s.to = v }

func (s *RenameColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameColumnContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALTER, 0)
}

func (s *RenameColumnContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *RenameColumnContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRENAME, 0)
}

func (s *RenameColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOLUMN, 0)
}

func (s *RenameColumnContext) TO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTO, 0)
}

func (s *RenameColumnContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *RenameColumnContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *RenameColumnContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RenameColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRenameColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetSessionContext struct {
	*StatementContext
}

func NewSetSessionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetSessionContext {
	var p = new(SetSessionContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *SetSessionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetSessionContext) SET() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSET, 0)
}

func (s *SetSessionContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSESSION, 0)
}

func (s *SetSessionContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *SetSessionContext) EQ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEQ, 0)
}

func (s *SetSessionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetSessionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSetSession(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateViewContext struct {
	*StatementContext
}

func NewCreateViewContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateViewContext {
	var p = new(CreateViewContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *CreateViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateViewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCREATE, 0)
}

func (s *CreateViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVIEW, 0)
}

func (s *CreateViewContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *CreateViewContext) AS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAS, 0)
}

func (s *CreateViewContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *CreateViewContext) OR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOR, 0)
}

func (s *CreateViewContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREPLACE, 0)
}

func (s *CreateViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCreateView(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateTableContext struct {
	*StatementContext
}

func NewShowCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateTableContext {
	var p = new(ShowCreateTableContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateTableContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCREATE, 0)
}

func (s *ShowCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *ShowCreateTableContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *ShowCreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowSchemasContext struct {
	*StatementContext
	pattern ISql_stringContext
	escape  ISql_stringContext
}

func NewShowSchemasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowSchemasContext {
	var p = new(ShowSchemasContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowSchemasContext) GetPattern() ISql_stringContext { return s.pattern }

func (s *ShowSchemasContext) GetEscape() ISql_stringContext { return s.escape }

func (s *ShowSchemasContext) SetPattern(v ISql_stringContext) { s.pattern = v }

func (s *ShowSchemasContext) SetEscape(v ISql_stringContext) { s.escape = v }

func (s *ShowSchemasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSchemasContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowSchemasContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSCHEMAS, 0)
}

func (s *ShowSchemasContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ShowSchemasContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLIKE, 0)
}

func (s *ShowSchemasContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *ShowSchemasContext) IN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIN, 0)
}

func (s *ShowSchemasContext) AllSql_string() []ISql_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_stringContext)(nil)).Elem())
	var tst = make([]ISql_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_stringContext)
		}
	}

	return tst
}

func (s *ShowSchemasContext) Sql_string(i int) ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *ShowSchemasContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserESCAPE, 0)
}

func (s *ShowSchemasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowSchemas(s)

	default:
		return t.VisitChildren(s)
	}
}

type DropTableContext struct {
	*StatementContext
}

func NewDropTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DropTableContext {
	var p = new(DropTableContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *DropTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTableContext) DROP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDROP, 0)
}

func (s *DropTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *DropTableContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *DropTableContext) IF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIF, 0)
}

func (s *DropTableContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXISTS, 0)
}

func (s *DropTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDropTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowColumnsContext struct {
	*StatementContext
}

func NewShowColumnsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowColumnsContext {
	var p = new(ShowColumnsContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowColumnsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowColumnsContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOLUMNS, 0)
}

func (s *ShowColumnsContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *ShowColumnsContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *ShowColumnsContext) IN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIN, 0)
}

func (s *ShowColumnsContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDESCRIBE, 0)
}

func (s *ShowColumnsContext) DESC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDESC, 0)
}

func (s *ShowColumnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowColumns(s)

	default:
		return t.VisitChildren(s)
	}
}

type RollbackContext struct {
	*StatementContext
}

func NewRollbackContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RollbackContext {
	var p = new(RollbackContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *RollbackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollbackContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROLLBACK, 0)
}

func (s *RollbackContext) WORK() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWORK, 0)
}

func (s *RollbackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRollback(s)

	default:
		return t.VisitChildren(s)
	}
}

type AddColumnContext struct {
	*StatementContext
	tableName IQualifiedNameContext
	column    IColumnDefinitionContext
}

func NewAddColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AddColumnContext {
	var p = new(AddColumnContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *AddColumnContext) GetTableName() IQualifiedNameContext { return s.tableName }

func (s *AddColumnContext) GetColumn() IColumnDefinitionContext { return s.column }

func (s *AddColumnContext) SetTableName(v IQualifiedNameContext) { s.tableName = v }

func (s *AddColumnContext) SetColumn(v IColumnDefinitionContext) { s.column = v }

func (s *AddColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddColumnContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALTER, 0)
}

func (s *AddColumnContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *AddColumnContext) ADD() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserADD, 0)
}

func (s *AddColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOLUMN, 0)
}

func (s *AddColumnContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *AddColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AddColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitAddColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type ResetSessionContext struct {
	*StatementContext
}

func NewResetSessionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ResetSessionContext {
	var p = new(ResetSessionContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ResetSessionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetSessionContext) RESET() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRESET, 0)
}

func (s *ResetSessionContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSESSION, 0)
}

func (s *ResetSessionContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *ResetSessionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitResetSession(s)

	default:
		return t.VisitChildren(s)
	}
}

type InsertIntoContext struct {
	*StatementContext
}

func NewInsertIntoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InsertIntoContext {
	var p = new(InsertIntoContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *InsertIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertIntoContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINSERT, 0)
}

func (s *InsertIntoContext) INTO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTO, 0)
}

func (s *InsertIntoContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *InsertIntoContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *InsertIntoContext) ColumnAliases() IColumnAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAliasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *InsertIntoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitInsertInto(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowSessionContext struct {
	*StatementContext
}

func NewShowSessionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowSessionContext {
	var p = new(ShowSessionContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowSessionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSessionContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowSessionContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSESSION, 0)
}

func (s *ShowSessionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowSession(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateSchemaContext struct {
	*StatementContext
}

func NewCreateSchemaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateSchemaContext {
	var p = new(CreateSchemaContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *CreateSchemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateSchemaContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCREATE, 0)
}

func (s *CreateSchemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSCHEMA, 0)
}

func (s *CreateSchemaContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *CreateSchemaContext) IF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIF, 0)
}

func (s *CreateSchemaContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *CreateSchemaContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXISTS, 0)
}

func (s *CreateSchemaContext) WITH() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWITH, 0)
}

func (s *CreateSchemaContext) Properties() IPropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertiesContext)
}

func (s *CreateSchemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCreateSchema(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExecuteContext struct {
	*StatementContext
}

func NewExecuteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExecuteContext {
	var p = new(ExecuteContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ExecuteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecuteContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXECUTE, 0)
}

func (s *ExecuteContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExecuteContext) USING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUSING, 0)
}

func (s *ExecuteContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExecuteContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExecuteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitExecute(s)

	default:
		return t.VisitChildren(s)
	}
}

type CallContext struct {
	*StatementContext
}

func NewCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CallContext {
	var p = new(CallContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) CALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCALL, 0)
}

func (s *CallContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *CallContext) AllCallArgument() []ICallArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallArgumentContext)(nil)).Elem())
	var tst = make([]ICallArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallArgumentContext)
		}
	}

	return tst
}

func (s *CallContext) CallArgument(i int) ICallArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallArgumentContext)
}

func (s *CallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type RenameSchemaContext struct {
	*StatementContext
}

func NewRenameSchemaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RenameSchemaContext {
	var p = new(RenameSchemaContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *RenameSchemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameSchemaContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALTER, 0)
}

func (s *RenameSchemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSCHEMA, 0)
}

func (s *RenameSchemaContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *RenameSchemaContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRENAME, 0)
}

func (s *RenameSchemaContext) TO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTO, 0)
}

func (s *RenameSchemaContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RenameSchemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRenameSchema(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowGrantsContext struct {
	*StatementContext
}

func NewShowGrantsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowGrantsContext {
	var p = new(ShowGrantsContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowGrantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGrantsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowGrantsContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGRANTS, 0)
}

func (s *ShowGrantsContext) ON() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserON, 0)
}

func (s *ShowGrantsContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *ShowGrantsContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *ShowGrantsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowGrants(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowFunctionsContext struct {
	*StatementContext
}

func NewShowFunctionsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowFunctionsContext {
	var p = new(ShowFunctionsContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowFunctionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowFunctionsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowFunctionsContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFUNCTIONS, 0)
}

func (s *ShowFunctionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowFunctions(s)

	default:
		return t.VisitChildren(s)
	}
}

type DescribeOutputContext struct {
	*StatementContext
}

func NewDescribeOutputContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DescribeOutputContext {
	var p = new(DescribeOutputContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *DescribeOutputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeOutputContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDESCRIBE, 0)
}

func (s *DescribeOutputContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOUTPUT, 0)
}

func (s *DescribeOutputContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DescribeOutputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDescribeOutput(s)

	default:
		return t.VisitChildren(s)
	}
}

type DropSchemaContext struct {
	*StatementContext
}

func NewDropSchemaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DropSchemaContext {
	var p = new(DropSchemaContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *DropSchemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropSchemaContext) DROP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDROP, 0)
}

func (s *DropSchemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSCHEMA, 0)
}

func (s *DropSchemaContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *DropSchemaContext) IF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIF, 0)
}

func (s *DropSchemaContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXISTS, 0)
}

func (s *DropSchemaContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCASCADE, 0)
}

func (s *DropSchemaContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRESTRICT, 0)
}

func (s *DropSchemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDropSchema(s)

	default:
		return t.VisitChildren(s)
	}
}

type GrantContext struct {
	*StatementContext
	grantee IIdentifierContext
}

func NewGrantContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GrantContext {
	var p = new(GrantContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *GrantContext) GetGrantee() IIdentifierContext { return s.grantee }

func (s *GrantContext) SetGrantee(v IIdentifierContext) { s.grantee = v }

func (s *GrantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(SqlBaseParserGRANT)
}

func (s *GrantContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGRANT, i)
}

func (s *GrantContext) ON() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserON, 0)
}

func (s *GrantContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *GrantContext) TO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTO, 0)
}

func (s *GrantContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *GrantContext) AllPrivilege() []IPrivilegeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivilegeContext)(nil)).Elem())
	var tst = make([]IPrivilegeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivilegeContext)
		}
	}

	return tst
}

func (s *GrantContext) Privilege(i int) IPrivilegeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeContext)
}

func (s *GrantContext) ALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALL, 0)
}

func (s *GrantContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPRIVILEGES, 0)
}

func (s *GrantContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *GrantContext) WITH() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWITH, 0)
}

func (s *GrantContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOPTION, 0)
}

func (s *GrantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitGrant(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateViewContext struct {
	*StatementContext
}

func NewShowCreateViewContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateViewContext {
	var p = new(ShowCreateViewContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ShowCreateViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateViewContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *ShowCreateViewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCREATE, 0)
}

func (s *ShowCreateViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVIEW, 0)
}

func (s *ShowCreateViewContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *ShowCreateViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitShowCreateView(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SqlBaseParserRULE_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) {
	case 1:
		localctx = NewStatementDefaultContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(128)
			p.Query()
		}

	case 2:
		localctx = NewUseContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(129)
			p.Match(SqlBaseParserUSE)
		}
		{
			p.SetState(130)

			var _x = p.Identifier()

			localctx.(*UseContext).schema = _x
		}

	case 3:
		localctx = NewUseContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(131)
			p.Match(SqlBaseParserUSE)
		}
		{
			p.SetState(132)

			var _x = p.Identifier()

			localctx.(*UseContext).catalog = _x
		}
		{
			p.SetState(133)
			p.Match(SqlBaseParserT__0)
		}
		{
			p.SetState(134)

			var _x = p.Identifier()

			localctx.(*UseContext).schema = _x
		}

	case 4:
		localctx = NewCreateSchemaContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(136)
			p.Match(SqlBaseParserCREATE)
		}
		{
			p.SetState(137)
			p.Match(SqlBaseParserSCHEMA)
		}
		p.SetState(141)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(138)
				p.Match(SqlBaseParserIF)
			}
			{
				p.SetState(139)
				p.Match(SqlBaseParserNOT)
			}
			{
				p.SetState(140)
				p.Match(SqlBaseParserEXISTS)
			}

		}
		{
			p.SetState(143)
			p.QualifiedName()
		}
		p.SetState(146)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWITH {
			{
				p.SetState(144)
				p.Match(SqlBaseParserWITH)
			}
			{
				p.SetState(145)
				p.Properties()
			}

		}

	case 5:
		localctx = NewDropSchemaContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(148)
			p.Match(SqlBaseParserDROP)
		}
		{
			p.SetState(149)
			p.Match(SqlBaseParserSCHEMA)
		}
		p.SetState(152)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(150)
				p.Match(SqlBaseParserIF)
			}
			{
				p.SetState(151)
				p.Match(SqlBaseParserEXISTS)
			}

		}
		{
			p.SetState(154)
			p.QualifiedName()
		}
		p.SetState(156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserCASCADE || _la == SqlBaseParserRESTRICT {
			{
				p.SetState(155)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlBaseParserCASCADE || _la == SqlBaseParserRESTRICT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 6:
		localctx = NewRenameSchemaContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(158)
			p.Match(SqlBaseParserALTER)
		}
		{
			p.SetState(159)
			p.Match(SqlBaseParserSCHEMA)
		}
		{
			p.SetState(160)
			p.QualifiedName()
		}
		{
			p.SetState(161)
			p.Match(SqlBaseParserRENAME)
		}
		{
			p.SetState(162)
			p.Match(SqlBaseParserTO)
		}
		{
			p.SetState(163)
			p.Identifier()
		}

	case 7:
		localctx = NewCreateTableAsSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(165)
			p.Match(SqlBaseParserCREATE)
		}
		{
			p.SetState(166)
			p.Match(SqlBaseParserTABLE)
		}
		p.SetState(170)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(167)
				p.Match(SqlBaseParserIF)
			}
			{
				p.SetState(168)
				p.Match(SqlBaseParserNOT)
			}
			{
				p.SetState(169)
				p.Match(SqlBaseParserEXISTS)
			}

		}
		{
			p.SetState(172)
			p.QualifiedName()
		}
		p.SetState(174)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserT__1 {
			{
				p.SetState(173)
				p.ColumnAliases()
			}

		}
		p.SetState(178)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserCOMMENT {
			{
				p.SetState(176)
				p.Match(SqlBaseParserCOMMENT)
			}
			{
				p.SetState(177)
				p.Sql_string()
			}

		}
		p.SetState(182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWITH {
			{
				p.SetState(180)
				p.Match(SqlBaseParserWITH)
			}
			{
				p.SetState(181)
				p.Properties()
			}

		}
		{
			p.SetState(184)
			p.Match(SqlBaseParserAS)
		}
		p.SetState(190)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(185)
				p.Query()
			}

		case 2:
			{
				p.SetState(186)
				p.Match(SqlBaseParserT__1)
			}
			{
				p.SetState(187)
				p.Query()
			}
			{
				p.SetState(188)
				p.Match(SqlBaseParserT__2)
			}

		}
		p.SetState(197)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWITH {
			{
				p.SetState(192)
				p.Match(SqlBaseParserWITH)
			}
			p.SetState(194)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SqlBaseParserNO {
				{
					p.SetState(193)
					p.Match(SqlBaseParserNO)
				}

			}
			{
				p.SetState(196)
				p.Match(SqlBaseParserDATA)
			}

		}

	case 8:
		localctx = NewCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(199)
			p.Match(SqlBaseParserCREATE)
		}
		{
			p.SetState(200)
			p.Match(SqlBaseParserTABLE)
		}
		p.SetState(204)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(201)
				p.Match(SqlBaseParserIF)
			}
			{
				p.SetState(202)
				p.Match(SqlBaseParserNOT)
			}
			{
				p.SetState(203)
				p.Match(SqlBaseParserEXISTS)
			}

		}
		{
			p.SetState(206)
			p.QualifiedName()
		}
		{
			p.SetState(207)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(208)
			p.TableElement()
		}
		p.SetState(213)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(209)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(210)
				p.TableElement()
			}

			p.SetState(215)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(216)
			p.Match(SqlBaseParserT__2)
		}
		p.SetState(219)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserCOMMENT {
			{
				p.SetState(217)
				p.Match(SqlBaseParserCOMMENT)
			}
			{
				p.SetState(218)
				p.Sql_string()
			}

		}
		p.SetState(223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWITH {
			{
				p.SetState(221)
				p.Match(SqlBaseParserWITH)
			}
			{
				p.SetState(222)
				p.Properties()
			}

		}

	case 9:
		localctx = NewDropTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(225)
			p.Match(SqlBaseParserDROP)
		}
		{
			p.SetState(226)
			p.Match(SqlBaseParserTABLE)
		}
		p.SetState(229)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(227)
				p.Match(SqlBaseParserIF)
			}
			{
				p.SetState(228)
				p.Match(SqlBaseParserEXISTS)
			}

		}
		{
			p.SetState(231)
			p.QualifiedName()
		}

	case 10:
		localctx = NewInsertIntoContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(232)
			p.Match(SqlBaseParserINSERT)
		}
		{
			p.SetState(233)
			p.Match(SqlBaseParserINTO)
		}
		{
			p.SetState(234)
			p.QualifiedName()
		}
		p.SetState(236)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(235)
				p.ColumnAliases()
			}

		}
		{
			p.SetState(238)
			p.Query()
		}

	case 11:
		localctx = NewDeleteContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(240)
			p.Match(SqlBaseParserDELETE)
		}
		{
			p.SetState(241)
			p.Match(SqlBaseParserFROM)
		}
		{
			p.SetState(242)
			p.QualifiedName()
		}
		p.SetState(245)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWHERE {
			{
				p.SetState(243)
				p.Match(SqlBaseParserWHERE)
			}
			{
				p.SetState(244)
				p.booleanExpression(0)
			}

		}

	case 12:
		localctx = NewRenameTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(247)
			p.Match(SqlBaseParserALTER)
		}
		{
			p.SetState(248)
			p.Match(SqlBaseParserTABLE)
		}
		{
			p.SetState(249)

			var _x = p.QualifiedName()

			localctx.(*RenameTableContext).from = _x
		}
		{
			p.SetState(250)
			p.Match(SqlBaseParserRENAME)
		}
		{
			p.SetState(251)
			p.Match(SqlBaseParserTO)
		}
		{
			p.SetState(252)

			var _x = p.QualifiedName()

			localctx.(*RenameTableContext).to = _x
		}

	case 13:
		localctx = NewRenameColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(254)
			p.Match(SqlBaseParserALTER)
		}
		{
			p.SetState(255)
			p.Match(SqlBaseParserTABLE)
		}
		{
			p.SetState(256)

			var _x = p.QualifiedName()

			localctx.(*RenameColumnContext).tableName = _x
		}
		{
			p.SetState(257)
			p.Match(SqlBaseParserRENAME)
		}
		{
			p.SetState(258)
			p.Match(SqlBaseParserCOLUMN)
		}
		{
			p.SetState(259)

			var _x = p.Identifier()

			localctx.(*RenameColumnContext).from = _x
		}
		{
			p.SetState(260)
			p.Match(SqlBaseParserTO)
		}
		{
			p.SetState(261)

			var _x = p.Identifier()

			localctx.(*RenameColumnContext).to = _x
		}

	case 14:
		localctx = NewDropColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(263)
			p.Match(SqlBaseParserALTER)
		}
		{
			p.SetState(264)
			p.Match(SqlBaseParserTABLE)
		}
		{
			p.SetState(265)

			var _x = p.QualifiedName()

			localctx.(*DropColumnContext).tableName = _x
		}
		{
			p.SetState(266)
			p.Match(SqlBaseParserDROP)
		}
		{
			p.SetState(267)
			p.Match(SqlBaseParserCOLUMN)
		}
		{
			p.SetState(268)

			var _x = p.QualifiedName()

			localctx.(*DropColumnContext).column = _x
		}

	case 15:
		localctx = NewAddColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(270)
			p.Match(SqlBaseParserALTER)
		}
		{
			p.SetState(271)
			p.Match(SqlBaseParserTABLE)
		}
		{
			p.SetState(272)

			var _x = p.QualifiedName()

			localctx.(*AddColumnContext).tableName = _x
		}
		{
			p.SetState(273)
			p.Match(SqlBaseParserADD)
		}
		{
			p.SetState(274)
			p.Match(SqlBaseParserCOLUMN)
		}
		{
			p.SetState(275)

			var _x = p.ColumnDefinition()

			localctx.(*AddColumnContext).column = _x
		}

	case 16:
		localctx = NewCreateViewContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(277)
			p.Match(SqlBaseParserCREATE)
		}
		p.SetState(280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserOR {
			{
				p.SetState(278)
				p.Match(SqlBaseParserOR)
			}
			{
				p.SetState(279)
				p.Match(SqlBaseParserREPLACE)
			}

		}
		{
			p.SetState(282)
			p.Match(SqlBaseParserVIEW)
		}
		{
			p.SetState(283)
			p.QualifiedName()
		}
		{
			p.SetState(284)
			p.Match(SqlBaseParserAS)
		}
		{
			p.SetState(285)
			p.Query()
		}

	case 17:
		localctx = NewDropViewContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(287)
			p.Match(SqlBaseParserDROP)
		}
		{
			p.SetState(288)
			p.Match(SqlBaseParserVIEW)
		}
		p.SetState(291)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(289)
				p.Match(SqlBaseParserIF)
			}
			{
				p.SetState(290)
				p.Match(SqlBaseParserEXISTS)
			}

		}
		{
			p.SetState(293)
			p.QualifiedName()
		}

	case 18:
		localctx = NewCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(294)
			p.Match(SqlBaseParserCALL)
		}
		{
			p.SetState(295)
			p.QualifiedName()
		}
		{
			p.SetState(296)
			p.Match(SqlBaseParserT__1)
		}
		p.SetState(305)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserT__1)|(1<<SqlBaseParserT__4)|(1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCASE)|(1<<SqlBaseParserCAST)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserCURRENT_DATE-32))|(1<<(SqlBaseParserCURRENT_TIME-32))|(1<<(SqlBaseParserCURRENT_TIMESTAMP-32))|(1<<(SqlBaseParserCURRENT_USER-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXISTS-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserEXTRACT-32))|(1<<(SqlBaseParserFALSE-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserGROUPING-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOCALTIME-96))|(1<<(SqlBaseParserLOCALTIMESTAMP-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNORMALIZE-96))|(1<<(SqlBaseParserNOT-96))|(1<<(SqlBaseParserNULL-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRUE-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SqlBaseParserPLUS-197))|(1<<(SqlBaseParserMINUS-197))|(1<<(SqlBaseParserSTRING-197))|(1<<(SqlBaseParserUNICODE_STRING-197))|(1<<(SqlBaseParserBINARY_LITERAL-197))|(1<<(SqlBaseParserINTEGER_VALUE-197))|(1<<(SqlBaseParserDECIMAL_VALUE-197))|(1<<(SqlBaseParserDOUBLE_VALUE-197))|(1<<(SqlBaseParserIDENTIFIER-197))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-197))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-197))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-197))|(1<<(SqlBaseParserDOUBLE_PRECISION-197)))) != 0) {
			{
				p.SetState(297)
				p.CallArgument()
			}
			p.SetState(302)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(298)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(299)
					p.CallArgument()
				}

				p.SetState(304)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(307)
			p.Match(SqlBaseParserT__2)
		}

	case 19:
		localctx = NewGrantContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(309)
			p.Match(SqlBaseParserGRANT)
		}
		p.SetState(320)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(310)
				p.Privilege()
			}
			p.SetState(315)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(311)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(312)
					p.Privilege()
				}

				p.SetState(317)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(318)
				p.Match(SqlBaseParserALL)
			}
			{
				p.SetState(319)
				p.Match(SqlBaseParserPRIVILEGES)
			}

		}
		{
			p.SetState(322)
			p.Match(SqlBaseParserON)
		}
		p.SetState(324)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserTABLE {
			{
				p.SetState(323)
				p.Match(SqlBaseParserTABLE)
			}

		}
		{
			p.SetState(326)
			p.QualifiedName()
		}
		{
			p.SetState(327)
			p.Match(SqlBaseParserTO)
		}
		{
			p.SetState(328)

			var _x = p.Identifier()

			localctx.(*GrantContext).grantee = _x
		}
		p.SetState(332)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWITH {
			{
				p.SetState(329)
				p.Match(SqlBaseParserWITH)
			}
			{
				p.SetState(330)
				p.Match(SqlBaseParserGRANT)
			}
			{
				p.SetState(331)
				p.Match(SqlBaseParserOPTION)
			}

		}

	case 20:
		localctx = NewRevokeContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(334)
			p.Match(SqlBaseParserREVOKE)
		}
		p.SetState(338)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(335)
				p.Match(SqlBaseParserGRANT)
			}
			{
				p.SetState(336)
				p.Match(SqlBaseParserOPTION)
			}
			{
				p.SetState(337)
				p.Match(SqlBaseParserFOR)
			}

		}
		p.SetState(350)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(340)
				p.Privilege()
			}
			p.SetState(345)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(341)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(342)
					p.Privilege()
				}

				p.SetState(347)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(348)
				p.Match(SqlBaseParserALL)
			}
			{
				p.SetState(349)
				p.Match(SqlBaseParserPRIVILEGES)
			}

		}
		{
			p.SetState(352)
			p.Match(SqlBaseParserON)
		}
		p.SetState(354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserTABLE {
			{
				p.SetState(353)
				p.Match(SqlBaseParserTABLE)
			}

		}
		{
			p.SetState(356)
			p.QualifiedName()
		}
		{
			p.SetState(357)
			p.Match(SqlBaseParserFROM)
		}
		{
			p.SetState(358)

			var _x = p.Identifier()

			localctx.(*RevokeContext).grantee = _x
		}

	case 21:
		localctx = NewShowGrantsContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(360)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(361)
			p.Match(SqlBaseParserGRANTS)
		}
		p.SetState(367)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserON {
			{
				p.SetState(362)
				p.Match(SqlBaseParserON)
			}
			p.SetState(364)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SqlBaseParserTABLE {
				{
					p.SetState(363)
					p.Match(SqlBaseParserTABLE)
				}

			}
			{
				p.SetState(366)
				p.QualifiedName()
			}

		}

	case 22:
		localctx = NewExplainContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(369)
			p.Match(SqlBaseParserEXPLAIN)
		}
		p.SetState(371)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserANALYZE {
			{
				p.SetState(370)
				p.Match(SqlBaseParserANALYZE)
			}

		}
		p.SetState(374)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserVERBOSE {
			{
				p.SetState(373)
				p.Match(SqlBaseParserVERBOSE)
			}

		}
		p.SetState(387)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(376)
				p.Match(SqlBaseParserT__1)
			}
			{
				p.SetState(377)
				p.ExplainOption()
			}
			p.SetState(382)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(378)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(379)
					p.ExplainOption()
				}

				p.SetState(384)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(385)
				p.Match(SqlBaseParserT__2)
			}

		}
		{
			p.SetState(389)
			p.Statement()
		}

	case 23:
		localctx = NewShowCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(390)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(391)
			p.Match(SqlBaseParserCREATE)
		}
		{
			p.SetState(392)
			p.Match(SqlBaseParserTABLE)
		}
		{
			p.SetState(393)
			p.QualifiedName()
		}

	case 24:
		localctx = NewShowCreateViewContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(394)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(395)
			p.Match(SqlBaseParserCREATE)
		}
		{
			p.SetState(396)
			p.Match(SqlBaseParserVIEW)
		}
		{
			p.SetState(397)
			p.QualifiedName()
		}

	case 25:
		localctx = NewShowTablesContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(398)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(399)
			p.Match(SqlBaseParserTABLES)
		}
		p.SetState(402)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserFROM || _la == SqlBaseParserIN {
			{
				p.SetState(400)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlBaseParserFROM || _la == SqlBaseParserIN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(401)
				p.QualifiedName()
			}

		}
		p.SetState(410)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserLIKE {
			{
				p.SetState(404)
				p.Match(SqlBaseParserLIKE)
			}
			{
				p.SetState(405)

				var _x = p.Sql_string()

				localctx.(*ShowTablesContext).pattern = _x
			}
			p.SetState(408)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SqlBaseParserESCAPE {
				{
					p.SetState(406)
					p.Match(SqlBaseParserESCAPE)
				}
				{
					p.SetState(407)

					var _x = p.Sql_string()

					localctx.(*ShowTablesContext).escape = _x
				}

			}

		}

	case 26:
		localctx = NewShowSchemasContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(412)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(413)
			p.Match(SqlBaseParserSCHEMAS)
		}
		p.SetState(416)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserFROM || _la == SqlBaseParserIN {
			{
				p.SetState(414)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlBaseParserFROM || _la == SqlBaseParserIN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(415)
				p.Identifier()
			}

		}
		p.SetState(424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserLIKE {
			{
				p.SetState(418)
				p.Match(SqlBaseParserLIKE)
			}
			{
				p.SetState(419)

				var _x = p.Sql_string()

				localctx.(*ShowSchemasContext).pattern = _x
			}
			p.SetState(422)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SqlBaseParserESCAPE {
				{
					p.SetState(420)
					p.Match(SqlBaseParserESCAPE)
				}
				{
					p.SetState(421)

					var _x = p.Sql_string()

					localctx.(*ShowSchemasContext).escape = _x
				}

			}

		}

	case 27:
		localctx = NewShowCatalogsContext(p, localctx)
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(426)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(427)
			p.Match(SqlBaseParserCATALOGS)
		}
		p.SetState(430)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserLIKE {
			{
				p.SetState(428)
				p.Match(SqlBaseParserLIKE)
			}
			{
				p.SetState(429)

				var _x = p.Sql_string()

				localctx.(*ShowCatalogsContext).pattern = _x
			}

		}

	case 28:
		localctx = NewShowColumnsContext(p, localctx)
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(432)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(433)
			p.Match(SqlBaseParserCOLUMNS)
		}
		{
			p.SetState(434)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserFROM || _la == SqlBaseParserIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(435)
			p.QualifiedName()
		}

	case 29:
		localctx = NewShowStatsContext(p, localctx)
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(436)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(437)
			p.Match(SqlBaseParserSTATS)
		}
		{
			p.SetState(438)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserFOR || _la == SqlBaseParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(439)
			p.QualifiedName()
		}

	case 30:
		localctx = NewShowStatsForQueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(440)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(441)
			p.Match(SqlBaseParserSTATS)
		}
		{
			p.SetState(442)
			p.Match(SqlBaseParserFOR)
		}
		{
			p.SetState(443)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(444)
			p.QuerySpecification()
		}
		{
			p.SetState(445)
			p.Match(SqlBaseParserT__2)
		}

	case 31:
		localctx = NewShowColumnsContext(p, localctx)
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(447)
			p.Match(SqlBaseParserDESCRIBE)
		}
		{
			p.SetState(448)
			p.QualifiedName()
		}

	case 32:
		localctx = NewShowColumnsContext(p, localctx)
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(449)
			p.Match(SqlBaseParserDESC)
		}
		{
			p.SetState(450)
			p.QualifiedName()
		}

	case 33:
		localctx = NewShowFunctionsContext(p, localctx)
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(451)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(452)
			p.Match(SqlBaseParserFUNCTIONS)
		}

	case 34:
		localctx = NewShowSessionContext(p, localctx)
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(453)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(454)
			p.Match(SqlBaseParserSESSION)
		}

	case 35:
		localctx = NewSetSessionContext(p, localctx)
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(455)
			p.Match(SqlBaseParserSET)
		}
		{
			p.SetState(456)
			p.Match(SqlBaseParserSESSION)
		}
		{
			p.SetState(457)
			p.QualifiedName()
		}
		{
			p.SetState(458)
			p.Match(SqlBaseParserEQ)
		}
		{
			p.SetState(459)
			p.Expression()
		}

	case 36:
		localctx = NewResetSessionContext(p, localctx)
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(461)
			p.Match(SqlBaseParserRESET)
		}
		{
			p.SetState(462)
			p.Match(SqlBaseParserSESSION)
		}
		{
			p.SetState(463)
			p.QualifiedName()
		}

	case 37:
		localctx = NewStartTransactionContext(p, localctx)
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(464)
			p.Match(SqlBaseParserSTART)
		}
		{
			p.SetState(465)
			p.Match(SqlBaseParserTRANSACTION)
		}
		p.SetState(474)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserISOLATION || _la == SqlBaseParserREAD {
			{
				p.SetState(466)
				p.TransactionMode()
			}
			p.SetState(471)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(467)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(468)
					p.TransactionMode()
				}

				p.SetState(473)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	case 38:
		localctx = NewCommitContext(p, localctx)
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(476)
			p.Match(SqlBaseParserCOMMIT)
		}
		p.SetState(478)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWORK {
			{
				p.SetState(477)
				p.Match(SqlBaseParserWORK)
			}

		}

	case 39:
		localctx = NewRollbackContext(p, localctx)
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(480)
			p.Match(SqlBaseParserROLLBACK)
		}
		p.SetState(482)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWORK {
			{
				p.SetState(481)
				p.Match(SqlBaseParserWORK)
			}

		}

	case 40:
		localctx = NewShowPartitionsContext(p, localctx)
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(484)
			p.Match(SqlBaseParserSHOW)
		}
		{
			p.SetState(485)
			p.Match(SqlBaseParserPARTITIONS)
		}
		{
			p.SetState(486)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserFROM || _la == SqlBaseParserIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(487)
			p.QualifiedName()
		}
		p.SetState(490)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserWHERE {
			{
				p.SetState(488)
				p.Match(SqlBaseParserWHERE)
			}
			{
				p.SetState(489)
				p.booleanExpression(0)
			}

		}
		p.SetState(502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserORDER {
			{
				p.SetState(492)
				p.Match(SqlBaseParserORDER)
			}
			{
				p.SetState(493)
				p.Match(SqlBaseParserBY)
			}
			{
				p.SetState(494)
				p.SortItem()
			}
			p.SetState(499)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(495)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(496)
					p.SortItem()
				}

				p.SetState(501)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(506)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserLIMIT {
			{
				p.SetState(504)
				p.Match(SqlBaseParserLIMIT)
			}
			{
				p.SetState(505)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowPartitionsContext).limit = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlBaseParserALL || _la == SqlBaseParserINTEGER_VALUE) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowPartitionsContext).limit = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 41:
		localctx = NewPrepareContext(p, localctx)
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(508)
			p.Match(SqlBaseParserPREPARE)
		}
		{
			p.SetState(509)
			p.Identifier()
		}
		{
			p.SetState(510)
			p.Match(SqlBaseParserFROM)
		}
		{
			p.SetState(511)
			p.Statement()
		}

	case 42:
		localctx = NewDeallocateContext(p, localctx)
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(513)
			p.Match(SqlBaseParserDEALLOCATE)
		}
		{
			p.SetState(514)
			p.Match(SqlBaseParserPREPARE)
		}
		{
			p.SetState(515)
			p.Identifier()
		}

	case 43:
		localctx = NewExecuteContext(p, localctx)
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(516)
			p.Match(SqlBaseParserEXECUTE)
		}
		{
			p.SetState(517)
			p.Identifier()
		}
		p.SetState(527)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserUSING {
			{
				p.SetState(518)
				p.Match(SqlBaseParserUSING)
			}
			{
				p.SetState(519)
				p.Expression()
			}
			p.SetState(524)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(520)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(521)
					p.Expression()
				}

				p.SetState(526)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	case 44:
		localctx = NewDescribeInputContext(p, localctx)
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(529)
			p.Match(SqlBaseParserDESCRIBE)
		}
		{
			p.SetState(530)
			p.Match(SqlBaseParserINPUT)
		}
		{
			p.SetState(531)
			p.Identifier()
		}

	case 45:
		localctx = NewDescribeOutputContext(p, localctx)
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(532)
			p.Match(SqlBaseParserDESCRIBE)
		}
		{
			p.SetState(533)
			p.Match(SqlBaseParserOUTPUT)
		}
		{
			p.SetState(534)
			p.Identifier()
		}

	}

	return localctx
}

// IQueryContext is an interface to support dynamic dispatch.
type IQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryContext differentiates from other interfaces.
	IsQueryContext()
}

type QueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryContext() *QueryContext {
	var p = new(QueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_query
	return p
}

func (*QueryContext) IsQueryContext() {}

func NewQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryContext {
	var p = new(QueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_query

	return p
}

func (s *QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryContext) QueryNoWith() IQueryNoWithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryNoWithContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryNoWithContext)
}

func (s *QueryContext) With() IWithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithContext)
}

func (s *QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Query() (localctx IQueryContext) {
	localctx = NewQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SqlBaseParserRULE_query)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(538)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserWITH {
		{
			p.SetState(537)
			p.With()
		}

	}
	{
		p.SetState(540)
		p.QueryNoWith()
	}

	return localctx
}

// IWithContext is an interface to support dynamic dispatch.
type IWithContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithContext differentiates from other interfaces.
	IsWithContext()
}

type WithContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithContext() *WithContext {
	var p = new(WithContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_with
	return p
}

func (*WithContext) IsWithContext() {}

func NewWithContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithContext {
	var p = new(WithContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_with

	return p
}

func (s *WithContext) GetParser() antlr.Parser { return s.parser }

func (s *WithContext) WITH() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWITH, 0)
}

func (s *WithContext) AllNamedQuery() []INamedQueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamedQueryContext)(nil)).Elem())
	var tst = make([]INamedQueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamedQueryContext)
		}
	}

	return tst
}

func (s *WithContext) NamedQuery(i int) INamedQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamedQueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamedQueryContext)
}

func (s *WithContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRECURSIVE, 0)
}

func (s *WithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitWith(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) With() (localctx IWithContext) {
	localctx = NewWithContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SqlBaseParserRULE_with)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(542)
		p.Match(SqlBaseParserWITH)
	}
	p.SetState(544)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserRECURSIVE {
		{
			p.SetState(543)
			p.Match(SqlBaseParserRECURSIVE)
		}

	}
	{
		p.SetState(546)
		p.NamedQuery()
	}
	p.SetState(551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SqlBaseParserT__3 {
		{
			p.SetState(547)
			p.Match(SqlBaseParserT__3)
		}
		{
			p.SetState(548)
			p.NamedQuery()
		}

		p.SetState(553)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITableElementContext is an interface to support dynamic dispatch.
type ITableElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableElementContext differentiates from other interfaces.
	IsTableElementContext()
}

type TableElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableElementContext() *TableElementContext {
	var p = new(TableElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_tableElement
	return p
}

func (*TableElementContext) IsTableElementContext() {}

func NewTableElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableElementContext {
	var p = new(TableElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_tableElement

	return p
}

func (s *TableElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TableElementContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *TableElementContext) LikeClause() ILikeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILikeClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILikeClauseContext)
}

func (s *TableElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitTableElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) TableElement() (localctx ITableElementContext) {
	localctx = NewTableElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SqlBaseParserRULE_tableElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(556)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserADD, SqlBaseParserALL, SqlBaseParserANALYZE, SqlBaseParserANY, SqlBaseParserARRAY, SqlBaseParserASC, SqlBaseParserAT, SqlBaseParserBERNOULLI, SqlBaseParserCALL, SqlBaseParserCASCADE, SqlBaseParserCATALOGS, SqlBaseParserCOALESCE, SqlBaseParserCOLUMN, SqlBaseParserCOLUMNS, SqlBaseParserCOMMENT, SqlBaseParserCOMMIT, SqlBaseParserCOMMITTED, SqlBaseParserCURRENT, SqlBaseParserDATA, SqlBaseParserDATE, SqlBaseParserDAY, SqlBaseParserDESC, SqlBaseParserDISTRIBUTED, SqlBaseParserEXCLUDING, SqlBaseParserEXPLAIN, SqlBaseParserFILTER, SqlBaseParserFIRST, SqlBaseParserFOLLOWING, SqlBaseParserFORMAT, SqlBaseParserFUNCTIONS, SqlBaseParserGRANT, SqlBaseParserGRANTS, SqlBaseParserGRAPHVIZ, SqlBaseParserHOUR, SqlBaseParserIF, SqlBaseParserINCLUDING, SqlBaseParserINPUT, SqlBaseParserINTEGER, SqlBaseParserINTERVAL, SqlBaseParserISOLATION, SqlBaseParserLAST, SqlBaseParserLATERAL, SqlBaseParserLEVEL, SqlBaseParserLIMIT, SqlBaseParserLOGICAL, SqlBaseParserMAP, SqlBaseParserMINUTE, SqlBaseParserMONTH, SqlBaseParserNFC, SqlBaseParserNFD, SqlBaseParserNFKC, SqlBaseParserNFKD, SqlBaseParserNO, SqlBaseParserNULLIF, SqlBaseParserNULLS, SqlBaseParserONLY, SqlBaseParserOPTION, SqlBaseParserORDINALITY, SqlBaseParserOUTPUT, SqlBaseParserOVER, SqlBaseParserPARTITION, SqlBaseParserPARTITIONS, SqlBaseParserPOSITION, SqlBaseParserPRECEDING, SqlBaseParserPRIVILEGES, SqlBaseParserPROPERTIES, SqlBaseParserPUBLIC, SqlBaseParserRANGE, SqlBaseParserREAD, SqlBaseParserRENAME, SqlBaseParserREPEATABLE, SqlBaseParserREPLACE, SqlBaseParserRESET, SqlBaseParserRESTRICT, SqlBaseParserREVOKE, SqlBaseParserROLLBACK, SqlBaseParserROW, SqlBaseParserROWS, SqlBaseParserSCHEMA, SqlBaseParserSCHEMAS, SqlBaseParserSECOND, SqlBaseParserSERIALIZABLE, SqlBaseParserSESSION, SqlBaseParserSET, SqlBaseParserSETS, SqlBaseParserSHOW, SqlBaseParserSMALLINT, SqlBaseParserSOME, SqlBaseParserSTART, SqlBaseParserSTATS, SqlBaseParserSUBSTRING, SqlBaseParserSYSTEM, SqlBaseParserTABLES, SqlBaseParserTABLESAMPLE, SqlBaseParserTEXT, SqlBaseParserTIME, SqlBaseParserTIMESTAMP, SqlBaseParserTINYINT, SqlBaseParserTO, SqlBaseParserTRANSACTION, SqlBaseParserTRY_CAST, SqlBaseParserTYPE, SqlBaseParserUNBOUNDED, SqlBaseParserUNCOMMITTED, SqlBaseParserUSE, SqlBaseParserVALIDATE, SqlBaseParserVERBOSE, SqlBaseParserVIEW, SqlBaseParserWORK, SqlBaseParserWRITE, SqlBaseParserYEAR, SqlBaseParserZONE, SqlBaseParserIDENTIFIER, SqlBaseParserDIGIT_IDENTIFIER, SqlBaseParserQUOTED_IDENTIFIER, SqlBaseParserBACKQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(554)
			p.ColumnDefinition()
		}

	case SqlBaseParserLIKE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(555)
			p.LikeClause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumnDefinitionContext is an interface to support dynamic dispatch.
type IColumnDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnDefinitionContext differentiates from other interfaces.
	IsColumnDefinitionContext()
}

type ColumnDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnDefinitionContext() *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_columnDefinition
	return p
}

func (*ColumnDefinitionContext) IsColumnDefinitionContext() {}

func NewColumnDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_columnDefinition

	return p
}

func (s *ColumnDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnDefinitionContext) Sqltype() ISqltypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqltypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqltypeContext)
}

func (s *ColumnDefinitionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOMMENT, 0)
}

func (s *ColumnDefinitionContext) Sql_string() ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *ColumnDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitColumnDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) ColumnDefinition() (localctx IColumnDefinitionContext) {
	localctx = NewColumnDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SqlBaseParserRULE_columnDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(558)
		p.Identifier()
	}
	{
		p.SetState(559)
		p.sqltype(0)
	}
	p.SetState(562)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserCOMMENT {
		{
			p.SetState(560)
			p.Match(SqlBaseParserCOMMENT)
		}
		{
			p.SetState(561)
			p.Sql_string()
		}

	}

	return localctx
}

// ILikeClauseContext is an interface to support dynamic dispatch.
type ILikeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOptionType returns the optionType token.
	GetOptionType() antlr.Token

	// SetOptionType sets the optionType token.
	SetOptionType(antlr.Token)

	// IsLikeClauseContext differentiates from other interfaces.
	IsLikeClauseContext()
}

type LikeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	optionType antlr.Token
}

func NewEmptyLikeClauseContext() *LikeClauseContext {
	var p = new(LikeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_likeClause
	return p
}

func (*LikeClauseContext) IsLikeClauseContext() {}

func NewLikeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LikeClauseContext {
	var p = new(LikeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_likeClause

	return p
}

func (s *LikeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LikeClauseContext) GetOptionType() antlr.Token { return s.optionType }

func (s *LikeClauseContext) SetOptionType(v antlr.Token) { s.optionType = v }

func (s *LikeClauseContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLIKE, 0)
}

func (s *LikeClauseContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *LikeClauseContext) PROPERTIES() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPROPERTIES, 0)
}

func (s *LikeClauseContext) INCLUDING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINCLUDING, 0)
}

func (s *LikeClauseContext) EXCLUDING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXCLUDING, 0)
}

func (s *LikeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LikeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LikeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitLikeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) LikeClause() (localctx ILikeClauseContext) {
	localctx = NewLikeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SqlBaseParserRULE_likeClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(564)
		p.Match(SqlBaseParserLIKE)
	}
	{
		p.SetState(565)
		p.QualifiedName()
	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserEXCLUDING || _la == SqlBaseParserINCLUDING {
		{
			p.SetState(566)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LikeClauseContext).optionType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserEXCLUDING || _la == SqlBaseParserINCLUDING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LikeClauseContext).optionType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(567)
			p.Match(SqlBaseParserPROPERTIES)
		}

	}

	return localctx
}

// IPropertiesContext is an interface to support dynamic dispatch.
type IPropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertiesContext differentiates from other interfaces.
	IsPropertiesContext()
}

type PropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertiesContext() *PropertiesContext {
	var p = new(PropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_properties
	return p
}

func (*PropertiesContext) IsPropertiesContext() {}

func NewPropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertiesContext {
	var p = new(PropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_properties

	return p
}

func (s *PropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertiesContext) AllProperty() []IPropertyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropertyContext)(nil)).Elem())
	var tst = make([]IPropertyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropertyContext)
		}
	}

	return tst
}

func (s *PropertiesContext) Property(i int) IPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropertyContext)
}

func (s *PropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitProperties(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Properties() (localctx IPropertiesContext) {
	localctx = NewPropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SqlBaseParserRULE_properties)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(570)
		p.Match(SqlBaseParserT__1)
	}
	{
		p.SetState(571)
		p.Property()
	}
	p.SetState(576)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SqlBaseParserT__3 {
		{
			p.SetState(572)
			p.Match(SqlBaseParserT__3)
		}
		{
			p.SetState(573)
			p.Property()
		}

		p.SetState(578)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(579)
		p.Match(SqlBaseParserT__2)
	}

	return localctx
}

// IPropertyContext is an interface to support dynamic dispatch.
type IPropertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyContext differentiates from other interfaces.
	IsPropertyContext()
}

type PropertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyContext() *PropertyContext {
	var p = new(PropertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_property
	return p
}

func (*PropertyContext) IsPropertyContext() {}

func NewPropertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyContext {
	var p = new(PropertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_property

	return p
}

func (s *PropertyContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PropertyContext) EQ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEQ, 0)
}

func (s *PropertyContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitProperty(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Property() (localctx IPropertyContext) {
	localctx = NewPropertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SqlBaseParserRULE_property)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(581)
		p.Identifier()
	}
	{
		p.SetState(582)
		p.Match(SqlBaseParserEQ)
	}
	{
		p.SetState(583)
		p.Expression()
	}

	return localctx
}

// IQueryNoWithContext is an interface to support dynamic dispatch.
type IQueryNoWithContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLimit returns the limit token.
	GetLimit() antlr.Token

	// SetLimit sets the limit token.
	SetLimit(antlr.Token)

	// IsQueryNoWithContext differentiates from other interfaces.
	IsQueryNoWithContext()
}

type QueryNoWithContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	limit  antlr.Token
}

func NewEmptyQueryNoWithContext() *QueryNoWithContext {
	var p = new(QueryNoWithContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_queryNoWith
	return p
}

func (*QueryNoWithContext) IsQueryNoWithContext() {}

func NewQueryNoWithContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryNoWithContext {
	var p = new(QueryNoWithContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_queryNoWith

	return p
}

func (s *QueryNoWithContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryNoWithContext) GetLimit() antlr.Token { return s.limit }

func (s *QueryNoWithContext) SetLimit(v antlr.Token) { s.limit = v }

func (s *QueryNoWithContext) QueryTerm() IQueryTermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryTermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryTermContext)
}

func (s *QueryNoWithContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserORDER, 0)
}

func (s *QueryNoWithContext) BY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBY, 0)
}

func (s *QueryNoWithContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *QueryNoWithContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *QueryNoWithContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLIMIT, 0)
}

func (s *QueryNoWithContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTEGER_VALUE, 0)
}

func (s *QueryNoWithContext) ALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALL, 0)
}

func (s *QueryNoWithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryNoWithContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryNoWithContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitQueryNoWith(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) QueryNoWith() (localctx IQueryNoWithContext) {
	localctx = NewQueryNoWithContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SqlBaseParserRULE_queryNoWith)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(585)
		p.queryTerm(0)
	}
	p.SetState(596)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserORDER {
		{
			p.SetState(586)
			p.Match(SqlBaseParserORDER)
		}
		{
			p.SetState(587)
			p.Match(SqlBaseParserBY)
		}
		{
			p.SetState(588)
			p.SortItem()
		}
		p.SetState(593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(589)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(590)
				p.SortItem()
			}

			p.SetState(595)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(600)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserLIMIT {
		{
			p.SetState(598)
			p.Match(SqlBaseParserLIMIT)
		}
		{
			p.SetState(599)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*QueryNoWithContext).limit = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserALL || _la == SqlBaseParserINTEGER_VALUE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*QueryNoWithContext).limit = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IQueryTermContext is an interface to support dynamic dispatch.
type IQueryTermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryTermContext differentiates from other interfaces.
	IsQueryTermContext()
}

type QueryTermContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryTermContext() *QueryTermContext {
	var p = new(QueryTermContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_queryTerm
	return p
}

func (*QueryTermContext) IsQueryTermContext() {}

func NewQueryTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryTermContext {
	var p = new(QueryTermContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_queryTerm

	return p
}

func (s *QueryTermContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryTermContext) CopyFrom(ctx *QueryTermContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *QueryTermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryTermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type QueryTermDefaultContext struct {
	*QueryTermContext
}

func NewQueryTermDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryTermDefaultContext {
	var p = new(QueryTermDefaultContext)

	p.QueryTermContext = NewEmptyQueryTermContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryTermContext))

	return p
}

func (s *QueryTermDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryTermDefaultContext) QueryPrimary() IQueryPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryPrimaryContext)
}

func (s *QueryTermDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitQueryTermDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetOperationContext struct {
	*QueryTermContext
	left     IQueryTermContext
	operator antlr.Token
	right    IQueryTermContext
}

func NewSetOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetOperationContext {
	var p = new(SetOperationContext)

	p.QueryTermContext = NewEmptyQueryTermContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryTermContext))

	return p
}

func (s *SetOperationContext) GetOperator() antlr.Token { return s.operator }

func (s *SetOperationContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *SetOperationContext) GetLeft() IQueryTermContext { return s.left }

func (s *SetOperationContext) GetRight() IQueryTermContext { return s.right }

func (s *SetOperationContext) SetLeft(v IQueryTermContext) { s.left = v }

func (s *SetOperationContext) SetRight(v IQueryTermContext) { s.right = v }

func (s *SetOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetOperationContext) AllQueryTerm() []IQueryTermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQueryTermContext)(nil)).Elem())
	var tst = make([]IQueryTermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQueryTermContext)
		}
	}

	return tst
}

func (s *SetOperationContext) QueryTerm(i int) IQueryTermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryTermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQueryTermContext)
}

func (s *SetOperationContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTERSECT, 0)
}

func (s *SetOperationContext) SetQuantifier() ISetQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierContext)
}

func (s *SetOperationContext) UNION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUNION, 0)
}

func (s *SetOperationContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXCEPT, 0)
}

func (s *SetOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSetOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) QueryTerm() (localctx IQueryTermContext) {
	return p.queryTerm(0)
}

func (p *SqlBaseParser) queryTerm(_p int) (localctx IQueryTermContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewQueryTermContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IQueryTermContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 22
	p.EnterRecursionRule(localctx, 22, SqlBaseParserRULE_queryTerm, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewQueryTermDefaultContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(603)
		p.QueryPrimary()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(619)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(617)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSetOperationContext(p, NewQueryTermContext(p, _parentctx, _parentState))
				localctx.(*SetOperationContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_queryTerm)
				p.SetState(605)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(606)

					var _m = p.Match(SqlBaseParserINTERSECT)

					localctx.(*SetOperationContext).operator = _m
				}
				p.SetState(608)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SqlBaseParserALL || _la == SqlBaseParserDISTINCT {
					{
						p.SetState(607)
						p.SetQuantifier()
					}

				}
				{
					p.SetState(610)

					var _x = p.queryTerm(3)

					localctx.(*SetOperationContext).right = _x
				}

			case 2:
				localctx = NewSetOperationContext(p, NewQueryTermContext(p, _parentctx, _parentState))
				localctx.(*SetOperationContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_queryTerm)
				p.SetState(611)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(612)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*SetOperationContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == SqlBaseParserEXCEPT || _la == SqlBaseParserUNION) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*SetOperationContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				p.SetState(614)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SqlBaseParserALL || _la == SqlBaseParserDISTINCT {
					{
						p.SetState(613)
						p.SetQuantifier()
					}

				}
				{
					p.SetState(616)

					var _x = p.queryTerm(2)

					localctx.(*SetOperationContext).right = _x
				}

			}

		}
		p.SetState(621)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())
	}

	return localctx
}

// IQueryPrimaryContext is an interface to support dynamic dispatch.
type IQueryPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryPrimaryContext differentiates from other interfaces.
	IsQueryPrimaryContext()
}

type QueryPrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryPrimaryContext() *QueryPrimaryContext {
	var p = new(QueryPrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_queryPrimary
	return p
}

func (*QueryPrimaryContext) IsQueryPrimaryContext() {}

func NewQueryPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryPrimaryContext {
	var p = new(QueryPrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_queryPrimary

	return p
}

func (s *QueryPrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryPrimaryContext) CopyFrom(ctx *QueryPrimaryContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *QueryPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryPrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubqueryContext struct {
	*QueryPrimaryContext
}

func NewSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryContext {
	var p = new(SubqueryContext)

	p.QueryPrimaryContext = NewEmptyQueryPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryPrimaryContext))

	return p
}

func (s *SubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryContext) QueryNoWith() IQueryNoWithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryNoWithContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryNoWithContext)
}

func (s *SubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

type QueryPrimaryDefaultContext struct {
	*QueryPrimaryContext
}

func NewQueryPrimaryDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryPrimaryDefaultContext {
	var p = new(QueryPrimaryDefaultContext)

	p.QueryPrimaryContext = NewEmptyQueryPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryPrimaryContext))

	return p
}

func (s *QueryPrimaryDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryPrimaryDefaultContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *QueryPrimaryDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitQueryPrimaryDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableContext struct {
	*QueryPrimaryContext
}

func NewTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableContext {
	var p = new(TableContext)

	p.QueryPrimaryContext = NewEmptyQueryPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryPrimaryContext))

	return p
}

func (s *TableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLE, 0)
}

func (s *TableContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *TableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type InlineTableContext struct {
	*QueryPrimaryContext
}

func NewInlineTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InlineTableContext {
	var p = new(InlineTableContext)

	p.QueryPrimaryContext = NewEmptyQueryPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryPrimaryContext))

	return p
}

func (s *InlineTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineTableContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVALUES, 0)
}

func (s *InlineTableContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InlineTableContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InlineTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitInlineTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) QueryPrimary() (localctx IQueryPrimaryContext) {
	localctx = NewQueryPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SqlBaseParserRULE_queryPrimary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(638)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserSELECT:
		localctx = NewQueryPrimaryDefaultContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(622)
			p.QuerySpecification()
		}

	case SqlBaseParserTABLE:
		localctx = NewTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(623)
			p.Match(SqlBaseParserTABLE)
		}
		{
			p.SetState(624)
			p.QualifiedName()
		}

	case SqlBaseParserVALUES:
		localctx = NewInlineTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(625)
			p.Match(SqlBaseParserVALUES)
		}
		{
			p.SetState(626)
			p.Expression()
		}
		p.SetState(631)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(627)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(628)
					p.Expression()
				}

			}
			p.SetState(633)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())
		}

	case SqlBaseParserT__1:
		localctx = NewSubqueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(634)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(635)
			p.QueryNoWith()
		}
		{
			p.SetState(636)
			p.Match(SqlBaseParserT__2)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISortItemContext is an interface to support dynamic dispatch.
type ISortItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrdering returns the ordering token.
	GetOrdering() antlr.Token

	// GetNullOrdering returns the nullOrdering token.
	GetNullOrdering() antlr.Token

	// SetOrdering sets the ordering token.
	SetOrdering(antlr.Token)

	// SetNullOrdering sets the nullOrdering token.
	SetNullOrdering(antlr.Token)

	// IsSortItemContext differentiates from other interfaces.
	IsSortItemContext()
}

type SortItemContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	ordering     antlr.Token
	nullOrdering antlr.Token
}

func NewEmptySortItemContext() *SortItemContext {
	var p = new(SortItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_sortItem
	return p
}

func (*SortItemContext) IsSortItemContext() {}

func NewSortItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SortItemContext {
	var p = new(SortItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_sortItem

	return p
}

func (s *SortItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SortItemContext) GetOrdering() antlr.Token { return s.ordering }

func (s *SortItemContext) GetNullOrdering() antlr.Token { return s.nullOrdering }

func (s *SortItemContext) SetOrdering(v antlr.Token) { s.ordering = v }

func (s *SortItemContext) SetNullOrdering(v antlr.Token) { s.nullOrdering = v }

func (s *SortItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SortItemContext) NULLS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNULLS, 0)
}

func (s *SortItemContext) ASC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserASC, 0)
}

func (s *SortItemContext) DESC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDESC, 0)
}

func (s *SortItemContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFIRST, 0)
}

func (s *SortItemContext) LAST() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLAST, 0)
}

func (s *SortItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SortItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SortItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSortItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) SortItem() (localctx ISortItemContext) {
	localctx = NewSortItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SqlBaseParserRULE_sortItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(640)
		p.Expression()
	}
	p.SetState(642)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserASC || _la == SqlBaseParserDESC {
		{
			p.SetState(641)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SortItemContext).ordering = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserASC || _la == SqlBaseParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SortItemContext).ordering = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(646)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserNULLS {
		{
			p.SetState(644)
			p.Match(SqlBaseParserNULLS)
		}
		{
			p.SetState(645)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SortItemContext).nullOrdering = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserFIRST || _la == SqlBaseParserLAST) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SortItemContext).nullOrdering = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IQuerySpecificationContext is an interface to support dynamic dispatch.
type IQuerySpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhere returns the where rule contexts.
	GetWhere() IBooleanExpressionContext

	// GetHaving returns the having rule contexts.
	GetHaving() IBooleanExpressionContext

	// SetWhere sets the where rule contexts.
	SetWhere(IBooleanExpressionContext)

	// SetHaving sets the having rule contexts.
	SetHaving(IBooleanExpressionContext)

	// IsQuerySpecificationContext differentiates from other interfaces.
	IsQuerySpecificationContext()
}

type QuerySpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	where  IBooleanExpressionContext
	having IBooleanExpressionContext
}

func NewEmptyQuerySpecificationContext() *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_querySpecification
	return p
}

func (*QuerySpecificationContext) IsQuerySpecificationContext() {}

func NewQuerySpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_querySpecification

	return p
}

func (s *QuerySpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *QuerySpecificationContext) GetWhere() IBooleanExpressionContext { return s.where }

func (s *QuerySpecificationContext) GetHaving() IBooleanExpressionContext { return s.having }

func (s *QuerySpecificationContext) SetWhere(v IBooleanExpressionContext) { s.where = v }

func (s *QuerySpecificationContext) SetHaving(v IBooleanExpressionContext) { s.having = v }

func (s *QuerySpecificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSELECT, 0)
}

func (s *QuerySpecificationContext) AllSelectItem() []ISelectItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectItemContext)(nil)).Elem())
	var tst = make([]ISelectItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectItemContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) SelectItem(i int) ISelectItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectItemContext)
}

func (s *QuerySpecificationContext) SetQuantifier() ISetQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierContext)
}

func (s *QuerySpecificationContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *QuerySpecificationContext) AllRelation() []IRelationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRelationContext)(nil)).Elem())
	var tst = make([]IRelationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRelationContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) Relation(i int) IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *QuerySpecificationContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWHERE, 0)
}

func (s *QuerySpecificationContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGROUP, 0)
}

func (s *QuerySpecificationContext) BY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBY, 0)
}

func (s *QuerySpecificationContext) GroupBy() IGroupByContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByContext)
}

func (s *QuerySpecificationContext) HAVING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserHAVING, 0)
}

func (s *QuerySpecificationContext) AllBooleanExpression() []IBooleanExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem())
	var tst = make([]IBooleanExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBooleanExpressionContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) BooleanExpression(i int) IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *QuerySpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuerySpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuerySpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitQuerySpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) QuerySpecification() (localctx IQuerySpecificationContext) {
	localctx = NewQuerySpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SqlBaseParserRULE_querySpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)
		p.Match(SqlBaseParserSELECT)
	}
	p.SetState(650)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(649)
			p.SetQuantifier()
		}

	}
	{
		p.SetState(652)
		p.SelectItem()
	}
	p.SetState(657)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(653)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(654)
				p.SelectItem()
			}

		}
		p.SetState(659)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())
	}
	p.SetState(669)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(660)
			p.Match(SqlBaseParserFROM)
		}
		{
			p.SetState(661)
			p.relation(0)
		}
		p.SetState(666)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(662)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(663)
					p.relation(0)
				}

			}
			p.SetState(668)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())
		}

	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(671)
			p.Match(SqlBaseParserWHERE)
		}
		{
			p.SetState(672)

			var _x = p.booleanExpression(0)

			localctx.(*QuerySpecificationContext).where = _x
		}

	}
	p.SetState(678)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(675)
			p.Match(SqlBaseParserGROUP)
		}
		{
			p.SetState(676)
			p.Match(SqlBaseParserBY)
		}
		{
			p.SetState(677)
			p.GroupBy()
		}

	}
	p.SetState(682)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(680)
			p.Match(SqlBaseParserHAVING)
		}
		{
			p.SetState(681)

			var _x = p.booleanExpression(0)

			localctx.(*QuerySpecificationContext).having = _x
		}

	}

	return localctx
}

// IGroupByContext is an interface to support dynamic dispatch.
type IGroupByContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByContext differentiates from other interfaces.
	IsGroupByContext()
}

type GroupByContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByContext() *GroupByContext {
	var p = new(GroupByContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_groupBy
	return p
}

func (*GroupByContext) IsGroupByContext() {}

func NewGroupByContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByContext {
	var p = new(GroupByContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_groupBy

	return p
}

func (s *GroupByContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByContext) AllGroupingElement() []IGroupingElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroupingElementContext)(nil)).Elem())
	var tst = make([]IGroupingElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroupingElementContext)
		}
	}

	return tst
}

func (s *GroupByContext) GroupingElement(i int) IGroupingElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroupingElementContext)
}

func (s *GroupByContext) SetQuantifier() ISetQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierContext)
}

func (s *GroupByContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitGroupBy(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) GroupBy() (localctx IGroupByContext) {
	localctx = NewGroupByContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SqlBaseParserRULE_groupBy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(685)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(684)
			p.SetQuantifier()
		}

	}
	{
		p.SetState(687)
		p.GroupingElement()
	}
	p.SetState(692)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(688)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(689)
				p.GroupingElement()
			}

		}
		p.SetState(694)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext())
	}

	return localctx
}

// IGroupingElementContext is an interface to support dynamic dispatch.
type IGroupingElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingElementContext differentiates from other interfaces.
	IsGroupingElementContext()
}

type GroupingElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingElementContext() *GroupingElementContext {
	var p = new(GroupingElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_groupingElement
	return p
}

func (*GroupingElementContext) IsGroupingElementContext() {}

func NewGroupingElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingElementContext {
	var p = new(GroupingElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_groupingElement

	return p
}

func (s *GroupingElementContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingElementContext) CopyFrom(ctx *GroupingElementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *GroupingElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MultipleGroupingSetsContext struct {
	*GroupingElementContext
}

func NewMultipleGroupingSetsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MultipleGroupingSetsContext {
	var p = new(MultipleGroupingSetsContext)

	p.GroupingElementContext = NewEmptyGroupingElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GroupingElementContext))

	return p
}

func (s *MultipleGroupingSetsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultipleGroupingSetsContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGROUPING, 0)
}

func (s *MultipleGroupingSetsContext) SETS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSETS, 0)
}

func (s *MultipleGroupingSetsContext) AllGroupingSet() []IGroupingSetContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroupingSetContext)(nil)).Elem())
	var tst = make([]IGroupingSetContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroupingSetContext)
		}
	}

	return tst
}

func (s *MultipleGroupingSetsContext) GroupingSet(i int) IGroupingSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingSetContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroupingSetContext)
}

func (s *MultipleGroupingSetsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitMultipleGroupingSets(s)

	default:
		return t.VisitChildren(s)
	}
}

type SingleGroupingSetContext struct {
	*GroupingElementContext
}

func NewSingleGroupingSetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SingleGroupingSetContext {
	var p = new(SingleGroupingSetContext)

	p.GroupingElementContext = NewEmptyGroupingElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GroupingElementContext))

	return p
}

func (s *SingleGroupingSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleGroupingSetContext) GroupingExpressions() IGroupingExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupingExpressionsContext)
}

func (s *SingleGroupingSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSingleGroupingSet(s)

	default:
		return t.VisitChildren(s)
	}
}

type CubeContext struct {
	*GroupingElementContext
}

func NewCubeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CubeContext {
	var p = new(CubeContext)

	p.GroupingElementContext = NewEmptyGroupingElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GroupingElementContext))

	return p
}

func (s *CubeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CubeContext) CUBE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCUBE, 0)
}

func (s *CubeContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *CubeContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *CubeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCube(s)

	default:
		return t.VisitChildren(s)
	}
}

type RollupContext struct {
	*GroupingElementContext
}

func NewRollupContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RollupContext {
	var p = new(RollupContext)

	p.GroupingElementContext = NewEmptyGroupingElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GroupingElementContext))

	return p
}

func (s *RollupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollupContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROLLUP, 0)
}

func (s *RollupContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *RollupContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *RollupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRollup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) GroupingElement() (localctx IGroupingElementContext) {
	localctx = NewGroupingElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SqlBaseParserRULE_groupingElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSingleGroupingSetContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(695)
			p.GroupingExpressions()
		}

	case 2:
		localctx = NewRollupContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(696)
			p.Match(SqlBaseParserROLLUP)
		}
		{
			p.SetState(697)
			p.Match(SqlBaseParserT__1)
		}
		p.SetState(706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-209)&-(0x1f+1)) == 0 && ((1<<uint((_la-209)))&((1<<(SqlBaseParserIDENTIFIER-209))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-209))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-209))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-209)))) != 0) {
			{
				p.SetState(698)
				p.QualifiedName()
			}
			p.SetState(703)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(699)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(700)
					p.QualifiedName()
				}

				p.SetState(705)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(708)
			p.Match(SqlBaseParserT__2)
		}

	case 3:
		localctx = NewCubeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(709)
			p.Match(SqlBaseParserCUBE)
		}
		{
			p.SetState(710)
			p.Match(SqlBaseParserT__1)
		}
		p.SetState(719)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-209)&-(0x1f+1)) == 0 && ((1<<uint((_la-209)))&((1<<(SqlBaseParserIDENTIFIER-209))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-209))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-209))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-209)))) != 0) {
			{
				p.SetState(711)
				p.QualifiedName()
			}
			p.SetState(716)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(712)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(713)
					p.QualifiedName()
				}

				p.SetState(718)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(721)
			p.Match(SqlBaseParserT__2)
		}

	case 4:
		localctx = NewMultipleGroupingSetsContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(722)
			p.Match(SqlBaseParserGROUPING)
		}
		{
			p.SetState(723)
			p.Match(SqlBaseParserSETS)
		}
		{
			p.SetState(724)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(725)
			p.GroupingSet()
		}
		p.SetState(730)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(726)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(727)
				p.GroupingSet()
			}

			p.SetState(732)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(733)
			p.Match(SqlBaseParserT__2)
		}

	}

	return localctx
}

// IGroupingExpressionsContext is an interface to support dynamic dispatch.
type IGroupingExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingExpressionsContext differentiates from other interfaces.
	IsGroupingExpressionsContext()
}

type GroupingExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingExpressionsContext() *GroupingExpressionsContext {
	var p = new(GroupingExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_groupingExpressions
	return p
}

func (*GroupingExpressionsContext) IsGroupingExpressionsContext() {}

func NewGroupingExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingExpressionsContext {
	var p = new(GroupingExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_groupingExpressions

	return p
}

func (s *GroupingExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingExpressionsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *GroupingExpressionsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GroupingExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupingExpressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitGroupingExpressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) GroupingExpressions() (localctx IGroupingExpressionsContext) {
	localctx = NewGroupingExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SqlBaseParserRULE_groupingExpressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(750)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(737)
			p.Match(SqlBaseParserT__1)
		}
		p.SetState(746)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserT__1)|(1<<SqlBaseParserT__4)|(1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCASE)|(1<<SqlBaseParserCAST)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserCURRENT_DATE-32))|(1<<(SqlBaseParserCURRENT_TIME-32))|(1<<(SqlBaseParserCURRENT_TIMESTAMP-32))|(1<<(SqlBaseParserCURRENT_USER-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXISTS-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserEXTRACT-32))|(1<<(SqlBaseParserFALSE-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserGROUPING-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOCALTIME-96))|(1<<(SqlBaseParserLOCALTIMESTAMP-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNORMALIZE-96))|(1<<(SqlBaseParserNOT-96))|(1<<(SqlBaseParserNULL-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRUE-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SqlBaseParserPLUS-197))|(1<<(SqlBaseParserMINUS-197))|(1<<(SqlBaseParserSTRING-197))|(1<<(SqlBaseParserUNICODE_STRING-197))|(1<<(SqlBaseParserBINARY_LITERAL-197))|(1<<(SqlBaseParserINTEGER_VALUE-197))|(1<<(SqlBaseParserDECIMAL_VALUE-197))|(1<<(SqlBaseParserDOUBLE_VALUE-197))|(1<<(SqlBaseParserIDENTIFIER-197))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-197))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-197))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-197))|(1<<(SqlBaseParserDOUBLE_PRECISION-197)))) != 0) {
			{
				p.SetState(738)
				p.Expression()
			}
			p.SetState(743)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(739)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(740)
					p.Expression()
				}

				p.SetState(745)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(748)
			p.Match(SqlBaseParserT__2)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(749)
			p.Expression()
		}

	}

	return localctx
}

// IGroupingSetContext is an interface to support dynamic dispatch.
type IGroupingSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingSetContext differentiates from other interfaces.
	IsGroupingSetContext()
}

type GroupingSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingSetContext() *GroupingSetContext {
	var p = new(GroupingSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_groupingSet
	return p
}

func (*GroupingSetContext) IsGroupingSetContext() {}

func NewGroupingSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingSetContext {
	var p = new(GroupingSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_groupingSet

	return p
}

func (s *GroupingSetContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingSetContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *GroupingSetContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *GroupingSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupingSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitGroupingSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) GroupingSet() (localctx IGroupingSetContext) {
	localctx = NewGroupingSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SqlBaseParserRULE_groupingSet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(765)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserT__1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(752)
			p.Match(SqlBaseParserT__1)
		}
		p.SetState(761)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-209)&-(0x1f+1)) == 0 && ((1<<uint((_la-209)))&((1<<(SqlBaseParserIDENTIFIER-209))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-209))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-209))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-209)))) != 0) {
			{
				p.SetState(753)
				p.QualifiedName()
			}
			p.SetState(758)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(754)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(755)
					p.QualifiedName()
				}

				p.SetState(760)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(763)
			p.Match(SqlBaseParserT__2)
		}

	case SqlBaseParserADD, SqlBaseParserALL, SqlBaseParserANALYZE, SqlBaseParserANY, SqlBaseParserARRAY, SqlBaseParserASC, SqlBaseParserAT, SqlBaseParserBERNOULLI, SqlBaseParserCALL, SqlBaseParserCASCADE, SqlBaseParserCATALOGS, SqlBaseParserCOALESCE, SqlBaseParserCOLUMN, SqlBaseParserCOLUMNS, SqlBaseParserCOMMENT, SqlBaseParserCOMMIT, SqlBaseParserCOMMITTED, SqlBaseParserCURRENT, SqlBaseParserDATA, SqlBaseParserDATE, SqlBaseParserDAY, SqlBaseParserDESC, SqlBaseParserDISTRIBUTED, SqlBaseParserEXCLUDING, SqlBaseParserEXPLAIN, SqlBaseParserFILTER, SqlBaseParserFIRST, SqlBaseParserFOLLOWING, SqlBaseParserFORMAT, SqlBaseParserFUNCTIONS, SqlBaseParserGRANT, SqlBaseParserGRANTS, SqlBaseParserGRAPHVIZ, SqlBaseParserHOUR, SqlBaseParserIF, SqlBaseParserINCLUDING, SqlBaseParserINPUT, SqlBaseParserINTEGER, SqlBaseParserINTERVAL, SqlBaseParserISOLATION, SqlBaseParserLAST, SqlBaseParserLATERAL, SqlBaseParserLEVEL, SqlBaseParserLIMIT, SqlBaseParserLOGICAL, SqlBaseParserMAP, SqlBaseParserMINUTE, SqlBaseParserMONTH, SqlBaseParserNFC, SqlBaseParserNFD, SqlBaseParserNFKC, SqlBaseParserNFKD, SqlBaseParserNO, SqlBaseParserNULLIF, SqlBaseParserNULLS, SqlBaseParserONLY, SqlBaseParserOPTION, SqlBaseParserORDINALITY, SqlBaseParserOUTPUT, SqlBaseParserOVER, SqlBaseParserPARTITION, SqlBaseParserPARTITIONS, SqlBaseParserPOSITION, SqlBaseParserPRECEDING, SqlBaseParserPRIVILEGES, SqlBaseParserPROPERTIES, SqlBaseParserPUBLIC, SqlBaseParserRANGE, SqlBaseParserREAD, SqlBaseParserRENAME, SqlBaseParserREPEATABLE, SqlBaseParserREPLACE, SqlBaseParserRESET, SqlBaseParserRESTRICT, SqlBaseParserREVOKE, SqlBaseParserROLLBACK, SqlBaseParserROW, SqlBaseParserROWS, SqlBaseParserSCHEMA, SqlBaseParserSCHEMAS, SqlBaseParserSECOND, SqlBaseParserSERIALIZABLE, SqlBaseParserSESSION, SqlBaseParserSET, SqlBaseParserSETS, SqlBaseParserSHOW, SqlBaseParserSMALLINT, SqlBaseParserSOME, SqlBaseParserSTART, SqlBaseParserSTATS, SqlBaseParserSUBSTRING, SqlBaseParserSYSTEM, SqlBaseParserTABLES, SqlBaseParserTABLESAMPLE, SqlBaseParserTEXT, SqlBaseParserTIME, SqlBaseParserTIMESTAMP, SqlBaseParserTINYINT, SqlBaseParserTO, SqlBaseParserTRANSACTION, SqlBaseParserTRY_CAST, SqlBaseParserTYPE, SqlBaseParserUNBOUNDED, SqlBaseParserUNCOMMITTED, SqlBaseParserUSE, SqlBaseParserVALIDATE, SqlBaseParserVERBOSE, SqlBaseParserVIEW, SqlBaseParserWORK, SqlBaseParserWRITE, SqlBaseParserYEAR, SqlBaseParserZONE, SqlBaseParserIDENTIFIER, SqlBaseParserDIGIT_IDENTIFIER, SqlBaseParserQUOTED_IDENTIFIER, SqlBaseParserBACKQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(764)
			p.QualifiedName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INamedQueryContext is an interface to support dynamic dispatch.
type INamedQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsNamedQueryContext differentiates from other interfaces.
	IsNamedQueryContext()
}

type NamedQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyNamedQueryContext() *NamedQueryContext {
	var p = new(NamedQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_namedQuery
	return p
}

func (*NamedQueryContext) IsNamedQueryContext() {}

func NewNamedQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedQueryContext {
	var p = new(NamedQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_namedQuery

	return p
}

func (s *NamedQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedQueryContext) GetName() IIdentifierContext { return s.name }

func (s *NamedQueryContext) SetName(v IIdentifierContext) { s.name = v }

func (s *NamedQueryContext) AS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAS, 0)
}

func (s *NamedQueryContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *NamedQueryContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedQueryContext) ColumnAliases() IColumnAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAliasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *NamedQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedQueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitNamedQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) NamedQuery() (localctx INamedQueryContext) {
	localctx = NewNamedQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SqlBaseParserRULE_namedQuery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(767)

		var _x = p.Identifier()

		localctx.(*NamedQueryContext).name = _x
	}
	p.SetState(769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserT__1 {
		{
			p.SetState(768)
			p.ColumnAliases()
		}

	}
	{
		p.SetState(771)
		p.Match(SqlBaseParserAS)
	}
	{
		p.SetState(772)
		p.Match(SqlBaseParserT__1)
	}
	{
		p.SetState(773)
		p.Query()
	}
	{
		p.SetState(774)
		p.Match(SqlBaseParserT__2)
	}

	return localctx
}

// ISetQuantifierContext is an interface to support dynamic dispatch.
type ISetQuantifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetQuantifierContext differentiates from other interfaces.
	IsSetQuantifierContext()
}

type SetQuantifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetQuantifierContext() *SetQuantifierContext {
	var p = new(SetQuantifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_setQuantifier
	return p
}

func (*SetQuantifierContext) IsSetQuantifierContext() {}

func NewSetQuantifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetQuantifierContext {
	var p = new(SetQuantifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_setQuantifier

	return p
}

func (s *SetQuantifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SetQuantifierContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDISTINCT, 0)
}

func (s *SetQuantifierContext) ALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALL, 0)
}

func (s *SetQuantifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetQuantifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetQuantifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSetQuantifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) SetQuantifier() (localctx ISetQuantifierContext) {
	localctx = NewSetQuantifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SqlBaseParserRULE_setQuantifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(776)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SqlBaseParserALL || _la == SqlBaseParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISelectItemContext is an interface to support dynamic dispatch.
type ISelectItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectItemContext differentiates from other interfaces.
	IsSelectItemContext()
}

type SelectItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectItemContext() *SelectItemContext {
	var p = new(SelectItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_selectItem
	return p
}

func (*SelectItemContext) IsSelectItemContext() {}

func NewSelectItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectItemContext {
	var p = new(SelectItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_selectItem

	return p
}

func (s *SelectItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectItemContext) CopyFrom(ctx *SelectItemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SelectItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectAllContext struct {
	*SelectItemContext
}

func NewSelectAllContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectAllContext {
	var p = new(SelectAllContext)

	p.SelectItemContext = NewEmptySelectItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectItemContext))

	return p
}

func (s *SelectAllContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectAllContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *SelectAllContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserASTERISK, 0)
}

func (s *SelectAllContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSelectAll(s)

	default:
		return t.VisitChildren(s)
	}
}

type SelectSingleContext struct {
	*SelectItemContext
}

func NewSelectSingleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectSingleContext {
	var p = new(SelectSingleContext)

	p.SelectItemContext = NewEmptySelectItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectItemContext))

	return p
}

func (s *SelectSingleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectSingleContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SelectSingleContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SelectSingleContext) AS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAS, 0)
}

func (s *SelectSingleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSelectSingle(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) SelectItem() (localctx ISelectItemContext) {
	localctx = NewSelectItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SqlBaseParserRULE_selectItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(790)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectSingleContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(778)
			p.Expression()
		}
		p.SetState(783)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
			p.SetState(780)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SqlBaseParserAS {
				{
					p.SetState(779)
					p.Match(SqlBaseParserAS)
				}

			}
			{
				p.SetState(782)
				p.Identifier()
			}

		}

	case 2:
		localctx = NewSelectAllContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(785)
			p.QualifiedName()
		}
		{
			p.SetState(786)
			p.Match(SqlBaseParserT__0)
		}
		{
			p.SetState(787)
			p.Match(SqlBaseParserASTERISK)
		}

	case 3:
		localctx = NewSelectAllContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(789)
			p.Match(SqlBaseParserASTERISK)
		}

	}

	return localctx
}

// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_relation
	return p
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) CopyFrom(ctx *RelationContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RelationDefaultContext struct {
	*RelationContext
}

func NewRelationDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RelationDefaultContext {
	var p = new(RelationDefaultContext)

	p.RelationContext = NewEmptyRelationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationContext))

	return p
}

func (s *RelationDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationDefaultContext) SampledRelation() ISampledRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISampledRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISampledRelationContext)
}

func (s *RelationDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRelationDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinRelationContext struct {
	*RelationContext
	left          IRelationContext
	right         ISampledRelationContext
	rightRelation IRelationContext
}

func NewJoinRelationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinRelationContext {
	var p = new(JoinRelationContext)

	p.RelationContext = NewEmptyRelationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationContext))

	return p
}

func (s *JoinRelationContext) GetLeft() IRelationContext { return s.left }

func (s *JoinRelationContext) GetRight() ISampledRelationContext { return s.right }

func (s *JoinRelationContext) GetRightRelation() IRelationContext { return s.rightRelation }

func (s *JoinRelationContext) SetLeft(v IRelationContext) { s.left = v }

func (s *JoinRelationContext) SetRight(v ISampledRelationContext) { s.right = v }

func (s *JoinRelationContext) SetRightRelation(v IRelationContext) { s.rightRelation = v }

func (s *JoinRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinRelationContext) AllRelation() []IRelationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRelationContext)(nil)).Elem())
	var tst = make([]IRelationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRelationContext)
		}
	}

	return tst
}

func (s *JoinRelationContext) Relation(i int) IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *JoinRelationContext) CROSS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCROSS, 0)
}

func (s *JoinRelationContext) JOIN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserJOIN, 0)
}

func (s *JoinRelationContext) JoinType() IJoinTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinTypeContext)
}

func (s *JoinRelationContext) JoinCriteria() IJoinCriteriaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinCriteriaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinCriteriaContext)
}

func (s *JoinRelationContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNATURAL, 0)
}

func (s *JoinRelationContext) SampledRelation() ISampledRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISampledRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISampledRelationContext)
}

func (s *JoinRelationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitJoinRelation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Relation() (localctx IRelationContext) {
	return p.relation(0)
}

func (p *SqlBaseParser) relation(_p int) (localctx IRelationContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 44
	p.EnterRecursionRule(localctx, 44, SqlBaseParserRULE_relation, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewRelationDefaultContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(793)
		p.SampledRelation()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewJoinRelationContext(p, NewRelationContext(p, _parentctx, _parentState))
			localctx.(*JoinRelationContext).left = _prevctx

			p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_relation)
			p.SetState(795)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			p.SetState(809)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SqlBaseParserCROSS:
				{
					p.SetState(796)
					p.Match(SqlBaseParserCROSS)
				}
				{
					p.SetState(797)
					p.Match(SqlBaseParserJOIN)
				}
				{
					p.SetState(798)

					var _x = p.SampledRelation()

					localctx.(*JoinRelationContext).right = _x
				}

			case SqlBaseParserFULL, SqlBaseParserINNER, SqlBaseParserJOIN, SqlBaseParserLEFT, SqlBaseParserRIGHT:
				{
					p.SetState(799)
					p.JoinType()
				}
				{
					p.SetState(800)
					p.Match(SqlBaseParserJOIN)
				}
				{
					p.SetState(801)

					var _x = p.relation(0)

					localctx.(*JoinRelationContext).rightRelation = _x
				}
				{
					p.SetState(802)
					p.JoinCriteria()
				}

			case SqlBaseParserNATURAL:
				{
					p.SetState(804)
					p.Match(SqlBaseParserNATURAL)
				}
				{
					p.SetState(805)
					p.JoinType()
				}
				{
					p.SetState(806)
					p.Match(SqlBaseParserJOIN)
				}
				{
					p.SetState(807)

					var _x = p.SampledRelation()

					localctx.(*JoinRelationContext).right = _x
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(815)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext())
	}

	return localctx
}

// IJoinTypeContext is an interface to support dynamic dispatch.
type IJoinTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinTypeContext differentiates from other interfaces.
	IsJoinTypeContext()
}

type JoinTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinTypeContext() *JoinTypeContext {
	var p = new(JoinTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_joinType
	return p
}

func (*JoinTypeContext) IsJoinTypeContext() {}

func NewJoinTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinTypeContext {
	var p = new(JoinTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_joinType

	return p
}

func (s *JoinTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinTypeContext) INNER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINNER, 0)
}

func (s *JoinTypeContext) LEFT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLEFT, 0)
}

func (s *JoinTypeContext) OUTER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOUTER, 0)
}

func (s *JoinTypeContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRIGHT, 0)
}

func (s *JoinTypeContext) FULL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFULL, 0)
}

func (s *JoinTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitJoinType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) JoinType() (localctx IJoinTypeContext) {
	localctx = NewJoinTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SqlBaseParserRULE_joinType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(831)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserINNER, SqlBaseParserJOIN:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(817)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserINNER {
			{
				p.SetState(816)
				p.Match(SqlBaseParserINNER)
			}

		}

	case SqlBaseParserLEFT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(819)
			p.Match(SqlBaseParserLEFT)
		}
		p.SetState(821)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserOUTER {
			{
				p.SetState(820)
				p.Match(SqlBaseParserOUTER)
			}

		}

	case SqlBaseParserRIGHT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(823)
			p.Match(SqlBaseParserRIGHT)
		}
		p.SetState(825)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserOUTER {
			{
				p.SetState(824)
				p.Match(SqlBaseParserOUTER)
			}

		}

	case SqlBaseParserFULL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(827)
			p.Match(SqlBaseParserFULL)
		}
		p.SetState(829)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserOUTER {
			{
				p.SetState(828)
				p.Match(SqlBaseParserOUTER)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJoinCriteriaContext is an interface to support dynamic dispatch.
type IJoinCriteriaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinCriteriaContext differentiates from other interfaces.
	IsJoinCriteriaContext()
}

type JoinCriteriaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinCriteriaContext() *JoinCriteriaContext {
	var p = new(JoinCriteriaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_joinCriteria
	return p
}

func (*JoinCriteriaContext) IsJoinCriteriaContext() {}

func NewJoinCriteriaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinCriteriaContext {
	var p = new(JoinCriteriaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_joinCriteria

	return p
}

func (s *JoinCriteriaContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinCriteriaContext) ON() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserON, 0)
}

func (s *JoinCriteriaContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *JoinCriteriaContext) USING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUSING, 0)
}

func (s *JoinCriteriaContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *JoinCriteriaContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *JoinCriteriaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinCriteriaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinCriteriaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitJoinCriteria(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) JoinCriteria() (localctx IJoinCriteriaContext) {
	localctx = NewJoinCriteriaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SqlBaseParserRULE_joinCriteria)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(847)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserON:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(833)
			p.Match(SqlBaseParserON)
		}
		{
			p.SetState(834)
			p.booleanExpression(0)
		}

	case SqlBaseParserUSING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(835)
			p.Match(SqlBaseParserUSING)
		}
		{
			p.SetState(836)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(837)
			p.Identifier()
		}
		p.SetState(842)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(838)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(839)
				p.Identifier()
			}

			p.SetState(844)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(845)
			p.Match(SqlBaseParserT__2)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISampledRelationContext is an interface to support dynamic dispatch.
type ISampledRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPercentage returns the percentage rule contexts.
	GetPercentage() IExpressionContext

	// SetPercentage sets the percentage rule contexts.
	SetPercentage(IExpressionContext)

	// IsSampledRelationContext differentiates from other interfaces.
	IsSampledRelationContext()
}

type SampledRelationContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	percentage IExpressionContext
}

func NewEmptySampledRelationContext() *SampledRelationContext {
	var p = new(SampledRelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_sampledRelation
	return p
}

func (*SampledRelationContext) IsSampledRelationContext() {}

func NewSampledRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SampledRelationContext {
	var p = new(SampledRelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_sampledRelation

	return p
}

func (s *SampledRelationContext) GetParser() antlr.Parser { return s.parser }

func (s *SampledRelationContext) GetPercentage() IExpressionContext { return s.percentage }

func (s *SampledRelationContext) SetPercentage(v IExpressionContext) { s.percentage = v }

func (s *SampledRelationContext) AliasedRelation() IAliasedRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasedRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasedRelationContext)
}

func (s *SampledRelationContext) TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLESAMPLE, 0)
}

func (s *SampledRelationContext) SampleType() ISampleTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISampleTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISampleTypeContext)
}

func (s *SampledRelationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SampledRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SampledRelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SampledRelationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSampledRelation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) SampledRelation() (localctx ISampledRelationContext) {
	localctx = NewSampledRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SqlBaseParserRULE_sampledRelation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(849)
		p.AliasedRelation()
	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(850)
			p.Match(SqlBaseParserTABLESAMPLE)
		}
		{
			p.SetState(851)
			p.SampleType()
		}
		{
			p.SetState(852)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(853)

			var _x = p.Expression()

			localctx.(*SampledRelationContext).percentage = _x
		}
		{
			p.SetState(854)
			p.Match(SqlBaseParserT__2)
		}

	}

	return localctx
}

// ISampleTypeContext is an interface to support dynamic dispatch.
type ISampleTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSampleTypeContext differentiates from other interfaces.
	IsSampleTypeContext()
}

type SampleTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySampleTypeContext() *SampleTypeContext {
	var p = new(SampleTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_sampleType
	return p
}

func (*SampleTypeContext) IsSampleTypeContext() {}

func NewSampleTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SampleTypeContext {
	var p = new(SampleTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_sampleType

	return p
}

func (s *SampleTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *SampleTypeContext) BERNOULLI() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBERNOULLI, 0)
}

func (s *SampleTypeContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSYSTEM, 0)
}

func (s *SampleTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SampleTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SampleTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSampleType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) SampleType() (localctx ISampleTypeContext) {
	localctx = NewSampleTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SqlBaseParserRULE_sampleType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(858)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SqlBaseParserBERNOULLI || _la == SqlBaseParserSYSTEM) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAliasedRelationContext is an interface to support dynamic dispatch.
type IAliasedRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasedRelationContext differentiates from other interfaces.
	IsAliasedRelationContext()
}

type AliasedRelationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasedRelationContext() *AliasedRelationContext {
	var p = new(AliasedRelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_aliasedRelation
	return p
}

func (*AliasedRelationContext) IsAliasedRelationContext() {}

func NewAliasedRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasedRelationContext {
	var p = new(AliasedRelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_aliasedRelation

	return p
}

func (s *AliasedRelationContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasedRelationContext) RelationPrimary() IRelationPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationPrimaryContext)
}

func (s *AliasedRelationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AliasedRelationContext) AS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAS, 0)
}

func (s *AliasedRelationContext) ColumnAliases() IColumnAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAliasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *AliasedRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasedRelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasedRelationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitAliasedRelation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) AliasedRelation() (localctx IAliasedRelationContext) {
	localctx = NewAliasedRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SqlBaseParserRULE_aliasedRelation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(860)
		p.RelationPrimary()
	}
	p.SetState(868)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) == 1 {
		p.SetState(862)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserAS {
			{
				p.SetState(861)
				p.Match(SqlBaseParserAS)
			}

		}
		{
			p.SetState(864)
			p.Identifier()
		}
		p.SetState(866)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(865)
				p.ColumnAliases()
			}

		}

	}

	return localctx
}

// IColumnAliasesContext is an interface to support dynamic dispatch.
type IColumnAliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnAliasesContext differentiates from other interfaces.
	IsColumnAliasesContext()
}

type ColumnAliasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnAliasesContext() *ColumnAliasesContext {
	var p = new(ColumnAliasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_columnAliases
	return p
}

func (*ColumnAliasesContext) IsColumnAliasesContext() {}

func NewColumnAliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnAliasesContext {
	var p = new(ColumnAliasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_columnAliases

	return p
}

func (s *ColumnAliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnAliasesContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ColumnAliasesContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnAliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnAliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnAliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitColumnAliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) ColumnAliases() (localctx IColumnAliasesContext) {
	localctx = NewColumnAliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SqlBaseParserRULE_columnAliases)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(870)
		p.Match(SqlBaseParserT__1)
	}
	{
		p.SetState(871)
		p.Identifier()
	}
	p.SetState(876)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SqlBaseParserT__3 {
		{
			p.SetState(872)
			p.Match(SqlBaseParserT__3)
		}
		{
			p.SetState(873)
			p.Identifier()
		}

		p.SetState(878)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(879)
		p.Match(SqlBaseParserT__2)
	}

	return localctx
}

// IRelationPrimaryContext is an interface to support dynamic dispatch.
type IRelationPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationPrimaryContext differentiates from other interfaces.
	IsRelationPrimaryContext()
}

type RelationPrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationPrimaryContext() *RelationPrimaryContext {
	var p = new(RelationPrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_relationPrimary
	return p
}

func (*RelationPrimaryContext) IsRelationPrimaryContext() {}

func NewRelationPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationPrimaryContext {
	var p = new(RelationPrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_relationPrimary

	return p
}

func (s *RelationPrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationPrimaryContext) CopyFrom(ctx *RelationPrimaryContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RelationPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationPrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubqueryRelationContext struct {
	*RelationPrimaryContext
}

func NewSubqueryRelationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryRelationContext {
	var p = new(SubqueryRelationContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *SubqueryRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryRelationContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *SubqueryRelationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSubqueryRelation(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenthesizedRelationContext struct {
	*RelationPrimaryContext
}

func NewParenthesizedRelationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedRelationContext {
	var p = new(ParenthesizedRelationContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *ParenthesizedRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedRelationContext) Relation() IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *ParenthesizedRelationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitParenthesizedRelation(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnnestContext struct {
	*RelationPrimaryContext
}

func NewUnnestContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnnestContext {
	var p = new(UnnestContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *UnnestContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnnestContext) UNNEST() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUNNEST, 0)
}

func (s *UnnestContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *UnnestContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnnestContext) WITH() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWITH, 0)
}

func (s *UnnestContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserORDINALITY, 0)
}

func (s *UnnestContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitUnnest(s)

	default:
		return t.VisitChildren(s)
	}
}

type LateralContext struct {
	*RelationPrimaryContext
}

func NewLateralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LateralContext {
	var p = new(LateralContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *LateralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LateralContext) LATERAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLATERAL, 0)
}

func (s *LateralContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *LateralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitLateral(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableNameContext struct {
	*RelationPrimaryContext
}

func NewTableNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableNameContext {
	var p = new(TableNameContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *TableNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitTableName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) RelationPrimary() (localctx IRelationPrimaryContext) {
	localctx = NewRelationPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SqlBaseParserRULE_relationPrimary)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(910)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(881)
			p.QualifiedName()
		}

	case 2:
		localctx = NewSubqueryRelationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(882)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(883)
			p.Query()
		}
		{
			p.SetState(884)
			p.Match(SqlBaseParserT__2)
		}

	case 3:
		localctx = NewUnnestContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(886)
			p.Match(SqlBaseParserUNNEST)
		}
		{
			p.SetState(887)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(888)
			p.Expression()
		}
		p.SetState(893)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(889)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(890)
				p.Expression()
			}

			p.SetState(895)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(896)
			p.Match(SqlBaseParserT__2)
		}
		p.SetState(899)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(897)
				p.Match(SqlBaseParserWITH)
			}
			{
				p.SetState(898)
				p.Match(SqlBaseParserORDINALITY)
			}

		}

	case 4:
		localctx = NewLateralContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(901)
			p.Match(SqlBaseParserLATERAL)
		}
		{
			p.SetState(902)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(903)
			p.Query()
		}
		{
			p.SetState(904)
			p.Match(SqlBaseParserT__2)
		}

	case 5:
		localctx = NewParenthesizedRelationContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(906)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(907)
			p.relation(0)
		}
		{
			p.SetState(908)
			p.Match(SqlBaseParserT__2)
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SqlBaseParserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(912)
		p.booleanExpression(0)
	}

	return localctx
}

// IBooleanExpressionContext is an interface to support dynamic dispatch.
type IBooleanExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanExpressionContext differentiates from other interfaces.
	IsBooleanExpressionContext()
}

type BooleanExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanExpressionContext() *BooleanExpressionContext {
	var p = new(BooleanExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_booleanExpression
	return p
}

func (*BooleanExpressionContext) IsBooleanExpressionContext() {}

func NewBooleanExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanExpressionContext {
	var p = new(BooleanExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_booleanExpression

	return p
}

func (s *BooleanExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanExpressionContext) CopyFrom(ctx *BooleanExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *BooleanExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LogicalNotContext struct {
	*BooleanExpressionContext
}

func NewLogicalNotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalNotContext {
	var p = new(LogicalNotContext)

	p.BooleanExpressionContext = NewEmptyBooleanExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BooleanExpressionContext))

	return p
}

func (s *LogicalNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalNotContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *LogicalNotContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *LogicalNotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitLogicalNot(s)

	default:
		return t.VisitChildren(s)
	}
}

type BooleanDefaultContext struct {
	*BooleanExpressionContext
}

func NewBooleanDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BooleanDefaultContext {
	var p = new(BooleanDefaultContext)

	p.BooleanExpressionContext = NewEmptyBooleanExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BooleanExpressionContext))

	return p
}

func (s *BooleanDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanDefaultContext) Predicated() IPredicatedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicatedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicatedContext)
}

func (s *BooleanDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBooleanDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalBinaryContext struct {
	*BooleanExpressionContext
	left     IBooleanExpressionContext
	operator antlr.Token
	right    IBooleanExpressionContext
}

func NewLogicalBinaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalBinaryContext {
	var p = new(LogicalBinaryContext)

	p.BooleanExpressionContext = NewEmptyBooleanExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BooleanExpressionContext))

	return p
}

func (s *LogicalBinaryContext) GetOperator() antlr.Token { return s.operator }

func (s *LogicalBinaryContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *LogicalBinaryContext) GetLeft() IBooleanExpressionContext { return s.left }

func (s *LogicalBinaryContext) GetRight() IBooleanExpressionContext { return s.right }

func (s *LogicalBinaryContext) SetLeft(v IBooleanExpressionContext) { s.left = v }

func (s *LogicalBinaryContext) SetRight(v IBooleanExpressionContext) { s.right = v }

func (s *LogicalBinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalBinaryContext) AllBooleanExpression() []IBooleanExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem())
	var tst = make([]IBooleanExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBooleanExpressionContext)
		}
	}

	return tst
}

func (s *LogicalBinaryContext) BooleanExpression(i int) IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *LogicalBinaryContext) AND() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAND, 0)
}

func (s *LogicalBinaryContext) OR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOR, 0)
}

func (s *LogicalBinaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitLogicalBinary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) BooleanExpression() (localctx IBooleanExpressionContext) {
	return p.booleanExpression(0)
}

func (p *SqlBaseParser) booleanExpression(_p int) (localctx IBooleanExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBooleanExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBooleanExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 62
	p.EnterRecursionRule(localctx, 62, SqlBaseParserRULE_booleanExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(918)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserT__1, SqlBaseParserT__4, SqlBaseParserADD, SqlBaseParserALL, SqlBaseParserANALYZE, SqlBaseParserANY, SqlBaseParserARRAY, SqlBaseParserASC, SqlBaseParserAT, SqlBaseParserBERNOULLI, SqlBaseParserCALL, SqlBaseParserCASCADE, SqlBaseParserCASE, SqlBaseParserCAST, SqlBaseParserCATALOGS, SqlBaseParserCOALESCE, SqlBaseParserCOLUMN, SqlBaseParserCOLUMNS, SqlBaseParserCOMMENT, SqlBaseParserCOMMIT, SqlBaseParserCOMMITTED, SqlBaseParserCURRENT, SqlBaseParserCURRENT_DATE, SqlBaseParserCURRENT_TIME, SqlBaseParserCURRENT_TIMESTAMP, SqlBaseParserCURRENT_USER, SqlBaseParserDATA, SqlBaseParserDATE, SqlBaseParserDAY, SqlBaseParserDESC, SqlBaseParserDISTRIBUTED, SqlBaseParserEXCLUDING, SqlBaseParserEXISTS, SqlBaseParserEXPLAIN, SqlBaseParserEXTRACT, SqlBaseParserFALSE, SqlBaseParserFILTER, SqlBaseParserFIRST, SqlBaseParserFOLLOWING, SqlBaseParserFORMAT, SqlBaseParserFUNCTIONS, SqlBaseParserGRANT, SqlBaseParserGRANTS, SqlBaseParserGRAPHVIZ, SqlBaseParserGROUPING, SqlBaseParserHOUR, SqlBaseParserIF, SqlBaseParserINCLUDING, SqlBaseParserINPUT, SqlBaseParserINTEGER, SqlBaseParserINTERVAL, SqlBaseParserISOLATION, SqlBaseParserLAST, SqlBaseParserLATERAL, SqlBaseParserLEVEL, SqlBaseParserLIMIT, SqlBaseParserLOCALTIME, SqlBaseParserLOCALTIMESTAMP, SqlBaseParserLOGICAL, SqlBaseParserMAP, SqlBaseParserMINUTE, SqlBaseParserMONTH, SqlBaseParserNFC, SqlBaseParserNFD, SqlBaseParserNFKC, SqlBaseParserNFKD, SqlBaseParserNO, SqlBaseParserNORMALIZE, SqlBaseParserNULL, SqlBaseParserNULLIF, SqlBaseParserNULLS, SqlBaseParserONLY, SqlBaseParserOPTION, SqlBaseParserORDINALITY, SqlBaseParserOUTPUT, SqlBaseParserOVER, SqlBaseParserPARTITION, SqlBaseParserPARTITIONS, SqlBaseParserPOSITION, SqlBaseParserPRECEDING, SqlBaseParserPRIVILEGES, SqlBaseParserPROPERTIES, SqlBaseParserPUBLIC, SqlBaseParserRANGE, SqlBaseParserREAD, SqlBaseParserRENAME, SqlBaseParserREPEATABLE, SqlBaseParserREPLACE, SqlBaseParserRESET, SqlBaseParserRESTRICT, SqlBaseParserREVOKE, SqlBaseParserROLLBACK, SqlBaseParserROW, SqlBaseParserROWS, SqlBaseParserSCHEMA, SqlBaseParserSCHEMAS, SqlBaseParserSECOND, SqlBaseParserSERIALIZABLE, SqlBaseParserSESSION, SqlBaseParserSET, SqlBaseParserSETS, SqlBaseParserSHOW, SqlBaseParserSMALLINT, SqlBaseParserSOME, SqlBaseParserSTART, SqlBaseParserSTATS, SqlBaseParserSUBSTRING, SqlBaseParserSYSTEM, SqlBaseParserTABLES, SqlBaseParserTABLESAMPLE, SqlBaseParserTEXT, SqlBaseParserTIME, SqlBaseParserTIMESTAMP, SqlBaseParserTINYINT, SqlBaseParserTO, SqlBaseParserTRANSACTION, SqlBaseParserTRUE, SqlBaseParserTRY_CAST, SqlBaseParserTYPE, SqlBaseParserUNBOUNDED, SqlBaseParserUNCOMMITTED, SqlBaseParserUSE, SqlBaseParserVALIDATE, SqlBaseParserVERBOSE, SqlBaseParserVIEW, SqlBaseParserWORK, SqlBaseParserWRITE, SqlBaseParserYEAR, SqlBaseParserZONE, SqlBaseParserPLUS, SqlBaseParserMINUS, SqlBaseParserSTRING, SqlBaseParserUNICODE_STRING, SqlBaseParserBINARY_LITERAL, SqlBaseParserINTEGER_VALUE, SqlBaseParserDECIMAL_VALUE, SqlBaseParserDOUBLE_VALUE, SqlBaseParserIDENTIFIER, SqlBaseParserDIGIT_IDENTIFIER, SqlBaseParserQUOTED_IDENTIFIER, SqlBaseParserBACKQUOTED_IDENTIFIER, SqlBaseParserDOUBLE_PRECISION:
		localctx = NewBooleanDefaultContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(915)
			p.Predicated()
		}

	case SqlBaseParserNOT:
		localctx = NewLogicalNotContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(916)
			p.Match(SqlBaseParserNOT)
		}
		{
			p.SetState(917)
			p.booleanExpression(3)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(928)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(926)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
			case 1:
				localctx = NewLogicalBinaryContext(p, NewBooleanExpressionContext(p, _parentctx, _parentState))
				localctx.(*LogicalBinaryContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_booleanExpression)
				p.SetState(920)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(921)

					var _m = p.Match(SqlBaseParserAND)

					localctx.(*LogicalBinaryContext).operator = _m
				}
				{
					p.SetState(922)

					var _x = p.booleanExpression(3)

					localctx.(*LogicalBinaryContext).right = _x
				}

			case 2:
				localctx = NewLogicalBinaryContext(p, NewBooleanExpressionContext(p, _parentctx, _parentState))
				localctx.(*LogicalBinaryContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_booleanExpression)
				p.SetState(923)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(924)

					var _m = p.Match(SqlBaseParserOR)

					localctx.(*LogicalBinaryContext).operator = _m
				}
				{
					p.SetState(925)

					var _x = p.booleanExpression(2)

					localctx.(*LogicalBinaryContext).right = _x
				}

			}

		}
		p.SetState(930)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext())
	}

	return localctx
}

// IPredicatedContext is an interface to support dynamic dispatch.
type IPredicatedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_valueExpression returns the _valueExpression rule contexts.
	Get_valueExpression() IValueExpressionContext

	// Set_valueExpression sets the _valueExpression rule contexts.
	Set_valueExpression(IValueExpressionContext)

	// IsPredicatedContext differentiates from other interfaces.
	IsPredicatedContext()
}

type PredicatedContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_valueExpression IValueExpressionContext
}

func NewEmptyPredicatedContext() *PredicatedContext {
	var p = new(PredicatedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_predicated
	return p
}

func (*PredicatedContext) IsPredicatedContext() {}

func NewPredicatedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicatedContext {
	var p = new(PredicatedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_predicated

	return p
}

func (s *PredicatedContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicatedContext) Get_valueExpression() IValueExpressionContext { return s._valueExpression }

func (s *PredicatedContext) Set_valueExpression(v IValueExpressionContext) { s._valueExpression = v }

func (s *PredicatedContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *PredicatedContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *PredicatedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicatedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PredicatedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitPredicated(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Predicated() (localctx IPredicatedContext) {
	localctx = NewPredicatedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SqlBaseParserRULE_predicated)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(931)

		var _x = p.valueExpression(0)

		localctx.(*PredicatedContext)._valueExpression = _x
	}
	p.SetState(933)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(932)
			p.Predicate(localctx.(*PredicatedContext).Get_valueExpression())
		}

	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValue returns the value attribute.
	GetValue() antlr.ParserRuleContext

	// SetValue sets the value attribute.
	SetValue(antlr.ParserRuleContext)

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	value  antlr.ParserRuleContext
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int, value antlr.ParserRuleContext) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_predicate

	p.value = value

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) GetValue() antlr.ParserRuleContext { return s.value }

func (s *PredicateContext) SetValue(v antlr.ParserRuleContext) { s.value = v }

func (s *PredicateContext) CopyFrom(ctx *PredicateContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
	s.value = ctx.value
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ComparisonContext struct {
	*PredicateContext
	right IValueExpressionContext
}

func NewComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ComparisonContext {
	var p = new(ComparisonContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ComparisonContext) GetRight() IValueExpressionContext { return s.right }

func (s *ComparisonContext) SetRight(v IValueExpressionContext) { s.right = v }

func (s *ComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *ComparisonContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ComparisonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitComparison(s)

	default:
		return t.VisitChildren(s)
	}
}

type LikeContext struct {
	*PredicateContext
	pattern IValueExpressionContext
	escape  IValueExpressionContext
}

func NewLikeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LikeContext {
	var p = new(LikeContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *LikeContext) GetPattern() IValueExpressionContext { return s.pattern }

func (s *LikeContext) GetEscape() IValueExpressionContext { return s.escape }

func (s *LikeContext) SetPattern(v IValueExpressionContext) { s.pattern = v }

func (s *LikeContext) SetEscape(v IValueExpressionContext) { s.escape = v }

func (s *LikeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LikeContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLIKE, 0)
}

func (s *LikeContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *LikeContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *LikeContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *LikeContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserESCAPE, 0)
}

func (s *LikeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitLike(s)

	default:
		return t.VisitChildren(s)
	}
}

type InSubqueryContext struct {
	*PredicateContext
}

func NewInSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InSubqueryContext {
	var p = new(InSubqueryContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *InSubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InSubqueryContext) IN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIN, 0)
}

func (s *InSubqueryContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *InSubqueryContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *InSubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitInSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

type DistinctFromContext struct {
	*PredicateContext
	right IValueExpressionContext
}

func NewDistinctFromContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DistinctFromContext {
	var p = new(DistinctFromContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *DistinctFromContext) GetRight() IValueExpressionContext { return s.right }

func (s *DistinctFromContext) SetRight(v IValueExpressionContext) { s.right = v }

func (s *DistinctFromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistinctFromContext) IS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIS, 0)
}

func (s *DistinctFromContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDISTINCT, 0)
}

func (s *DistinctFromContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *DistinctFromContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *DistinctFromContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *DistinctFromContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDistinctFrom(s)

	default:
		return t.VisitChildren(s)
	}
}

type InListContext struct {
	*PredicateContext
}

func NewInListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InListContext {
	var p = new(InListContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *InListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InListContext) IN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIN, 0)
}

func (s *InListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InListContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *InListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitInList(s)

	default:
		return t.VisitChildren(s)
	}
}

type NullPredicateContext struct {
	*PredicateContext
}

func NewNullPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NullPredicateContext {
	var p = new(NullPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *NullPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullPredicateContext) IS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIS, 0)
}

func (s *NullPredicateContext) NULL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNULL, 0)
}

func (s *NullPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *NullPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitNullPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type BetweenContext struct {
	*PredicateContext
	lower IValueExpressionContext
	upper IValueExpressionContext
}

func NewBetweenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BetweenContext {
	var p = new(BetweenContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *BetweenContext) GetLower() IValueExpressionContext { return s.lower }

func (s *BetweenContext) GetUpper() IValueExpressionContext { return s.upper }

func (s *BetweenContext) SetLower(v IValueExpressionContext) { s.lower = v }

func (s *BetweenContext) SetUpper(v IValueExpressionContext) { s.upper = v }

func (s *BetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBETWEEN, 0)
}

func (s *BetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAND, 0)
}

func (s *BetweenContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *BetweenContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *BetweenContext) NOT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNOT, 0)
}

func (s *BetweenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBetween(s)

	default:
		return t.VisitChildren(s)
	}
}

type QuantifiedComparisonContext struct {
	*PredicateContext
}

func NewQuantifiedComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QuantifiedComparisonContext {
	var p = new(QuantifiedComparisonContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *QuantifiedComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuantifiedComparisonContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *QuantifiedComparisonContext) ComparisonQuantifier() IComparisonQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonQuantifierContext)
}

func (s *QuantifiedComparisonContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *QuantifiedComparisonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitQuantifiedComparison(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Predicate(value antlr.ParserRuleContext) (localctx IPredicateContext) {
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), p.GetState(), value)
	p.EnterRule(localctx, 66, SqlBaseParserRULE_predicate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(996)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) {
	case 1:
		localctx = NewComparisonContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(935)
			p.ComparisonOperator()
		}
		{
			p.SetState(936)

			var _x = p.valueExpression(0)

			localctx.(*ComparisonContext).right = _x
		}

	case 2:
		localctx = NewQuantifiedComparisonContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(938)
			p.ComparisonOperator()
		}
		{
			p.SetState(939)
			p.ComparisonQuantifier()
		}
		{
			p.SetState(940)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(941)
			p.Query()
		}
		{
			p.SetState(942)
			p.Match(SqlBaseParserT__2)
		}

	case 3:
		localctx = NewBetweenContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserNOT {
			{
				p.SetState(944)
				p.Match(SqlBaseParserNOT)
			}

		}
		{
			p.SetState(947)
			p.Match(SqlBaseParserBETWEEN)
		}
		{
			p.SetState(948)

			var _x = p.valueExpression(0)

			localctx.(*BetweenContext).lower = _x
		}
		{
			p.SetState(949)
			p.Match(SqlBaseParserAND)
		}
		{
			p.SetState(950)

			var _x = p.valueExpression(0)

			localctx.(*BetweenContext).upper = _x
		}

	case 4:
		localctx = NewInListContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserNOT {
			{
				p.SetState(952)
				p.Match(SqlBaseParserNOT)
			}

		}
		{
			p.SetState(955)
			p.Match(SqlBaseParserIN)
		}
		{
			p.SetState(956)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(957)
			p.Expression()
		}
		p.SetState(962)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(958)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(959)
				p.Expression()
			}

			p.SetState(964)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(965)
			p.Match(SqlBaseParserT__2)
		}

	case 5:
		localctx = NewInSubqueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		p.SetState(968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserNOT {
			{
				p.SetState(967)
				p.Match(SqlBaseParserNOT)
			}

		}
		{
			p.SetState(970)
			p.Match(SqlBaseParserIN)
		}
		{
			p.SetState(971)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(972)
			p.Query()
		}
		{
			p.SetState(973)
			p.Match(SqlBaseParserT__2)
		}

	case 6:
		localctx = NewLikeContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		p.SetState(976)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserNOT {
			{
				p.SetState(975)
				p.Match(SqlBaseParserNOT)
			}

		}
		{
			p.SetState(978)
			p.Match(SqlBaseParserLIKE)
		}
		{
			p.SetState(979)

			var _x = p.valueExpression(0)

			localctx.(*LikeContext).pattern = _x
		}
		p.SetState(982)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(980)
				p.Match(SqlBaseParserESCAPE)
			}
			{
				p.SetState(981)

				var _x = p.valueExpression(0)

				localctx.(*LikeContext).escape = _x
			}

		}

	case 7:
		localctx = NewNullPredicateContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(984)
			p.Match(SqlBaseParserIS)
		}
		p.SetState(986)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserNOT {
			{
				p.SetState(985)
				p.Match(SqlBaseParserNOT)
			}

		}
		{
			p.SetState(988)
			p.Match(SqlBaseParserNULL)
		}

	case 8:
		localctx = NewDistinctFromContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(989)
			p.Match(SqlBaseParserIS)
		}
		p.SetState(991)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserNOT {
			{
				p.SetState(990)
				p.Match(SqlBaseParserNOT)
			}

		}
		{
			p.SetState(993)
			p.Match(SqlBaseParserDISTINCT)
		}
		{
			p.SetState(994)
			p.Match(SqlBaseParserFROM)
		}
		{
			p.SetState(995)

			var _x = p.valueExpression(0)

			localctx.(*DistinctFromContext).right = _x
		}

	}

	return localctx
}

// IValueExpressionContext is an interface to support dynamic dispatch.
type IValueExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueExpressionContext differentiates from other interfaces.
	IsValueExpressionContext()
}

type ValueExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueExpressionContext() *ValueExpressionContext {
	var p = new(ValueExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_valueExpression
	return p
}

func (*ValueExpressionContext) IsValueExpressionContext() {}

func NewValueExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueExpressionContext {
	var p = new(ValueExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_valueExpression

	return p
}

func (s *ValueExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueExpressionContext) CopyFrom(ctx *ValueExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ValueExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ValueExpressionDefaultContext struct {
	*ValueExpressionContext
}

func NewValueExpressionDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ValueExpressionDefaultContext {
	var p = new(ValueExpressionDefaultContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *ValueExpressionDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueExpressionDefaultContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ValueExpressionDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitValueExpressionDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

type ConcatenationContext struct {
	*ValueExpressionContext
	left  IValueExpressionContext
	right IValueExpressionContext
}

func NewConcatenationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConcatenationContext {
	var p = new(ConcatenationContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *ConcatenationContext) GetLeft() IValueExpressionContext { return s.left }

func (s *ConcatenationContext) GetRight() IValueExpressionContext { return s.right }

func (s *ConcatenationContext) SetLeft(v IValueExpressionContext) { s.left = v }

func (s *ConcatenationContext) SetRight(v IValueExpressionContext) { s.right = v }

func (s *ConcatenationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConcatenationContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCONCAT, 0)
}

func (s *ConcatenationContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *ConcatenationContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ConcatenationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitConcatenation(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArithmeticBinaryContext struct {
	*ValueExpressionContext
	left     IValueExpressionContext
	operator antlr.Token
	right    IValueExpressionContext
}

func NewArithmeticBinaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArithmeticBinaryContext {
	var p = new(ArithmeticBinaryContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *ArithmeticBinaryContext) GetOperator() antlr.Token { return s.operator }

func (s *ArithmeticBinaryContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *ArithmeticBinaryContext) GetLeft() IValueExpressionContext { return s.left }

func (s *ArithmeticBinaryContext) GetRight() IValueExpressionContext { return s.right }

func (s *ArithmeticBinaryContext) SetLeft(v IValueExpressionContext) { s.left = v }

func (s *ArithmeticBinaryContext) SetRight(v IValueExpressionContext) { s.right = v }

func (s *ArithmeticBinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArithmeticBinaryContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *ArithmeticBinaryContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ArithmeticBinaryContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserASTERISK, 0)
}

func (s *ArithmeticBinaryContext) SLASH() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSLASH, 0)
}

func (s *ArithmeticBinaryContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPERCENT, 0)
}

func (s *ArithmeticBinaryContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPLUS, 0)
}

func (s *ArithmeticBinaryContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMINUS, 0)
}

func (s *ArithmeticBinaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitArithmeticBinary(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArithmeticUnaryContext struct {
	*ValueExpressionContext
	operator antlr.Token
}

func NewArithmeticUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArithmeticUnaryContext {
	var p = new(ArithmeticUnaryContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *ArithmeticUnaryContext) GetOperator() antlr.Token { return s.operator }

func (s *ArithmeticUnaryContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *ArithmeticUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArithmeticUnaryContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ArithmeticUnaryContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMINUS, 0)
}

func (s *ArithmeticUnaryContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPLUS, 0)
}

func (s *ArithmeticUnaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitArithmeticUnary(s)

	default:
		return t.VisitChildren(s)
	}
}

type AtTimeZoneContext struct {
	*ValueExpressionContext
}

func NewAtTimeZoneContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AtTimeZoneContext {
	var p = new(AtTimeZoneContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *AtTimeZoneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtTimeZoneContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *AtTimeZoneContext) AT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAT, 0)
}

func (s *AtTimeZoneContext) TimeZoneSpecifier() ITimeZoneSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeZoneSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeZoneSpecifierContext)
}

func (s *AtTimeZoneContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitAtTimeZone(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) ValueExpression() (localctx IValueExpressionContext) {
	return p.valueExpression(0)
}

func (p *SqlBaseParser) valueExpression(_p int) (localctx IValueExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewValueExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IValueExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 68
	p.EnterRecursionRule(localctx, 68, SqlBaseParserRULE_valueExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1002)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserT__1, SqlBaseParserT__4, SqlBaseParserADD, SqlBaseParserALL, SqlBaseParserANALYZE, SqlBaseParserANY, SqlBaseParserARRAY, SqlBaseParserASC, SqlBaseParserAT, SqlBaseParserBERNOULLI, SqlBaseParserCALL, SqlBaseParserCASCADE, SqlBaseParserCASE, SqlBaseParserCAST, SqlBaseParserCATALOGS, SqlBaseParserCOALESCE, SqlBaseParserCOLUMN, SqlBaseParserCOLUMNS, SqlBaseParserCOMMENT, SqlBaseParserCOMMIT, SqlBaseParserCOMMITTED, SqlBaseParserCURRENT, SqlBaseParserCURRENT_DATE, SqlBaseParserCURRENT_TIME, SqlBaseParserCURRENT_TIMESTAMP, SqlBaseParserCURRENT_USER, SqlBaseParserDATA, SqlBaseParserDATE, SqlBaseParserDAY, SqlBaseParserDESC, SqlBaseParserDISTRIBUTED, SqlBaseParserEXCLUDING, SqlBaseParserEXISTS, SqlBaseParserEXPLAIN, SqlBaseParserEXTRACT, SqlBaseParserFALSE, SqlBaseParserFILTER, SqlBaseParserFIRST, SqlBaseParserFOLLOWING, SqlBaseParserFORMAT, SqlBaseParserFUNCTIONS, SqlBaseParserGRANT, SqlBaseParserGRANTS, SqlBaseParserGRAPHVIZ, SqlBaseParserGROUPING, SqlBaseParserHOUR, SqlBaseParserIF, SqlBaseParserINCLUDING, SqlBaseParserINPUT, SqlBaseParserINTEGER, SqlBaseParserINTERVAL, SqlBaseParserISOLATION, SqlBaseParserLAST, SqlBaseParserLATERAL, SqlBaseParserLEVEL, SqlBaseParserLIMIT, SqlBaseParserLOCALTIME, SqlBaseParserLOCALTIMESTAMP, SqlBaseParserLOGICAL, SqlBaseParserMAP, SqlBaseParserMINUTE, SqlBaseParserMONTH, SqlBaseParserNFC, SqlBaseParserNFD, SqlBaseParserNFKC, SqlBaseParserNFKD, SqlBaseParserNO, SqlBaseParserNORMALIZE, SqlBaseParserNULL, SqlBaseParserNULLIF, SqlBaseParserNULLS, SqlBaseParserONLY, SqlBaseParserOPTION, SqlBaseParserORDINALITY, SqlBaseParserOUTPUT, SqlBaseParserOVER, SqlBaseParserPARTITION, SqlBaseParserPARTITIONS, SqlBaseParserPOSITION, SqlBaseParserPRECEDING, SqlBaseParserPRIVILEGES, SqlBaseParserPROPERTIES, SqlBaseParserPUBLIC, SqlBaseParserRANGE, SqlBaseParserREAD, SqlBaseParserRENAME, SqlBaseParserREPEATABLE, SqlBaseParserREPLACE, SqlBaseParserRESET, SqlBaseParserRESTRICT, SqlBaseParserREVOKE, SqlBaseParserROLLBACK, SqlBaseParserROW, SqlBaseParserROWS, SqlBaseParserSCHEMA, SqlBaseParserSCHEMAS, SqlBaseParserSECOND, SqlBaseParserSERIALIZABLE, SqlBaseParserSESSION, SqlBaseParserSET, SqlBaseParserSETS, SqlBaseParserSHOW, SqlBaseParserSMALLINT, SqlBaseParserSOME, SqlBaseParserSTART, SqlBaseParserSTATS, SqlBaseParserSUBSTRING, SqlBaseParserSYSTEM, SqlBaseParserTABLES, SqlBaseParserTABLESAMPLE, SqlBaseParserTEXT, SqlBaseParserTIME, SqlBaseParserTIMESTAMP, SqlBaseParserTINYINT, SqlBaseParserTO, SqlBaseParserTRANSACTION, SqlBaseParserTRUE, SqlBaseParserTRY_CAST, SqlBaseParserTYPE, SqlBaseParserUNBOUNDED, SqlBaseParserUNCOMMITTED, SqlBaseParserUSE, SqlBaseParserVALIDATE, SqlBaseParserVERBOSE, SqlBaseParserVIEW, SqlBaseParserWORK, SqlBaseParserWRITE, SqlBaseParserYEAR, SqlBaseParserZONE, SqlBaseParserSTRING, SqlBaseParserUNICODE_STRING, SqlBaseParserBINARY_LITERAL, SqlBaseParserINTEGER_VALUE, SqlBaseParserDECIMAL_VALUE, SqlBaseParserDOUBLE_VALUE, SqlBaseParserIDENTIFIER, SqlBaseParserDIGIT_IDENTIFIER, SqlBaseParserQUOTED_IDENTIFIER, SqlBaseParserBACKQUOTED_IDENTIFIER, SqlBaseParserDOUBLE_PRECISION:
		localctx = NewValueExpressionDefaultContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(999)
			p.primaryExpression(0)
		}

	case SqlBaseParserPLUS, SqlBaseParserMINUS:
		localctx = NewArithmeticUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1000)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ArithmeticUnaryContext).operator = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserPLUS || _la == SqlBaseParserMINUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ArithmeticUnaryContext).operator = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1001)
			p.valueExpression(4)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1016)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) {
			case 1:
				localctx = NewArithmeticBinaryContext(p, NewValueExpressionContext(p, _parentctx, _parentState))
				localctx.(*ArithmeticBinaryContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_valueExpression)
				p.SetState(1004)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1005)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ArithmeticBinaryContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-199)&-(0x1f+1)) == 0 && ((1<<uint((_la-199)))&((1<<(SqlBaseParserASTERISK-199))|(1<<(SqlBaseParserSLASH-199))|(1<<(SqlBaseParserPERCENT-199)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ArithmeticBinaryContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1006)

					var _x = p.valueExpression(4)

					localctx.(*ArithmeticBinaryContext).right = _x
				}

			case 2:
				localctx = NewArithmeticBinaryContext(p, NewValueExpressionContext(p, _parentctx, _parentState))
				localctx.(*ArithmeticBinaryContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_valueExpression)
				p.SetState(1007)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1008)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ArithmeticBinaryContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == SqlBaseParserPLUS || _la == SqlBaseParserMINUS) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ArithmeticBinaryContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1009)

					var _x = p.valueExpression(3)

					localctx.(*ArithmeticBinaryContext).right = _x
				}

			case 3:
				localctx = NewConcatenationContext(p, NewValueExpressionContext(p, _parentctx, _parentState))
				localctx.(*ConcatenationContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_valueExpression)
				p.SetState(1010)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1011)
					p.Match(SqlBaseParserCONCAT)
				}
				{
					p.SetState(1012)

					var _x = p.valueExpression(2)

					localctx.(*ConcatenationContext).right = _x
				}

			case 4:
				localctx = NewAtTimeZoneContext(p, NewValueExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_valueExpression)
				p.SetState(1013)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1014)
					p.Match(SqlBaseParserAT)
				}
				{
					p.SetState(1015)
					p.TimeZoneSpecifier()
				}

			}

		}
		p.SetState(1020)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) CopyFrom(ctx *PrimaryExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DereferenceContext struct {
	*PrimaryExpressionContext
	base      IPrimaryExpressionContext
	fieldName IIdentifierContext
}

func NewDereferenceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DereferenceContext {
	var p = new(DereferenceContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *DereferenceContext) GetBase() IPrimaryExpressionContext { return s.base }

func (s *DereferenceContext) GetFieldName() IIdentifierContext { return s.fieldName }

func (s *DereferenceContext) SetBase(v IPrimaryExpressionContext) { s.base = v }

func (s *DereferenceContext) SetFieldName(v IIdentifierContext) { s.fieldName = v }

func (s *DereferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DereferenceContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *DereferenceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DereferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDereference(s)

	default:
		return t.VisitChildren(s)
	}
}

type TypeConstructorContext struct {
	*PrimaryExpressionContext
}

func NewTypeConstructorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeConstructorContext {
	var p = new(TypeConstructorContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *TypeConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConstructorContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TypeConstructorContext) Sql_string() ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *TypeConstructorContext) DOUBLE_PRECISION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDOUBLE_PRECISION, 0)
}

func (s *TypeConstructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitTypeConstructor(s)

	default:
		return t.VisitChildren(s)
	}
}

type SpecialDateTimeFunctionContext struct {
	*PrimaryExpressionContext
	name      antlr.Token
	precision antlr.Token
}

func NewSpecialDateTimeFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecialDateTimeFunctionContext {
	var p = new(SpecialDateTimeFunctionContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SpecialDateTimeFunctionContext) GetName() antlr.Token { return s.name }

func (s *SpecialDateTimeFunctionContext) GetPrecision() antlr.Token { return s.precision }

func (s *SpecialDateTimeFunctionContext) SetName(v antlr.Token) { s.name = v }

func (s *SpecialDateTimeFunctionContext) SetPrecision(v antlr.Token) { s.precision = v }

func (s *SpecialDateTimeFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecialDateTimeFunctionContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCURRENT_DATE, 0)
}

func (s *SpecialDateTimeFunctionContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCURRENT_TIME, 0)
}

func (s *SpecialDateTimeFunctionContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTEGER_VALUE, 0)
}

func (s *SpecialDateTimeFunctionContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCURRENT_TIMESTAMP, 0)
}

func (s *SpecialDateTimeFunctionContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLOCALTIME, 0)
}

func (s *SpecialDateTimeFunctionContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLOCALTIMESTAMP, 0)
}

func (s *SpecialDateTimeFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSpecialDateTimeFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubstringContext struct {
	*PrimaryExpressionContext
}

func NewSubstringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubstringContext {
	var p = new(SubstringContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SubstringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstringContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSUBSTRING, 0)
}

func (s *SubstringContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *SubstringContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *SubstringContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *SubstringContext) FOR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFOR, 0)
}

func (s *SubstringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSubstring(s)

	default:
		return t.VisitChildren(s)
	}
}

type CastContext struct {
	*PrimaryExpressionContext
}

func NewCastContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CastContext {
	var p = new(CastContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *CastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastContext) CAST() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCAST, 0)
}

func (s *CastContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CastContext) AS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAS, 0)
}

func (s *CastContext) Sqltype() ISqltypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqltypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqltypeContext)
}

func (s *CastContext) TRY_CAST() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTRY_CAST, 0)
}

func (s *CastContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCast(s)

	default:
		return t.VisitChildren(s)
	}
}

type LambdaContext struct {
	*PrimaryExpressionContext
}

func NewLambdaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LambdaContext {
	var p = new(LambdaContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *LambdaContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LambdaContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LambdaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitLambda(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenthesizedExpressionContext struct {
	*PrimaryExpressionContext
}

func NewParenthesizedExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesizedExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitParenthesizedExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParameterContext struct {
	*PrimaryExpressionContext
}

func NewParameterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParameterContext {
	var p = new(ParameterContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

type NormalizeContext struct {
	*PrimaryExpressionContext
}

func NewNormalizeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NormalizeContext {
	var p = new(NormalizeContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *NormalizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NormalizeContext) NORMALIZE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNORMALIZE, 0)
}

func (s *NormalizeContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *NormalizeContext) NormalForm() INormalFormContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INormalFormContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INormalFormContext)
}

func (s *NormalizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitNormalize(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntervalLiteralContext struct {
	*PrimaryExpressionContext
}

func NewIntervalLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntervalLiteralContext {
	var p = new(IntervalLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *IntervalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalLiteralContext) Interval() IIntervalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *IntervalLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitIntervalLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type NumericLiteralContext struct {
	*PrimaryExpressionContext
}

func NewNumericLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NumericLiteralContext {
	var p = new(NumericLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *NumericLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericLiteralContext) Number() INumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *NumericLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitNumericLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type BooleanLiteralContext struct {
	*PrimaryExpressionContext
}

func NewBooleanLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BooleanLiteralContext {
	var p = new(BooleanLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *BooleanLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanLiteralContext) BooleanValue() IBooleanValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanValueContext)
}

func (s *BooleanLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBooleanLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleCaseContext struct {
	*PrimaryExpressionContext
	elseExpression IExpressionContext
}

func NewSimpleCaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleCaseContext {
	var p = new(SimpleCaseContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SimpleCaseContext) GetElseExpression() IExpressionContext { return s.elseExpression }

func (s *SimpleCaseContext) SetElseExpression(v IExpressionContext) { s.elseExpression = v }

func (s *SimpleCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCASE, 0)
}

func (s *SimpleCaseContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *SimpleCaseContext) END() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEND, 0)
}

func (s *SimpleCaseContext) AllWhenClause() []IWhenClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhenClauseContext)(nil)).Elem())
	var tst = make([]IWhenClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhenClauseContext)
		}
	}

	return tst
}

func (s *SimpleCaseContext) WhenClause(i int) IWhenClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhenClauseContext)
}

func (s *SimpleCaseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserELSE, 0)
}

func (s *SimpleCaseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SimpleCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSimpleCase(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnReferenceContext struct {
	*PrimaryExpressionContext
}

func NewColumnReferenceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnReferenceContext {
	var p = new(ColumnReferenceContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ColumnReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnReferenceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitColumnReference(s)

	default:
		return t.VisitChildren(s)
	}
}

type NullLiteralContext struct {
	*PrimaryExpressionContext
}

func NewNullLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NullLiteralContext {
	var p = new(NullLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *NullLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullLiteralContext) NULL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNULL, 0)
}

func (s *NullLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitNullLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type RowConstructorContext struct {
	*PrimaryExpressionContext
}

func NewRowConstructorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RowConstructorContext {
	var p = new(RowConstructorContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *RowConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RowConstructorContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *RowConstructorContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RowConstructorContext) ROW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROW, 0)
}

func (s *RowConstructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRowConstructor(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubscriptContext struct {
	*PrimaryExpressionContext
	value IPrimaryExpressionContext
	index IValueExpressionContext
}

func NewSubscriptContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubscriptContext {
	var p = new(SubscriptContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SubscriptContext) GetValue() IPrimaryExpressionContext { return s.value }

func (s *SubscriptContext) GetIndex() IValueExpressionContext { return s.index }

func (s *SubscriptContext) SetValue(v IPrimaryExpressionContext) { s.value = v }

func (s *SubscriptContext) SetIndex(v IValueExpressionContext) { s.index = v }

func (s *SubscriptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubscriptContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *SubscriptContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *SubscriptContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSubscript(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubqueryExpressionContext struct {
	*PrimaryExpressionContext
}

func NewSubqueryExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryExpressionContext {
	var p = new(SubqueryExpressionContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SubqueryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryExpressionContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *SubqueryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSubqueryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BinaryLiteralContext struct {
	*PrimaryExpressionContext
}

func NewBinaryLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryLiteralContext {
	var p = new(BinaryLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *BinaryLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryLiteralContext) BINARY_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBINARY_LITERAL, 0)
}

func (s *BinaryLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBinaryLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type CurrentUserContext struct {
	*PrimaryExpressionContext
	name antlr.Token
}

func NewCurrentUserContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CurrentUserContext {
	var p = new(CurrentUserContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *CurrentUserContext) GetName() antlr.Token { return s.name }

func (s *CurrentUserContext) SetName(v antlr.Token) { s.name = v }

func (s *CurrentUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurrentUserContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCURRENT_USER, 0)
}

func (s *CurrentUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCurrentUser(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExtractContext struct {
	*PrimaryExpressionContext
}

func NewExtractContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExtractContext {
	var p = new(ExtractContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ExtractContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtractContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXTRACT, 0)
}

func (s *ExtractContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExtractContext) FROM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFROM, 0)
}

func (s *ExtractContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ExtractContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitExtract(s)

	default:
		return t.VisitChildren(s)
	}
}

type StringLiteralContext struct {
	*PrimaryExpressionContext
}

func NewStringLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) Sql_string() ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArrayConstructorContext struct {
	*PrimaryExpressionContext
}

func NewArrayConstructorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrayConstructorContext {
	var p = new(ArrayConstructorContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ArrayConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayConstructorContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserARRAY, 0)
}

func (s *ArrayConstructorContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ArrayConstructorContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayConstructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitArrayConstructor(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionCallContext struct {
	*PrimaryExpressionContext
}

func NewFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *FunctionCallContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserASTERISK, 0)
}

func (s *FunctionCallContext) Filter() IFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilterContext)
}

func (s *FunctionCallContext) Over() IOverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverContext)
}

func (s *FunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *FunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserORDER, 0)
}

func (s *FunctionCallContext) BY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBY, 0)
}

func (s *FunctionCallContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *FunctionCallContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *FunctionCallContext) SetQuantifier() ISetQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierContext)
}

func (s *FunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExistsContext struct {
	*PrimaryExpressionContext
}

func NewExistsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExistsContext {
	var p = new(ExistsContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXISTS, 0)
}

func (s *ExistsContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *ExistsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitExists(s)

	default:
		return t.VisitChildren(s)
	}
}

type PositionContext struct {
	*PrimaryExpressionContext
}

func NewPositionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PositionContext {
	var p = new(PositionContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *PositionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionContext) POSITION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPOSITION, 0)
}

func (s *PositionContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *PositionContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *PositionContext) IN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIN, 0)
}

func (s *PositionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitPosition(s)

	default:
		return t.VisitChildren(s)
	}
}

type SearchedCaseContext struct {
	*PrimaryExpressionContext
	elseExpression IExpressionContext
}

func NewSearchedCaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SearchedCaseContext {
	var p = new(SearchedCaseContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SearchedCaseContext) GetElseExpression() IExpressionContext { return s.elseExpression }

func (s *SearchedCaseContext) SetElseExpression(v IExpressionContext) { s.elseExpression = v }

func (s *SearchedCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SearchedCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCASE, 0)
}

func (s *SearchedCaseContext) END() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEND, 0)
}

func (s *SearchedCaseContext) AllWhenClause() []IWhenClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhenClauseContext)(nil)).Elem())
	var tst = make([]IWhenClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhenClauseContext)
		}
	}

	return tst
}

func (s *SearchedCaseContext) WhenClause(i int) IWhenClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhenClauseContext)
}

func (s *SearchedCaseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserELSE, 0)
}

func (s *SearchedCaseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SearchedCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSearchedCase(s)

	default:
		return t.VisitChildren(s)
	}
}

type GroupingOperationContext struct {
	*PrimaryExpressionContext
}

func NewGroupingOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GroupingOperationContext {
	var p = new(GroupingOperationContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *GroupingOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingOperationContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGROUPING, 0)
}

func (s *GroupingOperationContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *GroupingOperationContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *GroupingOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitGroupingOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	return p.primaryExpression(0)
}

func (p *SqlBaseParser) primaryExpression(_p int) (localctx IPrimaryExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPrimaryExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 70
	p.EnterRecursionRule(localctx, 70, SqlBaseParserRULE_primaryExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1257)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNullLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1022)
			p.Match(SqlBaseParserNULL)
		}

	case 2:
		localctx = NewIntervalLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1023)
			p.Interval()
		}

	case 3:
		localctx = NewTypeConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1024)
			p.Identifier()
		}
		{
			p.SetState(1025)
			p.Sql_string()
		}

	case 4:
		localctx = NewTypeConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1027)
			p.Match(SqlBaseParserDOUBLE_PRECISION)
		}
		{
			p.SetState(1028)
			p.Sql_string()
		}

	case 5:
		localctx = NewNumericLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1029)
			p.Number()
		}

	case 6:
		localctx = NewBooleanLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1030)
			p.BooleanValue()
		}

	case 7:
		localctx = NewStringLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1031)
			p.Sql_string()
		}

	case 8:
		localctx = NewBinaryLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1032)
			p.Match(SqlBaseParserBINARY_LITERAL)
		}

	case 9:
		localctx = NewParameterContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1033)
			p.Match(SqlBaseParserT__4)
		}

	case 10:
		localctx = NewPositionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1034)
			p.Match(SqlBaseParserPOSITION)
		}
		{
			p.SetState(1035)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1036)
			p.valueExpression(0)
		}
		{
			p.SetState(1037)
			p.Match(SqlBaseParserIN)
		}
		{
			p.SetState(1038)
			p.valueExpression(0)
		}
		{
			p.SetState(1039)
			p.Match(SqlBaseParserT__2)
		}

	case 11:
		localctx = NewRowConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1041)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1042)
			p.Expression()
		}
		p.SetState(1045)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SqlBaseParserT__3 {
			{
				p.SetState(1043)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(1044)
				p.Expression()
			}

			p.SetState(1047)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1049)
			p.Match(SqlBaseParserT__2)
		}

	case 12:
		localctx = NewRowConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1051)
			p.Match(SqlBaseParserROW)
		}
		{
			p.SetState(1052)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1053)
			p.Expression()
		}
		p.SetState(1058)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(1054)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(1055)
				p.Expression()
			}

			p.SetState(1060)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1061)
			p.Match(SqlBaseParserT__2)
		}

	case 13:
		localctx = NewFunctionCallContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1063)
			p.QualifiedName()
		}
		{
			p.SetState(1064)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1065)
			p.Match(SqlBaseParserASTERISK)
		}
		{
			p.SetState(1066)
			p.Match(SqlBaseParserT__2)
		}
		p.SetState(1068)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1067)
				p.Filter()
			}

		}
		p.SetState(1071)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1070)
				p.Over()
			}

		}

	case 14:
		localctx = NewFunctionCallContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1073)
			p.QualifiedName()
		}
		{
			p.SetState(1074)
			p.Match(SqlBaseParserT__1)
		}
		p.SetState(1086)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserT__1)|(1<<SqlBaseParserT__4)|(1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCASE)|(1<<SqlBaseParserCAST)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserCURRENT_DATE-32))|(1<<(SqlBaseParserCURRENT_TIME-32))|(1<<(SqlBaseParserCURRENT_TIMESTAMP-32))|(1<<(SqlBaseParserCURRENT_USER-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTINCT-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXISTS-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserEXTRACT-32))|(1<<(SqlBaseParserFALSE-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserGROUPING-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOCALTIME-96))|(1<<(SqlBaseParserLOCALTIMESTAMP-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNORMALIZE-96))|(1<<(SqlBaseParserNOT-96))|(1<<(SqlBaseParserNULL-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRUE-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SqlBaseParserPLUS-197))|(1<<(SqlBaseParserMINUS-197))|(1<<(SqlBaseParserSTRING-197))|(1<<(SqlBaseParserUNICODE_STRING-197))|(1<<(SqlBaseParserBINARY_LITERAL-197))|(1<<(SqlBaseParserINTEGER_VALUE-197))|(1<<(SqlBaseParserDECIMAL_VALUE-197))|(1<<(SqlBaseParserDOUBLE_VALUE-197))|(1<<(SqlBaseParserIDENTIFIER-197))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-197))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-197))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-197))|(1<<(SqlBaseParserDOUBLE_PRECISION-197)))) != 0) {
			p.SetState(1076)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1075)
					p.SetQuantifier()
				}

			}
			{
				p.SetState(1078)
				p.Expression()
			}
			p.SetState(1083)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(1079)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(1080)
					p.Expression()
				}

				p.SetState(1085)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserORDER {
			{
				p.SetState(1088)
				p.Match(SqlBaseParserORDER)
			}
			{
				p.SetState(1089)
				p.Match(SqlBaseParserBY)
			}
			{
				p.SetState(1090)
				p.SortItem()
			}
			p.SetState(1095)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(1091)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(1092)
					p.SortItem()
				}

				p.SetState(1097)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1100)
			p.Match(SqlBaseParserT__2)
		}
		p.SetState(1102)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1101)
				p.Filter()
			}

		}
		p.SetState(1105)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1104)
				p.Over()
			}

		}

	case 15:
		localctx = NewLambdaContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1107)
			p.Identifier()
		}
		{
			p.SetState(1108)
			p.Match(SqlBaseParserT__5)
		}
		{
			p.SetState(1109)
			p.Expression()
		}

	case 16:
		localctx = NewLambdaContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1111)
			p.Match(SqlBaseParserT__1)
		}
		p.SetState(1120)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-209)&-(0x1f+1)) == 0 && ((1<<uint((_la-209)))&((1<<(SqlBaseParserIDENTIFIER-209))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-209))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-209))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-209)))) != 0) {
			{
				p.SetState(1112)
				p.Identifier()
			}
			p.SetState(1117)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(1113)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(1114)
					p.Identifier()
				}

				p.SetState(1119)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1122)
			p.Match(SqlBaseParserT__2)
		}
		{
			p.SetState(1123)
			p.Match(SqlBaseParserT__5)
		}
		{
			p.SetState(1124)
			p.Expression()
		}

	case 17:
		localctx = NewSubqueryExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1125)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1126)
			p.Query()
		}
		{
			p.SetState(1127)
			p.Match(SqlBaseParserT__2)
		}

	case 18:
		localctx = NewExistsContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1129)
			p.Match(SqlBaseParserEXISTS)
		}
		{
			p.SetState(1130)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1131)
			p.Query()
		}
		{
			p.SetState(1132)
			p.Match(SqlBaseParserT__2)
		}

	case 19:
		localctx = NewSimpleCaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1134)
			p.Match(SqlBaseParserCASE)
		}
		{
			p.SetState(1135)
			p.valueExpression(0)
		}
		p.SetState(1137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SqlBaseParserWHEN {
			{
				p.SetState(1136)
				p.WhenClause()
			}

			p.SetState(1139)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1143)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserELSE {
			{
				p.SetState(1141)
				p.Match(SqlBaseParserELSE)
			}
			{
				p.SetState(1142)

				var _x = p.Expression()

				localctx.(*SimpleCaseContext).elseExpression = _x
			}

		}
		{
			p.SetState(1145)
			p.Match(SqlBaseParserEND)
		}

	case 20:
		localctx = NewSearchedCaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1147)
			p.Match(SqlBaseParserCASE)
		}
		p.SetState(1149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SqlBaseParserWHEN {
			{
				p.SetState(1148)
				p.WhenClause()
			}

			p.SetState(1151)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1155)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserELSE {
			{
				p.SetState(1153)
				p.Match(SqlBaseParserELSE)
			}
			{
				p.SetState(1154)

				var _x = p.Expression()

				localctx.(*SearchedCaseContext).elseExpression = _x
			}

		}
		{
			p.SetState(1157)
			p.Match(SqlBaseParserEND)
		}

	case 21:
		localctx = NewCastContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1159)
			p.Match(SqlBaseParserCAST)
		}
		{
			p.SetState(1160)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1161)
			p.Expression()
		}
		{
			p.SetState(1162)
			p.Match(SqlBaseParserAS)
		}
		{
			p.SetState(1163)
			p.sqltype(0)
		}
		{
			p.SetState(1164)
			p.Match(SqlBaseParserT__2)
		}

	case 22:
		localctx = NewCastContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1166)
			p.Match(SqlBaseParserTRY_CAST)
		}
		{
			p.SetState(1167)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1168)
			p.Expression()
		}
		{
			p.SetState(1169)
			p.Match(SqlBaseParserAS)
		}
		{
			p.SetState(1170)
			p.sqltype(0)
		}
		{
			p.SetState(1171)
			p.Match(SqlBaseParserT__2)
		}

	case 23:
		localctx = NewArrayConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1173)
			p.Match(SqlBaseParserARRAY)
		}
		{
			p.SetState(1174)
			p.Match(SqlBaseParserT__6)
		}
		p.SetState(1183)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserT__1)|(1<<SqlBaseParserT__4)|(1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCASE)|(1<<SqlBaseParserCAST)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserCURRENT_DATE-32))|(1<<(SqlBaseParserCURRENT_TIME-32))|(1<<(SqlBaseParserCURRENT_TIMESTAMP-32))|(1<<(SqlBaseParserCURRENT_USER-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXISTS-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserEXTRACT-32))|(1<<(SqlBaseParserFALSE-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserGROUPING-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOCALTIME-96))|(1<<(SqlBaseParserLOCALTIMESTAMP-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNORMALIZE-96))|(1<<(SqlBaseParserNOT-96))|(1<<(SqlBaseParserNULL-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRUE-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(SqlBaseParserPLUS-197))|(1<<(SqlBaseParserMINUS-197))|(1<<(SqlBaseParserSTRING-197))|(1<<(SqlBaseParserUNICODE_STRING-197))|(1<<(SqlBaseParserBINARY_LITERAL-197))|(1<<(SqlBaseParserINTEGER_VALUE-197))|(1<<(SqlBaseParserDECIMAL_VALUE-197))|(1<<(SqlBaseParserDOUBLE_VALUE-197))|(1<<(SqlBaseParserIDENTIFIER-197))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-197))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-197))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-197))|(1<<(SqlBaseParserDOUBLE_PRECISION-197)))) != 0) {
			{
				p.SetState(1175)
				p.Expression()
			}
			p.SetState(1180)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(1176)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(1177)
					p.Expression()
				}

				p.SetState(1182)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1185)
			p.Match(SqlBaseParserT__7)
		}

	case 24:
		localctx = NewColumnReferenceContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1186)
			p.Identifier()
		}

	case 25:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1187)

			var _m = p.Match(SqlBaseParserCURRENT_DATE)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}

	case 26:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1188)

			var _m = p.Match(SqlBaseParserCURRENT_TIME)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}
		p.SetState(1192)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1189)
				p.Match(SqlBaseParserT__1)
			}
			{
				p.SetState(1190)

				var _m = p.Match(SqlBaseParserINTEGER_VALUE)

				localctx.(*SpecialDateTimeFunctionContext).precision = _m
			}
			{
				p.SetState(1191)
				p.Match(SqlBaseParserT__2)
			}

		}

	case 27:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1194)

			var _m = p.Match(SqlBaseParserCURRENT_TIMESTAMP)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}
		p.SetState(1198)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1195)
				p.Match(SqlBaseParserT__1)
			}
			{
				p.SetState(1196)

				var _m = p.Match(SqlBaseParserINTEGER_VALUE)

				localctx.(*SpecialDateTimeFunctionContext).precision = _m
			}
			{
				p.SetState(1197)
				p.Match(SqlBaseParserT__2)
			}

		}

	case 28:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1200)

			var _m = p.Match(SqlBaseParserLOCALTIME)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}
		p.SetState(1204)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1201)
				p.Match(SqlBaseParserT__1)
			}
			{
				p.SetState(1202)

				var _m = p.Match(SqlBaseParserINTEGER_VALUE)

				localctx.(*SpecialDateTimeFunctionContext).precision = _m
			}
			{
				p.SetState(1203)
				p.Match(SqlBaseParserT__2)
			}

		}

	case 29:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1206)

			var _m = p.Match(SqlBaseParserLOCALTIMESTAMP)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}
		p.SetState(1210)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1207)
				p.Match(SqlBaseParserT__1)
			}
			{
				p.SetState(1208)

				var _m = p.Match(SqlBaseParserINTEGER_VALUE)

				localctx.(*SpecialDateTimeFunctionContext).precision = _m
			}
			{
				p.SetState(1209)
				p.Match(SqlBaseParserT__2)
			}

		}

	case 30:
		localctx = NewCurrentUserContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1212)

			var _m = p.Match(SqlBaseParserCURRENT_USER)

			localctx.(*CurrentUserContext).name = _m
		}

	case 31:
		localctx = NewSubstringContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1213)
			p.Match(SqlBaseParserSUBSTRING)
		}
		{
			p.SetState(1214)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1215)
			p.valueExpression(0)
		}
		{
			p.SetState(1216)
			p.Match(SqlBaseParserFROM)
		}
		{
			p.SetState(1217)
			p.valueExpression(0)
		}
		p.SetState(1220)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserFOR {
			{
				p.SetState(1218)
				p.Match(SqlBaseParserFOR)
			}
			{
				p.SetState(1219)
				p.valueExpression(0)
			}

		}
		{
			p.SetState(1222)
			p.Match(SqlBaseParserT__2)
		}

	case 32:
		localctx = NewNormalizeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1224)
			p.Match(SqlBaseParserNORMALIZE)
		}
		{
			p.SetState(1225)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1226)
			p.valueExpression(0)
		}
		p.SetState(1229)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SqlBaseParserT__3 {
			{
				p.SetState(1227)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(1228)
				p.NormalForm()
			}

		}
		{
			p.SetState(1231)
			p.Match(SqlBaseParserT__2)
		}

	case 33:
		localctx = NewExtractContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1233)
			p.Match(SqlBaseParserEXTRACT)
		}
		{
			p.SetState(1234)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1235)
			p.Identifier()
		}
		{
			p.SetState(1236)
			p.Match(SqlBaseParserFROM)
		}
		{
			p.SetState(1237)
			p.valueExpression(0)
		}
		{
			p.SetState(1238)
			p.Match(SqlBaseParserT__2)
		}

	case 34:
		localctx = NewParenthesizedExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1240)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1241)
			p.Expression()
		}
		{
			p.SetState(1242)
			p.Match(SqlBaseParserT__2)
		}

	case 35:
		localctx = NewGroupingOperationContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1244)
			p.Match(SqlBaseParserGROUPING)
		}
		{
			p.SetState(1245)
			p.Match(SqlBaseParserT__1)
		}
		p.SetState(1254)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0) || (((_la-209)&-(0x1f+1)) == 0 && ((1<<uint((_la-209)))&((1<<(SqlBaseParserIDENTIFIER-209))|(1<<(SqlBaseParserDIGIT_IDENTIFIER-209))|(1<<(SqlBaseParserQUOTED_IDENTIFIER-209))|(1<<(SqlBaseParserBACKQUOTED_IDENTIFIER-209)))) != 0) {
			{
				p.SetState(1246)
				p.QualifiedName()
			}
			p.SetState(1251)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(1247)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(1248)
					p.QualifiedName()
				}

				p.SetState(1253)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1256)
			p.Match(SqlBaseParserT__2)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1269)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1267)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSubscriptContext(p, NewPrimaryExpressionContext(p, _parentctx, _parentState))
				localctx.(*SubscriptContext).value = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_primaryExpression)
				p.SetState(1259)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1260)
					p.Match(SqlBaseParserT__6)
				}
				{
					p.SetState(1261)

					var _x = p.valueExpression(0)

					localctx.(*SubscriptContext).index = _x
				}
				{
					p.SetState(1262)
					p.Match(SqlBaseParserT__7)
				}

			case 2:
				localctx = NewDereferenceContext(p, NewPrimaryExpressionContext(p, _parentctx, _parentState))
				localctx.(*DereferenceContext).base = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_primaryExpression)
				p.SetState(1264)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1265)
					p.Match(SqlBaseParserT__0)
				}
				{
					p.SetState(1266)

					var _x = p.Identifier()

					localctx.(*DereferenceContext).fieldName = _x
				}

			}

		}
		p.SetState(1271)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())
	}

	return localctx
}

// ISql_stringContext is an interface to support dynamic dispatch.
type ISql_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_stringContext differentiates from other interfaces.
	IsSql_stringContext()
}

type Sql_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stringContext() *Sql_stringContext {
	var p = new(Sql_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_sql_string
	return p
}

func (*Sql_stringContext) IsSql_stringContext() {}

func NewSql_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stringContext {
	var p = new(Sql_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_sql_string

	return p
}

func (s *Sql_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stringContext) CopyFrom(ctx *Sql_stringContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Sql_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnicodeStringLiteralContext struct {
	*Sql_stringContext
}

func NewUnicodeStringLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnicodeStringLiteralContext {
	var p = new(UnicodeStringLiteralContext)

	p.Sql_stringContext = NewEmptySql_stringContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Sql_stringContext))

	return p
}

func (s *UnicodeStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnicodeStringLiteralContext) UNICODE_STRING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUNICODE_STRING, 0)
}

func (s *UnicodeStringLiteralContext) UESCAPE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUESCAPE, 0)
}

func (s *UnicodeStringLiteralContext) STRING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSTRING, 0)
}

func (s *UnicodeStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitUnicodeStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type BasicStringLiteralContext struct {
	*Sql_stringContext
}

func NewBasicStringLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BasicStringLiteralContext {
	var p = new(BasicStringLiteralContext)

	p.Sql_stringContext = NewEmptySql_stringContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Sql_stringContext))

	return p
}

func (s *BasicStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicStringLiteralContext) STRING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSTRING, 0)
}

func (s *BasicStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBasicStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Sql_string() (localctx ISql_stringContext) {
	localctx = NewSql_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SqlBaseParserRULE_sql_string)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1278)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserSTRING:
		localctx = NewBasicStringLiteralContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1272)
			p.Match(SqlBaseParserSTRING)
		}

	case SqlBaseParserUNICODE_STRING:
		localctx = NewUnicodeStringLiteralContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1273)
			p.Match(SqlBaseParserUNICODE_STRING)
		}
		p.SetState(1276)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1274)
				p.Match(SqlBaseParserUESCAPE)
			}
			{
				p.SetState(1275)
				p.Match(SqlBaseParserSTRING)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimeZoneSpecifierContext is an interface to support dynamic dispatch.
type ITimeZoneSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimeZoneSpecifierContext differentiates from other interfaces.
	IsTimeZoneSpecifierContext()
}

type TimeZoneSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimeZoneSpecifierContext() *TimeZoneSpecifierContext {
	var p = new(TimeZoneSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_timeZoneSpecifier
	return p
}

func (*TimeZoneSpecifierContext) IsTimeZoneSpecifierContext() {}

func NewTimeZoneSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimeZoneSpecifierContext {
	var p = new(TimeZoneSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_timeZoneSpecifier

	return p
}

func (s *TimeZoneSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TimeZoneSpecifierContext) CopyFrom(ctx *TimeZoneSpecifierContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TimeZoneSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeZoneSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TimeZoneIntervalContext struct {
	*TimeZoneSpecifierContext
}

func NewTimeZoneIntervalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TimeZoneIntervalContext {
	var p = new(TimeZoneIntervalContext)

	p.TimeZoneSpecifierContext = NewEmptyTimeZoneSpecifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TimeZoneSpecifierContext))

	return p
}

func (s *TimeZoneIntervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeZoneIntervalContext) TIME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTIME, 0)
}

func (s *TimeZoneIntervalContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserZONE, 0)
}

func (s *TimeZoneIntervalContext) Interval() IIntervalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *TimeZoneIntervalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitTimeZoneInterval(s)

	default:
		return t.VisitChildren(s)
	}
}

type TimeZoneStringContext struct {
	*TimeZoneSpecifierContext
}

func NewTimeZoneStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TimeZoneStringContext {
	var p = new(TimeZoneStringContext)

	p.TimeZoneSpecifierContext = NewEmptyTimeZoneSpecifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TimeZoneSpecifierContext))

	return p
}

func (s *TimeZoneStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeZoneStringContext) TIME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTIME, 0)
}

func (s *TimeZoneStringContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserZONE, 0)
}

func (s *TimeZoneStringContext) Sql_string() ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *TimeZoneStringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitTimeZoneString(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) TimeZoneSpecifier() (localctx ITimeZoneSpecifierContext) {
	localctx = NewTimeZoneSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SqlBaseParserRULE_timeZoneSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1286)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTimeZoneIntervalContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1280)
			p.Match(SqlBaseParserTIME)
		}
		{
			p.SetState(1281)
			p.Match(SqlBaseParserZONE)
		}
		{
			p.SetState(1282)
			p.Interval()
		}

	case 2:
		localctx = NewTimeZoneStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1283)
			p.Match(SqlBaseParserTIME)
		}
		{
			p.SetState(1284)
			p.Match(SqlBaseParserZONE)
		}
		{
			p.SetState(1285)
			p.Sql_string()
		}

	}

	return localctx
}

// IComparisonOperatorContext is an interface to support dynamic dispatch.
type IComparisonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonOperatorContext differentiates from other interfaces.
	IsComparisonOperatorContext()
}

type ComparisonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonOperatorContext() *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_comparisonOperator
	return p
}

func (*ComparisonOperatorContext) IsComparisonOperatorContext() {}

func NewComparisonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_comparisonOperator

	return p
}

func (s *ComparisonOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonOperatorContext) EQ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEQ, 0)
}

func (s *ComparisonOperatorContext) NEQ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNEQ, 0)
}

func (s *ComparisonOperatorContext) LT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLT, 0)
}

func (s *ComparisonOperatorContext) LTE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLTE, 0)
}

func (s *ComparisonOperatorContext) GT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGT, 0)
}

func (s *ComparisonOperatorContext) GTE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGTE, 0)
}

func (s *ComparisonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitComparisonOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) ComparisonOperator() (localctx IComparisonOperatorContext) {
	localctx = NewComparisonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SqlBaseParserRULE_comparisonOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1288)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-191)&-(0x1f+1)) == 0 && ((1<<uint((_la-191)))&((1<<(SqlBaseParserEQ-191))|(1<<(SqlBaseParserNEQ-191))|(1<<(SqlBaseParserLT-191))|(1<<(SqlBaseParserLTE-191))|(1<<(SqlBaseParserGT-191))|(1<<(SqlBaseParserGTE-191)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisonQuantifierContext is an interface to support dynamic dispatch.
type IComparisonQuantifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonQuantifierContext differentiates from other interfaces.
	IsComparisonQuantifierContext()
}

type ComparisonQuantifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonQuantifierContext() *ComparisonQuantifierContext {
	var p = new(ComparisonQuantifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_comparisonQuantifier
	return p
}

func (*ComparisonQuantifierContext) IsComparisonQuantifierContext() {}

func NewComparisonQuantifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonQuantifierContext {
	var p = new(ComparisonQuantifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_comparisonQuantifier

	return p
}

func (s *ComparisonQuantifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonQuantifierContext) ALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALL, 0)
}

func (s *ComparisonQuantifierContext) SOME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSOME, 0)
}

func (s *ComparisonQuantifierContext) ANY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserANY, 0)
}

func (s *ComparisonQuantifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonQuantifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonQuantifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitComparisonQuantifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) ComparisonQuantifier() (localctx IComparisonQuantifierContext) {
	localctx = NewComparisonQuantifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SqlBaseParserRULE_comparisonQuantifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1290)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SqlBaseParserALL || _la == SqlBaseParserANY || _la == SqlBaseParserSOME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBooleanValueContext is an interface to support dynamic dispatch.
type IBooleanValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanValueContext differentiates from other interfaces.
	IsBooleanValueContext()
}

type BooleanValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanValueContext() *BooleanValueContext {
	var p = new(BooleanValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_booleanValue
	return p
}

func (*BooleanValueContext) IsBooleanValueContext() {}

func NewBooleanValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanValueContext {
	var p = new(BooleanValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_booleanValue

	return p
}

func (s *BooleanValueContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanValueContext) TRUE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTRUE, 0)
}

func (s *BooleanValueContext) FALSE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFALSE, 0)
}

func (s *BooleanValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBooleanValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) BooleanValue() (localctx IBooleanValueContext) {
	localctx = NewBooleanValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SqlBaseParserRULE_booleanValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1292)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SqlBaseParserFALSE || _la == SqlBaseParserTRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIntervalContext is an interface to support dynamic dispatch.
type IIntervalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSign returns the sign token.
	GetSign() antlr.Token

	// SetSign sets the sign token.
	SetSign(antlr.Token)

	// GetFrom returns the from rule contexts.
	GetFrom() IIntervalFieldContext

	// GetTo returns the to rule contexts.
	GetTo() IIntervalFieldContext

	// SetFrom sets the from rule contexts.
	SetFrom(IIntervalFieldContext)

	// SetTo sets the to rule contexts.
	SetTo(IIntervalFieldContext)

	// IsIntervalContext differentiates from other interfaces.
	IsIntervalContext()
}

type IntervalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	sign   antlr.Token
	from   IIntervalFieldContext
	to     IIntervalFieldContext
}

func NewEmptyIntervalContext() *IntervalContext {
	var p = new(IntervalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_interval
	return p
}

func (*IntervalContext) IsIntervalContext() {}

func NewIntervalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalContext {
	var p = new(IntervalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_interval

	return p
}

func (s *IntervalContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalContext) GetSign() antlr.Token { return s.sign }

func (s *IntervalContext) SetSign(v antlr.Token) { s.sign = v }

func (s *IntervalContext) GetFrom() IIntervalFieldContext { return s.from }

func (s *IntervalContext) GetTo() IIntervalFieldContext { return s.to }

func (s *IntervalContext) SetFrom(v IIntervalFieldContext) { s.from = v }

func (s *IntervalContext) SetTo(v IIntervalFieldContext) { s.to = v }

func (s *IntervalContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTERVAL, 0)
}

func (s *IntervalContext) Sql_string() ISql_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_stringContext)
}

func (s *IntervalContext) AllIntervalField() []IIntervalFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntervalFieldContext)(nil)).Elem())
	var tst = make([]IIntervalFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntervalFieldContext)
		}
	}

	return tst
}

func (s *IntervalContext) IntervalField(i int) IIntervalFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntervalFieldContext)
}

func (s *IntervalContext) TO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTO, 0)
}

func (s *IntervalContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPLUS, 0)
}

func (s *IntervalContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMINUS, 0)
}

func (s *IntervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitInterval(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Interval() (localctx IIntervalContext) {
	localctx = NewIntervalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SqlBaseParserRULE_interval)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1294)
		p.Match(SqlBaseParserINTERVAL)
	}
	p.SetState(1296)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserPLUS || _la == SqlBaseParserMINUS {
		{
			p.SetState(1295)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IntervalContext).sign = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserPLUS || _la == SqlBaseParserMINUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IntervalContext).sign = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1298)
		p.Sql_string()
	}
	{
		p.SetState(1299)

		var _x = p.IntervalField()

		localctx.(*IntervalContext).from = _x
	}
	p.SetState(1302)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1300)
			p.Match(SqlBaseParserTO)
		}
		{
			p.SetState(1301)

			var _x = p.IntervalField()

			localctx.(*IntervalContext).to = _x
		}

	}

	return localctx
}

// IIntervalFieldContext is an interface to support dynamic dispatch.
type IIntervalFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalFieldContext differentiates from other interfaces.
	IsIntervalFieldContext()
}

type IntervalFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalFieldContext() *IntervalFieldContext {
	var p = new(IntervalFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_intervalField
	return p
}

func (*IntervalFieldContext) IsIntervalFieldContext() {}

func NewIntervalFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalFieldContext {
	var p = new(IntervalFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_intervalField

	return p
}

func (s *IntervalFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalFieldContext) YEAR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserYEAR, 0)
}

func (s *IntervalFieldContext) MONTH() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMONTH, 0)
}

func (s *IntervalFieldContext) DAY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDAY, 0)
}

func (s *IntervalFieldContext) HOUR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserHOUR, 0)
}

func (s *IntervalFieldContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMINUTE, 0)
}

func (s *IntervalFieldContext) SECOND() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSECOND, 0)
}

func (s *IntervalFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitIntervalField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) IntervalField() (localctx IIntervalFieldContext) {
	localctx = NewIntervalFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SqlBaseParserRULE_intervalField)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1304)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SqlBaseParserDAY || (((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(SqlBaseParserHOUR-77))|(1<<(SqlBaseParserMINUTE-77))|(1<<(SqlBaseParserMONTH-77)))) != 0) || _la == SqlBaseParserSECOND || _la == SqlBaseParserYEAR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INormalFormContext is an interface to support dynamic dispatch.
type INormalFormContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNormalFormContext differentiates from other interfaces.
	IsNormalFormContext()
}

type NormalFormContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNormalFormContext() *NormalFormContext {
	var p = new(NormalFormContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_normalForm
	return p
}

func (*NormalFormContext) IsNormalFormContext() {}

func NewNormalFormContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NormalFormContext {
	var p = new(NormalFormContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_normalForm

	return p
}

func (s *NormalFormContext) GetParser() antlr.Parser { return s.parser }

func (s *NormalFormContext) NFD() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNFD, 0)
}

func (s *NormalFormContext) NFC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNFC, 0)
}

func (s *NormalFormContext) NFKD() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNFKD, 0)
}

func (s *NormalFormContext) NFKC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNFKC, 0)
}

func (s *NormalFormContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NormalFormContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NormalFormContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitNormalForm(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) NormalForm() (localctx INormalFormContext) {
	localctx = NewNormalFormContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SqlBaseParserRULE_normalForm)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1306)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-104)&-(0x1f+1)) == 0 && ((1<<uint((_la-104)))&((1<<(SqlBaseParserNFC-104))|(1<<(SqlBaseParserNFD-104))|(1<<(SqlBaseParserNFKC-104))|(1<<(SqlBaseParserNFKD-104)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISqltypeContext is an interface to support dynamic dispatch.
type ISqltypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFrom returns the from rule contexts.
	GetFrom() IIntervalFieldContext

	// GetTo returns the to rule contexts.
	GetTo() IIntervalFieldContext

	// SetFrom sets the from rule contexts.
	SetFrom(IIntervalFieldContext)

	// SetTo sets the to rule contexts.
	SetTo(IIntervalFieldContext)

	// IsSqltypeContext differentiates from other interfaces.
	IsSqltypeContext()
}

type SqltypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	from   IIntervalFieldContext
	to     IIntervalFieldContext
}

func NewEmptySqltypeContext() *SqltypeContext {
	var p = new(SqltypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_sqltype
	return p
}

func (*SqltypeContext) IsSqltypeContext() {}

func NewSqltypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqltypeContext {
	var p = new(SqltypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_sqltype

	return p
}

func (s *SqltypeContext) GetParser() antlr.Parser { return s.parser }

func (s *SqltypeContext) GetFrom() IIntervalFieldContext { return s.from }

func (s *SqltypeContext) GetTo() IIntervalFieldContext { return s.to }

func (s *SqltypeContext) SetFrom(v IIntervalFieldContext) { s.from = v }

func (s *SqltypeContext) SetTo(v IIntervalFieldContext) { s.to = v }

func (s *SqltypeContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserARRAY, 0)
}

func (s *SqltypeContext) AllSqltype() []ISqltypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISqltypeContext)(nil)).Elem())
	var tst = make([]ISqltypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISqltypeContext)
		}
	}

	return tst
}

func (s *SqltypeContext) Sqltype(i int) ISqltypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqltypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISqltypeContext)
}

func (s *SqltypeContext) MAP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMAP, 0)
}

func (s *SqltypeContext) ROW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROW, 0)
}

func (s *SqltypeContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *SqltypeContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SqltypeContext) BaseType() IBaseTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBaseTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBaseTypeContext)
}

func (s *SqltypeContext) AllTypeParameter() []ITypeParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem())
	var tst = make([]ITypeParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeParameterContext)
		}
	}

	return tst
}

func (s *SqltypeContext) TypeParameter(i int) ITypeParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeParameterContext)
}

func (s *SqltypeContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTERVAL, 0)
}

func (s *SqltypeContext) TO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTO, 0)
}

func (s *SqltypeContext) AllIntervalField() []IIntervalFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntervalFieldContext)(nil)).Elem())
	var tst = make([]IIntervalFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntervalFieldContext)
		}
	}

	return tst
}

func (s *SqltypeContext) IntervalField(i int) IIntervalFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntervalFieldContext)
}

func (s *SqltypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqltypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqltypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSqltype(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Sqltype() (localctx ISqltypeContext) {
	return p.sqltype(0)
}

func (p *SqlBaseParser) sqltype(_p int) (localctx ISqltypeContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewSqltypeContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISqltypeContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 88
	p.EnterRecursionRule(localctx, 88, SqlBaseParserRULE_sqltype, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1355)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1309)
			p.Match(SqlBaseParserARRAY)
		}
		{
			p.SetState(1310)
			p.Match(SqlBaseParserLT)
		}
		{
			p.SetState(1311)
			p.sqltype(0)
		}
		{
			p.SetState(1312)
			p.Match(SqlBaseParserGT)
		}

	case 2:
		{
			p.SetState(1314)
			p.Match(SqlBaseParserMAP)
		}
		{
			p.SetState(1315)
			p.Match(SqlBaseParserLT)
		}
		{
			p.SetState(1316)
			p.sqltype(0)
		}
		{
			p.SetState(1317)
			p.Match(SqlBaseParserT__3)
		}
		{
			p.SetState(1318)
			p.sqltype(0)
		}
		{
			p.SetState(1319)
			p.Match(SqlBaseParserGT)
		}

	case 3:
		{
			p.SetState(1321)
			p.Match(SqlBaseParserROW)
		}
		{
			p.SetState(1322)
			p.Match(SqlBaseParserT__1)
		}
		{
			p.SetState(1323)
			p.Identifier()
		}
		{
			p.SetState(1324)
			p.sqltype(0)
		}
		p.SetState(1331)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(1325)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(1326)
				p.Identifier()
			}
			{
				p.SetState(1327)
				p.sqltype(0)
			}

			p.SetState(1333)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1334)
			p.Match(SqlBaseParserT__2)
		}

	case 4:
		{
			p.SetState(1336)
			p.BaseType()
		}
		p.SetState(1348)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1337)
				p.Match(SqlBaseParserT__1)
			}
			{
				p.SetState(1338)
				p.TypeParameter()
			}
			p.SetState(1343)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SqlBaseParserT__3 {
				{
					p.SetState(1339)
					p.Match(SqlBaseParserT__3)
				}
				{
					p.SetState(1340)
					p.TypeParameter()
				}

				p.SetState(1345)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1346)
				p.Match(SqlBaseParserT__2)
			}

		}

	case 5:
		{
			p.SetState(1350)
			p.Match(SqlBaseParserINTERVAL)
		}
		{
			p.SetState(1351)

			var _x = p.IntervalField()

			localctx.(*SqltypeContext).from = _x
		}
		{
			p.SetState(1352)
			p.Match(SqlBaseParserTO)
		}
		{
			p.SetState(1353)

			var _x = p.IntervalField()

			localctx.(*SqltypeContext).to = _x
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1361)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewSqltypeContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SqlBaseParserRULE_sqltype)
			p.SetState(1357)

			if !(p.Precpred(p.GetParserRuleContext(), 6)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
			}
			{
				p.SetState(1358)
				p.Match(SqlBaseParserARRAY)
			}

		}
		p.SetState(1363)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeParameterContext is an interface to support dynamic dispatch.
type ITypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterContext differentiates from other interfaces.
	IsTypeParameterContext()
}

type TypeParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterContext() *TypeParameterContext {
	var p = new(TypeParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_typeParameter
	return p
}

func (*TypeParameterContext) IsTypeParameterContext() {}

func NewTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterContext {
	var p = new(TypeParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_typeParameter

	return p
}

func (s *TypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTEGER_VALUE, 0)
}

func (s *TypeParameterContext) Sqltype() ISqltypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqltypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqltypeContext)
}

func (s *TypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitTypeParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) TypeParameter() (localctx ITypeParameterContext) {
	localctx = NewTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SqlBaseParserRULE_typeParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1366)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserINTEGER_VALUE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1364)
			p.Match(SqlBaseParserINTEGER_VALUE)
		}

	case SqlBaseParserADD, SqlBaseParserALL, SqlBaseParserANALYZE, SqlBaseParserANY, SqlBaseParserARRAY, SqlBaseParserASC, SqlBaseParserAT, SqlBaseParserBERNOULLI, SqlBaseParserCALL, SqlBaseParserCASCADE, SqlBaseParserCATALOGS, SqlBaseParserCOALESCE, SqlBaseParserCOLUMN, SqlBaseParserCOLUMNS, SqlBaseParserCOMMENT, SqlBaseParserCOMMIT, SqlBaseParserCOMMITTED, SqlBaseParserCURRENT, SqlBaseParserDATA, SqlBaseParserDATE, SqlBaseParserDAY, SqlBaseParserDESC, SqlBaseParserDISTRIBUTED, SqlBaseParserEXCLUDING, SqlBaseParserEXPLAIN, SqlBaseParserFILTER, SqlBaseParserFIRST, SqlBaseParserFOLLOWING, SqlBaseParserFORMAT, SqlBaseParserFUNCTIONS, SqlBaseParserGRANT, SqlBaseParserGRANTS, SqlBaseParserGRAPHVIZ, SqlBaseParserHOUR, SqlBaseParserIF, SqlBaseParserINCLUDING, SqlBaseParserINPUT, SqlBaseParserINTEGER, SqlBaseParserINTERVAL, SqlBaseParserISOLATION, SqlBaseParserLAST, SqlBaseParserLATERAL, SqlBaseParserLEVEL, SqlBaseParserLIMIT, SqlBaseParserLOGICAL, SqlBaseParserMAP, SqlBaseParserMINUTE, SqlBaseParserMONTH, SqlBaseParserNFC, SqlBaseParserNFD, SqlBaseParserNFKC, SqlBaseParserNFKD, SqlBaseParserNO, SqlBaseParserNULLIF, SqlBaseParserNULLS, SqlBaseParserONLY, SqlBaseParserOPTION, SqlBaseParserORDINALITY, SqlBaseParserOUTPUT, SqlBaseParserOVER, SqlBaseParserPARTITION, SqlBaseParserPARTITIONS, SqlBaseParserPOSITION, SqlBaseParserPRECEDING, SqlBaseParserPRIVILEGES, SqlBaseParserPROPERTIES, SqlBaseParserPUBLIC, SqlBaseParserRANGE, SqlBaseParserREAD, SqlBaseParserRENAME, SqlBaseParserREPEATABLE, SqlBaseParserREPLACE, SqlBaseParserRESET, SqlBaseParserRESTRICT, SqlBaseParserREVOKE, SqlBaseParserROLLBACK, SqlBaseParserROW, SqlBaseParserROWS, SqlBaseParserSCHEMA, SqlBaseParserSCHEMAS, SqlBaseParserSECOND, SqlBaseParserSERIALIZABLE, SqlBaseParserSESSION, SqlBaseParserSET, SqlBaseParserSETS, SqlBaseParserSHOW, SqlBaseParserSMALLINT, SqlBaseParserSOME, SqlBaseParserSTART, SqlBaseParserSTATS, SqlBaseParserSUBSTRING, SqlBaseParserSYSTEM, SqlBaseParserTABLES, SqlBaseParserTABLESAMPLE, SqlBaseParserTEXT, SqlBaseParserTIME, SqlBaseParserTIMESTAMP, SqlBaseParserTINYINT, SqlBaseParserTO, SqlBaseParserTRANSACTION, SqlBaseParserTRY_CAST, SqlBaseParserTYPE, SqlBaseParserUNBOUNDED, SqlBaseParserUNCOMMITTED, SqlBaseParserUSE, SqlBaseParserVALIDATE, SqlBaseParserVERBOSE, SqlBaseParserVIEW, SqlBaseParserWORK, SqlBaseParserWRITE, SqlBaseParserYEAR, SqlBaseParserZONE, SqlBaseParserIDENTIFIER, SqlBaseParserDIGIT_IDENTIFIER, SqlBaseParserQUOTED_IDENTIFIER, SqlBaseParserBACKQUOTED_IDENTIFIER, SqlBaseParserTIME_WITH_TIME_ZONE, SqlBaseParserTIMESTAMP_WITH_TIME_ZONE, SqlBaseParserDOUBLE_PRECISION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1365)
			p.sqltype(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBaseTypeContext is an interface to support dynamic dispatch.
type IBaseTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBaseTypeContext differentiates from other interfaces.
	IsBaseTypeContext()
}

type BaseTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseTypeContext() *BaseTypeContext {
	var p = new(BaseTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_baseType
	return p
}

func (*BaseTypeContext) IsBaseTypeContext() {}

func NewBaseTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseTypeContext {
	var p = new(BaseTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_baseType

	return p
}

func (s *BaseTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseTypeContext) TIME_WITH_TIME_ZONE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTIME_WITH_TIME_ZONE, 0)
}

func (s *BaseTypeContext) TIMESTAMP_WITH_TIME_ZONE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTIMESTAMP_WITH_TIME_ZONE, 0)
}

func (s *BaseTypeContext) DOUBLE_PRECISION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDOUBLE_PRECISION, 0)
}

func (s *BaseTypeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *BaseTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBaseType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) BaseType() (localctx IBaseTypeContext) {
	localctx = NewBaseTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SqlBaseParserRULE_baseType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1372)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserTIME_WITH_TIME_ZONE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1368)
			p.Match(SqlBaseParserTIME_WITH_TIME_ZONE)
		}

	case SqlBaseParserTIMESTAMP_WITH_TIME_ZONE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1369)
			p.Match(SqlBaseParserTIMESTAMP_WITH_TIME_ZONE)
		}

	case SqlBaseParserDOUBLE_PRECISION:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1370)
			p.Match(SqlBaseParserDOUBLE_PRECISION)
		}

	case SqlBaseParserADD, SqlBaseParserALL, SqlBaseParserANALYZE, SqlBaseParserANY, SqlBaseParserARRAY, SqlBaseParserASC, SqlBaseParserAT, SqlBaseParserBERNOULLI, SqlBaseParserCALL, SqlBaseParserCASCADE, SqlBaseParserCATALOGS, SqlBaseParserCOALESCE, SqlBaseParserCOLUMN, SqlBaseParserCOLUMNS, SqlBaseParserCOMMENT, SqlBaseParserCOMMIT, SqlBaseParserCOMMITTED, SqlBaseParserCURRENT, SqlBaseParserDATA, SqlBaseParserDATE, SqlBaseParserDAY, SqlBaseParserDESC, SqlBaseParserDISTRIBUTED, SqlBaseParserEXCLUDING, SqlBaseParserEXPLAIN, SqlBaseParserFILTER, SqlBaseParserFIRST, SqlBaseParserFOLLOWING, SqlBaseParserFORMAT, SqlBaseParserFUNCTIONS, SqlBaseParserGRANT, SqlBaseParserGRANTS, SqlBaseParserGRAPHVIZ, SqlBaseParserHOUR, SqlBaseParserIF, SqlBaseParserINCLUDING, SqlBaseParserINPUT, SqlBaseParserINTEGER, SqlBaseParserINTERVAL, SqlBaseParserISOLATION, SqlBaseParserLAST, SqlBaseParserLATERAL, SqlBaseParserLEVEL, SqlBaseParserLIMIT, SqlBaseParserLOGICAL, SqlBaseParserMAP, SqlBaseParserMINUTE, SqlBaseParserMONTH, SqlBaseParserNFC, SqlBaseParserNFD, SqlBaseParserNFKC, SqlBaseParserNFKD, SqlBaseParserNO, SqlBaseParserNULLIF, SqlBaseParserNULLS, SqlBaseParserONLY, SqlBaseParserOPTION, SqlBaseParserORDINALITY, SqlBaseParserOUTPUT, SqlBaseParserOVER, SqlBaseParserPARTITION, SqlBaseParserPARTITIONS, SqlBaseParserPOSITION, SqlBaseParserPRECEDING, SqlBaseParserPRIVILEGES, SqlBaseParserPROPERTIES, SqlBaseParserPUBLIC, SqlBaseParserRANGE, SqlBaseParserREAD, SqlBaseParserRENAME, SqlBaseParserREPEATABLE, SqlBaseParserREPLACE, SqlBaseParserRESET, SqlBaseParserRESTRICT, SqlBaseParserREVOKE, SqlBaseParserROLLBACK, SqlBaseParserROW, SqlBaseParserROWS, SqlBaseParserSCHEMA, SqlBaseParserSCHEMAS, SqlBaseParserSECOND, SqlBaseParserSERIALIZABLE, SqlBaseParserSESSION, SqlBaseParserSET, SqlBaseParserSETS, SqlBaseParserSHOW, SqlBaseParserSMALLINT, SqlBaseParserSOME, SqlBaseParserSTART, SqlBaseParserSTATS, SqlBaseParserSUBSTRING, SqlBaseParserSYSTEM, SqlBaseParserTABLES, SqlBaseParserTABLESAMPLE, SqlBaseParserTEXT, SqlBaseParserTIME, SqlBaseParserTIMESTAMP, SqlBaseParserTINYINT, SqlBaseParserTO, SqlBaseParserTRANSACTION, SqlBaseParserTRY_CAST, SqlBaseParserTYPE, SqlBaseParserUNBOUNDED, SqlBaseParserUNCOMMITTED, SqlBaseParserUSE, SqlBaseParserVALIDATE, SqlBaseParserVERBOSE, SqlBaseParserVIEW, SqlBaseParserWORK, SqlBaseParserWRITE, SqlBaseParserYEAR, SqlBaseParserZONE, SqlBaseParserIDENTIFIER, SqlBaseParserDIGIT_IDENTIFIER, SqlBaseParserQUOTED_IDENTIFIER, SqlBaseParserBACKQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1371)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWhenClauseContext is an interface to support dynamic dispatch.
type IWhenClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCondition returns the condition rule contexts.
	GetCondition() IExpressionContext

	// GetResult returns the result rule contexts.
	GetResult() IExpressionContext

	// SetCondition sets the condition rule contexts.
	SetCondition(IExpressionContext)

	// SetResult sets the result rule contexts.
	SetResult(IExpressionContext)

	// IsWhenClauseContext differentiates from other interfaces.
	IsWhenClauseContext()
}

type WhenClauseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	condition IExpressionContext
	result    IExpressionContext
}

func NewEmptyWhenClauseContext() *WhenClauseContext {
	var p = new(WhenClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_whenClause
	return p
}

func (*WhenClauseContext) IsWhenClauseContext() {}

func NewWhenClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenClauseContext {
	var p = new(WhenClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_whenClause

	return p
}

func (s *WhenClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenClauseContext) GetCondition() IExpressionContext { return s.condition }

func (s *WhenClauseContext) GetResult() IExpressionContext { return s.result }

func (s *WhenClauseContext) SetCondition(v IExpressionContext) { s.condition = v }

func (s *WhenClauseContext) SetResult(v IExpressionContext) { s.result = v }

func (s *WhenClauseContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWHEN, 0)
}

func (s *WhenClauseContext) THEN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTHEN, 0)
}

func (s *WhenClauseContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *WhenClauseContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhenClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitWhenClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) WhenClause() (localctx IWhenClauseContext) {
	localctx = NewWhenClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SqlBaseParserRULE_whenClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1374)
		p.Match(SqlBaseParserWHEN)
	}
	{
		p.SetState(1375)

		var _x = p.Expression()

		localctx.(*WhenClauseContext).condition = _x
	}
	{
		p.SetState(1376)
		p.Match(SqlBaseParserTHEN)
	}
	{
		p.SetState(1377)

		var _x = p.Expression()

		localctx.(*WhenClauseContext).result = _x
	}

	return localctx
}

// IFilterContext is an interface to support dynamic dispatch.
type IFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilterContext differentiates from other interfaces.
	IsFilterContext()
}

type FilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilterContext() *FilterContext {
	var p = new(FilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_filter
	return p
}

func (*FilterContext) IsFilterContext() {}

func NewFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilterContext {
	var p = new(FilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_filter

	return p
}

func (s *FilterContext) GetParser() antlr.Parser { return s.parser }

func (s *FilterContext) FILTER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFILTER, 0)
}

func (s *FilterContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWHERE, 0)
}

func (s *FilterContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *FilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Filter() (localctx IFilterContext) {
	localctx = NewFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SqlBaseParserRULE_filter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1379)
		p.Match(SqlBaseParserFILTER)
	}
	{
		p.SetState(1380)
		p.Match(SqlBaseParserT__1)
	}
	{
		p.SetState(1381)
		p.Match(SqlBaseParserWHERE)
	}
	{
		p.SetState(1382)
		p.booleanExpression(0)
	}
	{
		p.SetState(1383)
		p.Match(SqlBaseParserT__2)
	}

	return localctx
}

// IOverContext is an interface to support dynamic dispatch.
type IOverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetPartition returns the partition rule context list.
	GetPartition() []IExpressionContext

	// SetPartition sets the partition rule context list.
	SetPartition([]IExpressionContext)

	// IsOverContext differentiates from other interfaces.
	IsOverContext()
}

type OverContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	_expression IExpressionContext
	partition   []IExpressionContext
}

func NewEmptyOverContext() *OverContext {
	var p = new(OverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_over
	return p
}

func (*OverContext) IsOverContext() {}

func NewOverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverContext {
	var p = new(OverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_over

	return p
}

func (s *OverContext) GetParser() antlr.Parser { return s.parser }

func (s *OverContext) Get_expression() IExpressionContext { return s._expression }

func (s *OverContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *OverContext) GetPartition() []IExpressionContext { return s.partition }

func (s *OverContext) SetPartition(v []IExpressionContext) { s.partition = v }

func (s *OverContext) OVER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOVER, 0)
}

func (s *OverContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPARTITION, 0)
}

func (s *OverContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(SqlBaseParserBY)
}

func (s *OverContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBY, i)
}

func (s *OverContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserORDER, 0)
}

func (s *OverContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *OverContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *OverContext) WindowFrame() IWindowFrameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowFrameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowFrameContext)
}

func (s *OverContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *OverContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitOver(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Over() (localctx IOverContext) {
	localctx = NewOverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SqlBaseParserRULE_over)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1385)
		p.Match(SqlBaseParserOVER)
	}
	{
		p.SetState(1386)
		p.Match(SqlBaseParserT__1)
	}
	p.SetState(1397)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserPARTITION {
		{
			p.SetState(1387)
			p.Match(SqlBaseParserPARTITION)
		}
		{
			p.SetState(1388)
			p.Match(SqlBaseParserBY)
		}
		{
			p.SetState(1389)

			var _x = p.Expression()

			localctx.(*OverContext)._expression = _x
		}
		localctx.(*OverContext).partition = append(localctx.(*OverContext).partition, localctx.(*OverContext)._expression)
		p.SetState(1394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(1390)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(1391)

				var _x = p.Expression()

				localctx.(*OverContext)._expression = _x
			}
			localctx.(*OverContext).partition = append(localctx.(*OverContext).partition, localctx.(*OverContext)._expression)

			p.SetState(1396)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1409)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserORDER {
		{
			p.SetState(1399)
			p.Match(SqlBaseParserORDER)
		}
		{
			p.SetState(1400)
			p.Match(SqlBaseParserBY)
		}
		{
			p.SetState(1401)
			p.SortItem()
		}
		p.SetState(1406)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SqlBaseParserT__3 {
			{
				p.SetState(1402)
				p.Match(SqlBaseParserT__3)
			}
			{
				p.SetState(1403)
				p.SortItem()
			}

			p.SetState(1408)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1412)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SqlBaseParserRANGE || _la == SqlBaseParserROWS {
		{
			p.SetState(1411)
			p.WindowFrame()
		}

	}
	{
		p.SetState(1414)
		p.Match(SqlBaseParserT__2)
	}

	return localctx
}

// IWindowFrameContext is an interface to support dynamic dispatch.
type IWindowFrameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFrameType returns the frameType token.
	GetFrameType() antlr.Token

	// SetFrameType sets the frameType token.
	SetFrameType(antlr.Token)

	// GetWstart returns the wstart rule contexts.
	GetWstart() IFrameBoundContext

	// GetEnd returns the end rule contexts.
	GetEnd() IFrameBoundContext

	// SetWstart sets the wstart rule contexts.
	SetWstart(IFrameBoundContext)

	// SetEnd sets the end rule contexts.
	SetEnd(IFrameBoundContext)

	// IsWindowFrameContext differentiates from other interfaces.
	IsWindowFrameContext()
}

type WindowFrameContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	frameType antlr.Token
	wstart    IFrameBoundContext
	end       IFrameBoundContext
}

func NewEmptyWindowFrameContext() *WindowFrameContext {
	var p = new(WindowFrameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_windowFrame
	return p
}

func (*WindowFrameContext) IsWindowFrameContext() {}

func NewWindowFrameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowFrameContext {
	var p = new(WindowFrameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_windowFrame

	return p
}

func (s *WindowFrameContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowFrameContext) GetFrameType() antlr.Token { return s.frameType }

func (s *WindowFrameContext) SetFrameType(v antlr.Token) { s.frameType = v }

func (s *WindowFrameContext) GetWstart() IFrameBoundContext { return s.wstart }

func (s *WindowFrameContext) GetEnd() IFrameBoundContext { return s.end }

func (s *WindowFrameContext) SetWstart(v IFrameBoundContext) { s.wstart = v }

func (s *WindowFrameContext) SetEnd(v IFrameBoundContext) { s.end = v }

func (s *WindowFrameContext) RANGE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRANGE, 0)
}

func (s *WindowFrameContext) AllFrameBound() []IFrameBoundContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrameBoundContext)(nil)).Elem())
	var tst = make([]IFrameBoundContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrameBoundContext)
		}
	}

	return tst
}

func (s *WindowFrameContext) FrameBound(i int) IFrameBoundContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameBoundContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrameBoundContext)
}

func (s *WindowFrameContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROWS, 0)
}

func (s *WindowFrameContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBETWEEN, 0)
}

func (s *WindowFrameContext) AND() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAND, 0)
}

func (s *WindowFrameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowFrameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowFrameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitWindowFrame(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) WindowFrame() (localctx IWindowFrameContext) {
	localctx = NewWindowFrameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SqlBaseParserRULE_windowFrame)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1432)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1416)

			var _m = p.Match(SqlBaseParserRANGE)

			localctx.(*WindowFrameContext).frameType = _m
		}
		{
			p.SetState(1417)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).wstart = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1418)

			var _m = p.Match(SqlBaseParserROWS)

			localctx.(*WindowFrameContext).frameType = _m
		}
		{
			p.SetState(1419)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).wstart = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1420)

			var _m = p.Match(SqlBaseParserRANGE)

			localctx.(*WindowFrameContext).frameType = _m
		}
		{
			p.SetState(1421)
			p.Match(SqlBaseParserBETWEEN)
		}
		{
			p.SetState(1422)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).wstart = _x
		}
		{
			p.SetState(1423)
			p.Match(SqlBaseParserAND)
		}
		{
			p.SetState(1424)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).end = _x
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1426)

			var _m = p.Match(SqlBaseParserROWS)

			localctx.(*WindowFrameContext).frameType = _m
		}
		{
			p.SetState(1427)
			p.Match(SqlBaseParserBETWEEN)
		}
		{
			p.SetState(1428)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).wstart = _x
		}
		{
			p.SetState(1429)
			p.Match(SqlBaseParserAND)
		}
		{
			p.SetState(1430)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).end = _x
		}

	}

	return localctx
}

// IFrameBoundContext is an interface to support dynamic dispatch.
type IFrameBoundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameBoundContext differentiates from other interfaces.
	IsFrameBoundContext()
}

type FrameBoundContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameBoundContext() *FrameBoundContext {
	var p = new(FrameBoundContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_frameBound
	return p
}

func (*FrameBoundContext) IsFrameBoundContext() {}

func NewFrameBoundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameBoundContext {
	var p = new(FrameBoundContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_frameBound

	return p
}

func (s *FrameBoundContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameBoundContext) CopyFrom(ctx *FrameBoundContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FrameBoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameBoundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type BoundedFrameContext struct {
	*FrameBoundContext
	boundType antlr.Token
}

func NewBoundedFrameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BoundedFrameContext {
	var p = new(BoundedFrameContext)

	p.FrameBoundContext = NewEmptyFrameBoundContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FrameBoundContext))

	return p
}

func (s *BoundedFrameContext) GetBoundType() antlr.Token { return s.boundType }

func (s *BoundedFrameContext) SetBoundType(v antlr.Token) { s.boundType = v }

func (s *BoundedFrameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoundedFrameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BoundedFrameContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPRECEDING, 0)
}

func (s *BoundedFrameContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFOLLOWING, 0)
}

func (s *BoundedFrameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBoundedFrame(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnboundedFrameContext struct {
	*FrameBoundContext
	boundType antlr.Token
}

func NewUnboundedFrameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnboundedFrameContext {
	var p = new(UnboundedFrameContext)

	p.FrameBoundContext = NewEmptyFrameBoundContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FrameBoundContext))

	return p
}

func (s *UnboundedFrameContext) GetBoundType() antlr.Token { return s.boundType }

func (s *UnboundedFrameContext) SetBoundType(v antlr.Token) { s.boundType = v }

func (s *UnboundedFrameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnboundedFrameContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUNBOUNDED, 0)
}

func (s *UnboundedFrameContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPRECEDING, 0)
}

func (s *UnboundedFrameContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFOLLOWING, 0)
}

func (s *UnboundedFrameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitUnboundedFrame(s)

	default:
		return t.VisitChildren(s)
	}
}

type CurrentRowBoundContext struct {
	*FrameBoundContext
}

func NewCurrentRowBoundContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CurrentRowBoundContext {
	var p = new(CurrentRowBoundContext)

	p.FrameBoundContext = NewEmptyFrameBoundContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FrameBoundContext))

	return p
}

func (s *CurrentRowBoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurrentRowBoundContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCURRENT, 0)
}

func (s *CurrentRowBoundContext) ROW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROW, 0)
}

func (s *CurrentRowBoundContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitCurrentRowBound(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) FrameBound() (localctx IFrameBoundContext) {
	localctx = NewFrameBoundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SqlBaseParserRULE_frameBound)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1443)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) {
	case 1:
		localctx = NewUnboundedFrameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1434)
			p.Match(SqlBaseParserUNBOUNDED)
		}
		{
			p.SetState(1435)

			var _m = p.Match(SqlBaseParserPRECEDING)

			localctx.(*UnboundedFrameContext).boundType = _m
		}

	case 2:
		localctx = NewUnboundedFrameContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1436)
			p.Match(SqlBaseParserUNBOUNDED)
		}
		{
			p.SetState(1437)

			var _m = p.Match(SqlBaseParserFOLLOWING)

			localctx.(*UnboundedFrameContext).boundType = _m
		}

	case 3:
		localctx = NewCurrentRowBoundContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1438)
			p.Match(SqlBaseParserCURRENT)
		}
		{
			p.SetState(1439)
			p.Match(SqlBaseParserROW)
		}

	case 4:
		localctx = NewBoundedFrameContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1440)
			p.Expression()
		}
		{
			p.SetState(1441)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*BoundedFrameContext).boundType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserFOLLOWING || _la == SqlBaseParserPRECEDING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*BoundedFrameContext).boundType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IExplainOptionContext is an interface to support dynamic dispatch.
type IExplainOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplainOptionContext differentiates from other interfaces.
	IsExplainOptionContext()
}

type ExplainOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainOptionContext() *ExplainOptionContext {
	var p = new(ExplainOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_explainOption
	return p
}

func (*ExplainOptionContext) IsExplainOptionContext() {}

func NewExplainOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainOptionContext {
	var p = new(ExplainOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_explainOption

	return p
}

func (s *ExplainOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainOptionContext) CopyFrom(ctx *ExplainOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExplainOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExplainFormatContext struct {
	*ExplainOptionContext
	value antlr.Token
}

func NewExplainFormatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplainFormatContext {
	var p = new(ExplainFormatContext)

	p.ExplainOptionContext = NewEmptyExplainOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExplainOptionContext))

	return p
}

func (s *ExplainFormatContext) GetValue() antlr.Token { return s.value }

func (s *ExplainFormatContext) SetValue(v antlr.Token) { s.value = v }

func (s *ExplainFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainFormatContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFORMAT, 0)
}

func (s *ExplainFormatContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTEXT, 0)
}

func (s *ExplainFormatContext) GRAPHVIZ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGRAPHVIZ, 0)
}

func (s *ExplainFormatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitExplainFormat(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExplainTypeContext struct {
	*ExplainOptionContext
	value antlr.Token
}

func NewExplainTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplainTypeContext {
	var p = new(ExplainTypeContext)

	p.ExplainOptionContext = NewEmptyExplainOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExplainOptionContext))

	return p
}

func (s *ExplainTypeContext) GetValue() antlr.Token { return s.value }

func (s *ExplainTypeContext) SetValue(v antlr.Token) { s.value = v }

func (s *ExplainTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainTypeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTYPE, 0)
}

func (s *ExplainTypeContext) LOGICAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLOGICAL, 0)
}

func (s *ExplainTypeContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDISTRIBUTED, 0)
}

func (s *ExplainTypeContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVALIDATE, 0)
}

func (s *ExplainTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitExplainType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) ExplainOption() (localctx IExplainOptionContext) {
	localctx = NewExplainOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SqlBaseParserRULE_explainOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1449)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserFORMAT:
		localctx = NewExplainFormatContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1445)
			p.Match(SqlBaseParserFORMAT)
		}
		{
			p.SetState(1446)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExplainFormatContext).value = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserGRAPHVIZ || _la == SqlBaseParserTEXT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExplainFormatContext).value = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case SqlBaseParserTYPE:
		localctx = NewExplainTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1447)
			p.Match(SqlBaseParserTYPE)
		}
		{
			p.SetState(1448)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExplainTypeContext).value = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserDISTRIBUTED || _la == SqlBaseParserLOGICAL || _la == SqlBaseParserVALIDATE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExplainTypeContext).value = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITransactionModeContext is an interface to support dynamic dispatch.
type ITransactionModeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionModeContext differentiates from other interfaces.
	IsTransactionModeContext()
}

type TransactionModeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionModeContext() *TransactionModeContext {
	var p = new(TransactionModeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_transactionMode
	return p
}

func (*TransactionModeContext) IsTransactionModeContext() {}

func NewTransactionModeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionModeContext {
	var p = new(TransactionModeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_transactionMode

	return p
}

func (s *TransactionModeContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionModeContext) CopyFrom(ctx *TransactionModeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TransactionModeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionModeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TransactionAccessModeContext struct {
	*TransactionModeContext
	accessMode antlr.Token
}

func NewTransactionAccessModeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TransactionAccessModeContext {
	var p = new(TransactionAccessModeContext)

	p.TransactionModeContext = NewEmptyTransactionModeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TransactionModeContext))

	return p
}

func (s *TransactionAccessModeContext) GetAccessMode() antlr.Token { return s.accessMode }

func (s *TransactionAccessModeContext) SetAccessMode(v antlr.Token) { s.accessMode = v }

func (s *TransactionAccessModeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionAccessModeContext) READ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREAD, 0)
}

func (s *TransactionAccessModeContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserONLY, 0)
}

func (s *TransactionAccessModeContext) WRITE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWRITE, 0)
}

func (s *TransactionAccessModeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitTransactionAccessMode(s)

	default:
		return t.VisitChildren(s)
	}
}

type IsolationLevelContext struct {
	*TransactionModeContext
}

func NewIsolationLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IsolationLevelContext {
	var p = new(IsolationLevelContext)

	p.TransactionModeContext = NewEmptyTransactionModeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TransactionModeContext))

	return p
}

func (s *IsolationLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsolationLevelContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserISOLATION, 0)
}

func (s *IsolationLevelContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLEVEL, 0)
}

func (s *IsolationLevelContext) LevelOfIsolation() ILevelOfIsolationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevelOfIsolationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILevelOfIsolationContext)
}

func (s *IsolationLevelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitIsolationLevel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) TransactionMode() (localctx ITransactionModeContext) {
	localctx = NewTransactionModeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SqlBaseParserRULE_transactionMode)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1456)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserISOLATION:
		localctx = NewIsolationLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1451)
			p.Match(SqlBaseParserISOLATION)
		}
		{
			p.SetState(1452)
			p.Match(SqlBaseParserLEVEL)
		}
		{
			p.SetState(1453)
			p.LevelOfIsolation()
		}

	case SqlBaseParserREAD:
		localctx = NewTransactionAccessModeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1454)
			p.Match(SqlBaseParserREAD)
		}
		{
			p.SetState(1455)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TransactionAccessModeContext).accessMode = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlBaseParserONLY || _la == SqlBaseParserWRITE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TransactionAccessModeContext).accessMode = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILevelOfIsolationContext is an interface to support dynamic dispatch.
type ILevelOfIsolationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLevelOfIsolationContext differentiates from other interfaces.
	IsLevelOfIsolationContext()
}

type LevelOfIsolationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLevelOfIsolationContext() *LevelOfIsolationContext {
	var p = new(LevelOfIsolationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_levelOfIsolation
	return p
}

func (*LevelOfIsolationContext) IsLevelOfIsolationContext() {}

func NewLevelOfIsolationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LevelOfIsolationContext {
	var p = new(LevelOfIsolationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_levelOfIsolation

	return p
}

func (s *LevelOfIsolationContext) GetParser() antlr.Parser { return s.parser }

func (s *LevelOfIsolationContext) CopyFrom(ctx *LevelOfIsolationContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LevelOfIsolationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelOfIsolationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ReadUncommittedContext struct {
	*LevelOfIsolationContext
}

func NewReadUncommittedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReadUncommittedContext {
	var p = new(ReadUncommittedContext)

	p.LevelOfIsolationContext = NewEmptyLevelOfIsolationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LevelOfIsolationContext))

	return p
}

func (s *ReadUncommittedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReadUncommittedContext) READ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREAD, 0)
}

func (s *ReadUncommittedContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUNCOMMITTED, 0)
}

func (s *ReadUncommittedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitReadUncommitted(s)

	default:
		return t.VisitChildren(s)
	}
}

type SerializableContext struct {
	*LevelOfIsolationContext
}

func NewSerializableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SerializableContext {
	var p = new(SerializableContext)

	p.LevelOfIsolationContext = NewEmptyLevelOfIsolationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LevelOfIsolationContext))

	return p
}

func (s *SerializableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SerializableContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSERIALIZABLE, 0)
}

func (s *SerializableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitSerializable(s)

	default:
		return t.VisitChildren(s)
	}
}

type ReadCommittedContext struct {
	*LevelOfIsolationContext
}

func NewReadCommittedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReadCommittedContext {
	var p = new(ReadCommittedContext)

	p.LevelOfIsolationContext = NewEmptyLevelOfIsolationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LevelOfIsolationContext))

	return p
}

func (s *ReadCommittedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReadCommittedContext) READ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREAD, 0)
}

func (s *ReadCommittedContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOMMITTED, 0)
}

func (s *ReadCommittedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitReadCommitted(s)

	default:
		return t.VisitChildren(s)
	}
}

type RepeatableReadContext struct {
	*LevelOfIsolationContext
}

func NewRepeatableReadContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RepeatableReadContext {
	var p = new(RepeatableReadContext)

	p.LevelOfIsolationContext = NewEmptyLevelOfIsolationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LevelOfIsolationContext))

	return p
}

func (s *RepeatableReadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepeatableReadContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREPEATABLE, 0)
}

func (s *RepeatableReadContext) READ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREAD, 0)
}

func (s *RepeatableReadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitRepeatableRead(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) LevelOfIsolation() (localctx ILevelOfIsolationContext) {
	localctx = NewLevelOfIsolationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SqlBaseParserRULE_levelOfIsolation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1465)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) {
	case 1:
		localctx = NewReadUncommittedContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1458)
			p.Match(SqlBaseParserREAD)
		}
		{
			p.SetState(1459)
			p.Match(SqlBaseParserUNCOMMITTED)
		}

	case 2:
		localctx = NewReadCommittedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1460)
			p.Match(SqlBaseParserREAD)
		}
		{
			p.SetState(1461)
			p.Match(SqlBaseParserCOMMITTED)
		}

	case 3:
		localctx = NewRepeatableReadContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1462)
			p.Match(SqlBaseParserREPEATABLE)
		}
		{
			p.SetState(1463)
			p.Match(SqlBaseParserREAD)
		}

	case 4:
		localctx = NewSerializableContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1464)
			p.Match(SqlBaseParserSERIALIZABLE)
		}

	}

	return localctx
}

// ICallArgumentContext is an interface to support dynamic dispatch.
type ICallArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallArgumentContext differentiates from other interfaces.
	IsCallArgumentContext()
}

type CallArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallArgumentContext() *CallArgumentContext {
	var p = new(CallArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_callArgument
	return p
}

func (*CallArgumentContext) IsCallArgumentContext() {}

func NewCallArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallArgumentContext {
	var p = new(CallArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_callArgument

	return p
}

func (s *CallArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *CallArgumentContext) CopyFrom(ctx *CallArgumentContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CallArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PositionalArgumentContext struct {
	*CallArgumentContext
}

func NewPositionalArgumentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PositionalArgumentContext {
	var p = new(PositionalArgumentContext)

	p.CallArgumentContext = NewEmptyCallArgumentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CallArgumentContext))

	return p
}

func (s *PositionalArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionalArgumentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PositionalArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitPositionalArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

type NamedArgumentContext struct {
	*CallArgumentContext
}

func NewNamedArgumentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NamedArgumentContext {
	var p = new(NamedArgumentContext)

	p.CallArgumentContext = NewEmptyCallArgumentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CallArgumentContext))

	return p
}

func (s *NamedArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedArgumentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedArgumentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamedArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitNamedArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) CallArgument() (localctx ICallArgumentContext) {
	localctx = NewCallArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SqlBaseParserRULE_callArgument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1472)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPositionalArgumentContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1467)
			p.Expression()
		}

	case 2:
		localctx = NewNamedArgumentContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1468)
			p.Identifier()
		}
		{
			p.SetState(1469)
			p.Match(SqlBaseParserT__8)
		}
		{
			p.SetState(1470)
			p.Expression()
		}

	}

	return localctx
}

// IPrivilegeContext is an interface to support dynamic dispatch.
type IPrivilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeContext differentiates from other interfaces.
	IsPrivilegeContext()
}

type PrivilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeContext() *PrivilegeContext {
	var p = new(PrivilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_privilege
	return p
}

func (*PrivilegeContext) IsPrivilegeContext() {}

func NewPrivilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeContext {
	var p = new(PrivilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_privilege

	return p
}

func (s *PrivilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSELECT, 0)
}

func (s *PrivilegeContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDELETE, 0)
}

func (s *PrivilegeContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINSERT, 0)
}

func (s *PrivilegeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitPrivilege(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Privilege() (localctx IPrivilegeContext) {
	localctx = NewPrivilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SqlBaseParserRULE_privilege)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1478)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserSELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1474)
			p.Match(SqlBaseParserSELECT)
		}

	case SqlBaseParserDELETE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1475)
			p.Match(SqlBaseParserDELETE)
		}

	case SqlBaseParserINSERT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1476)
			p.Match(SqlBaseParserINSERT)
		}

	case SqlBaseParserADD, SqlBaseParserALL, SqlBaseParserANALYZE, SqlBaseParserANY, SqlBaseParserARRAY, SqlBaseParserASC, SqlBaseParserAT, SqlBaseParserBERNOULLI, SqlBaseParserCALL, SqlBaseParserCASCADE, SqlBaseParserCATALOGS, SqlBaseParserCOALESCE, SqlBaseParserCOLUMN, SqlBaseParserCOLUMNS, SqlBaseParserCOMMENT, SqlBaseParserCOMMIT, SqlBaseParserCOMMITTED, SqlBaseParserCURRENT, SqlBaseParserDATA, SqlBaseParserDATE, SqlBaseParserDAY, SqlBaseParserDESC, SqlBaseParserDISTRIBUTED, SqlBaseParserEXCLUDING, SqlBaseParserEXPLAIN, SqlBaseParserFILTER, SqlBaseParserFIRST, SqlBaseParserFOLLOWING, SqlBaseParserFORMAT, SqlBaseParserFUNCTIONS, SqlBaseParserGRANT, SqlBaseParserGRANTS, SqlBaseParserGRAPHVIZ, SqlBaseParserHOUR, SqlBaseParserIF, SqlBaseParserINCLUDING, SqlBaseParserINPUT, SqlBaseParserINTEGER, SqlBaseParserINTERVAL, SqlBaseParserISOLATION, SqlBaseParserLAST, SqlBaseParserLATERAL, SqlBaseParserLEVEL, SqlBaseParserLIMIT, SqlBaseParserLOGICAL, SqlBaseParserMAP, SqlBaseParserMINUTE, SqlBaseParserMONTH, SqlBaseParserNFC, SqlBaseParserNFD, SqlBaseParserNFKC, SqlBaseParserNFKD, SqlBaseParserNO, SqlBaseParserNULLIF, SqlBaseParserNULLS, SqlBaseParserONLY, SqlBaseParserOPTION, SqlBaseParserORDINALITY, SqlBaseParserOUTPUT, SqlBaseParserOVER, SqlBaseParserPARTITION, SqlBaseParserPARTITIONS, SqlBaseParserPOSITION, SqlBaseParserPRECEDING, SqlBaseParserPRIVILEGES, SqlBaseParserPROPERTIES, SqlBaseParserPUBLIC, SqlBaseParserRANGE, SqlBaseParserREAD, SqlBaseParserRENAME, SqlBaseParserREPEATABLE, SqlBaseParserREPLACE, SqlBaseParserRESET, SqlBaseParserRESTRICT, SqlBaseParserREVOKE, SqlBaseParserROLLBACK, SqlBaseParserROW, SqlBaseParserROWS, SqlBaseParserSCHEMA, SqlBaseParserSCHEMAS, SqlBaseParserSECOND, SqlBaseParserSERIALIZABLE, SqlBaseParserSESSION, SqlBaseParserSET, SqlBaseParserSETS, SqlBaseParserSHOW, SqlBaseParserSMALLINT, SqlBaseParserSOME, SqlBaseParserSTART, SqlBaseParserSTATS, SqlBaseParserSUBSTRING, SqlBaseParserSYSTEM, SqlBaseParserTABLES, SqlBaseParserTABLESAMPLE, SqlBaseParserTEXT, SqlBaseParserTIME, SqlBaseParserTIMESTAMP, SqlBaseParserTINYINT, SqlBaseParserTO, SqlBaseParserTRANSACTION, SqlBaseParserTRY_CAST, SqlBaseParserTYPE, SqlBaseParserUNBOUNDED, SqlBaseParserUNCOMMITTED, SqlBaseParserUSE, SqlBaseParserVALIDATE, SqlBaseParserVERBOSE, SqlBaseParserVIEW, SqlBaseParserWORK, SqlBaseParserWRITE, SqlBaseParserYEAR, SqlBaseParserZONE, SqlBaseParserIDENTIFIER, SqlBaseParserDIGIT_IDENTIFIER, SqlBaseParserQUOTED_IDENTIFIER, SqlBaseParserBACKQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1477)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQualifiedNameContext is an interface to support dynamic dispatch.
type IQualifiedNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedNameContext differentiates from other interfaces.
	IsQualifiedNameContext()
}

type QualifiedNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedNameContext() *QualifiedNameContext {
	var p = new(QualifiedNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_qualifiedName
	return p
}

func (*QualifiedNameContext) IsQualifiedNameContext() {}

func NewQualifiedNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedNameContext {
	var p = new(QualifiedNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_qualifiedName

	return p
}

func (s *QualifiedNameContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *QualifiedNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *QualifiedNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitQualifiedName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) QualifiedName() (localctx IQualifiedNameContext) {
	localctx = NewQualifiedNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SqlBaseParserRULE_qualifiedName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1480)
		p.Identifier()
	}
	p.SetState(1485)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1481)
				p.Match(SqlBaseParserT__0)
			}
			{
				p.SetState(1482)
				p.Identifier()
			}

		}
		p.SetState(1487)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) CopyFrom(ctx *IdentifierContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type BackQuotedIdentifierContext struct {
	*IdentifierContext
}

func NewBackQuotedIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BackQuotedIdentifierContext {
	var p = new(BackQuotedIdentifierContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *BackQuotedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BackQuotedIdentifierContext) BACKQUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBACKQUOTED_IDENTIFIER, 0)
}

func (s *BackQuotedIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitBackQuotedIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type QuotedIdentifierContext struct {
	*IdentifierContext
}

func NewQuotedIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QuotedIdentifierContext {
	var p = new(QuotedIdentifierContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *QuotedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuotedIdentifierContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserQUOTED_IDENTIFIER, 0)
}

func (s *QuotedIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitQuotedIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type DigitIdentifierContext struct {
	*IdentifierContext
}

func NewDigitIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DigitIdentifierContext {
	var p = new(DigitIdentifierContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *DigitIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DigitIdentifierContext) DIGIT_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDIGIT_IDENTIFIER, 0)
}

func (s *DigitIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDigitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnquotedIdentifierContext struct {
	*IdentifierContext
}

func NewUnquotedIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnquotedIdentifierContext {
	var p = new(UnquotedIdentifierContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *UnquotedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnquotedIdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIDENTIFIER, 0)
}

func (s *UnquotedIdentifierContext) NonReserved() INonReservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonReservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonReservedContext)
}

func (s *UnquotedIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitUnquotedIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SqlBaseParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1493)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserIDENTIFIER:
		localctx = NewUnquotedIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1488)
			p.Match(SqlBaseParserIDENTIFIER)
		}

	case SqlBaseParserQUOTED_IDENTIFIER:
		localctx = NewQuotedIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1489)
			p.Match(SqlBaseParserQUOTED_IDENTIFIER)
		}

	case SqlBaseParserADD, SqlBaseParserALL, SqlBaseParserANALYZE, SqlBaseParserANY, SqlBaseParserARRAY, SqlBaseParserASC, SqlBaseParserAT, SqlBaseParserBERNOULLI, SqlBaseParserCALL, SqlBaseParserCASCADE, SqlBaseParserCATALOGS, SqlBaseParserCOALESCE, SqlBaseParserCOLUMN, SqlBaseParserCOLUMNS, SqlBaseParserCOMMENT, SqlBaseParserCOMMIT, SqlBaseParserCOMMITTED, SqlBaseParserCURRENT, SqlBaseParserDATA, SqlBaseParserDATE, SqlBaseParserDAY, SqlBaseParserDESC, SqlBaseParserDISTRIBUTED, SqlBaseParserEXCLUDING, SqlBaseParserEXPLAIN, SqlBaseParserFILTER, SqlBaseParserFIRST, SqlBaseParserFOLLOWING, SqlBaseParserFORMAT, SqlBaseParserFUNCTIONS, SqlBaseParserGRANT, SqlBaseParserGRANTS, SqlBaseParserGRAPHVIZ, SqlBaseParserHOUR, SqlBaseParserIF, SqlBaseParserINCLUDING, SqlBaseParserINPUT, SqlBaseParserINTEGER, SqlBaseParserINTERVAL, SqlBaseParserISOLATION, SqlBaseParserLAST, SqlBaseParserLATERAL, SqlBaseParserLEVEL, SqlBaseParserLIMIT, SqlBaseParserLOGICAL, SqlBaseParserMAP, SqlBaseParserMINUTE, SqlBaseParserMONTH, SqlBaseParserNFC, SqlBaseParserNFD, SqlBaseParserNFKC, SqlBaseParserNFKD, SqlBaseParserNO, SqlBaseParserNULLIF, SqlBaseParserNULLS, SqlBaseParserONLY, SqlBaseParserOPTION, SqlBaseParserORDINALITY, SqlBaseParserOUTPUT, SqlBaseParserOVER, SqlBaseParserPARTITION, SqlBaseParserPARTITIONS, SqlBaseParserPOSITION, SqlBaseParserPRECEDING, SqlBaseParserPRIVILEGES, SqlBaseParserPROPERTIES, SqlBaseParserPUBLIC, SqlBaseParserRANGE, SqlBaseParserREAD, SqlBaseParserRENAME, SqlBaseParserREPEATABLE, SqlBaseParserREPLACE, SqlBaseParserRESET, SqlBaseParserRESTRICT, SqlBaseParserREVOKE, SqlBaseParserROLLBACK, SqlBaseParserROW, SqlBaseParserROWS, SqlBaseParserSCHEMA, SqlBaseParserSCHEMAS, SqlBaseParserSECOND, SqlBaseParserSERIALIZABLE, SqlBaseParserSESSION, SqlBaseParserSET, SqlBaseParserSETS, SqlBaseParserSHOW, SqlBaseParserSMALLINT, SqlBaseParserSOME, SqlBaseParserSTART, SqlBaseParserSTATS, SqlBaseParserSUBSTRING, SqlBaseParserSYSTEM, SqlBaseParserTABLES, SqlBaseParserTABLESAMPLE, SqlBaseParserTEXT, SqlBaseParserTIME, SqlBaseParserTIMESTAMP, SqlBaseParserTINYINT, SqlBaseParserTO, SqlBaseParserTRANSACTION, SqlBaseParserTRY_CAST, SqlBaseParserTYPE, SqlBaseParserUNBOUNDED, SqlBaseParserUNCOMMITTED, SqlBaseParserUSE, SqlBaseParserVALIDATE, SqlBaseParserVERBOSE, SqlBaseParserVIEW, SqlBaseParserWORK, SqlBaseParserWRITE, SqlBaseParserYEAR, SqlBaseParserZONE:
		localctx = NewUnquotedIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1490)
			p.NonReserved()
		}

	case SqlBaseParserBACKQUOTED_IDENTIFIER:
		localctx = NewBackQuotedIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1491)
			p.Match(SqlBaseParserBACKQUOTED_IDENTIFIER)
		}

	case SqlBaseParserDIGIT_IDENTIFIER:
		localctx = NewDigitIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1492)
			p.Match(SqlBaseParserDIGIT_IDENTIFIER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_number
	return p
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) CopyFrom(ctx *NumberContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DecimalLiteralContext struct {
	*NumberContext
}

func NewDecimalLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecimalLiteralContext {
	var p = new(DecimalLiteralContext)

	p.NumberContext = NewEmptyNumberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*NumberContext))

	return p
}

func (s *DecimalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecimalLiteralContext) DECIMAL_VALUE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDECIMAL_VALUE, 0)
}

func (s *DecimalLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDecimalLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type DoubleLiteralContext struct {
	*NumberContext
}

func NewDoubleLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DoubleLiteralContext {
	var p = new(DoubleLiteralContext)

	p.NumberContext = NewEmptyNumberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*NumberContext))

	return p
}

func (s *DoubleLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoubleLiteralContext) DOUBLE_VALUE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDOUBLE_VALUE, 0)
}

func (s *DoubleLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitDoubleLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntegerLiteralContext struct {
	*NumberContext
}

func NewIntegerLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntegerLiteralContext {
	var p = new(IntegerLiteralContext)

	p.NumberContext = NewEmptyNumberContext()
	p.parser = parser
	p.CopyFrom(ctx.(*NumberContext))

	return p
}

func (s *IntegerLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerLiteralContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTEGER_VALUE, 0)
}

func (s *IntegerLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitIntegerLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SqlBaseParserRULE_number)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1498)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlBaseParserDECIMAL_VALUE:
		localctx = NewDecimalLiteralContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1495)
			p.Match(SqlBaseParserDECIMAL_VALUE)
		}

	case SqlBaseParserDOUBLE_VALUE:
		localctx = NewDoubleLiteralContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1496)
			p.Match(SqlBaseParserDOUBLE_VALUE)
		}

	case SqlBaseParserINTEGER_VALUE:
		localctx = NewIntegerLiteralContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1497)
			p.Match(SqlBaseParserINTEGER_VALUE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INonReservedContext is an interface to support dynamic dispatch.
type INonReservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonReservedContext differentiates from other interfaces.
	IsNonReservedContext()
}

type NonReservedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonReservedContext() *NonReservedContext {
	var p = new(NonReservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlBaseParserRULE_nonReserved
	return p
}

func (*NonReservedContext) IsNonReservedContext() {}

func NewNonReservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NonReservedContext {
	var p = new(NonReservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlBaseParserRULE_nonReserved

	return p
}

func (s *NonReservedContext) GetParser() antlr.Parser { return s.parser }

func (s *NonReservedContext) ADD() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserADD, 0)
}

func (s *NonReservedContext) ALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserALL, 0)
}

func (s *NonReservedContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserANALYZE, 0)
}

func (s *NonReservedContext) ANY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserANY, 0)
}

func (s *NonReservedContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserARRAY, 0)
}

func (s *NonReservedContext) ASC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserASC, 0)
}

func (s *NonReservedContext) AT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserAT, 0)
}

func (s *NonReservedContext) BERNOULLI() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserBERNOULLI, 0)
}

func (s *NonReservedContext) CALL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCALL, 0)
}

func (s *NonReservedContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCASCADE, 0)
}

func (s *NonReservedContext) CATALOGS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCATALOGS, 0)
}

func (s *NonReservedContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOALESCE, 0)
}

func (s *NonReservedContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOLUMN, 0)
}

func (s *NonReservedContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOLUMNS, 0)
}

func (s *NonReservedContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOMMENT, 0)
}

func (s *NonReservedContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOMMIT, 0)
}

func (s *NonReservedContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCOMMITTED, 0)
}

func (s *NonReservedContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserCURRENT, 0)
}

func (s *NonReservedContext) DATA() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDATA, 0)
}

func (s *NonReservedContext) DATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDATE, 0)
}

func (s *NonReservedContext) DAY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDAY, 0)
}

func (s *NonReservedContext) DESC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDESC, 0)
}

func (s *NonReservedContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserDISTRIBUTED, 0)
}

func (s *NonReservedContext) EXCLUDING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXCLUDING, 0)
}

func (s *NonReservedContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserEXPLAIN, 0)
}

func (s *NonReservedContext) FILTER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFILTER, 0)
}

func (s *NonReservedContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFIRST, 0)
}

func (s *NonReservedContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFOLLOWING, 0)
}

func (s *NonReservedContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFORMAT, 0)
}

func (s *NonReservedContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserFUNCTIONS, 0)
}

func (s *NonReservedContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGRANT, 0)
}

func (s *NonReservedContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGRANTS, 0)
}

func (s *NonReservedContext) GRAPHVIZ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserGRAPHVIZ, 0)
}

func (s *NonReservedContext) HOUR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserHOUR, 0)
}

func (s *NonReservedContext) IF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserIF, 0)
}

func (s *NonReservedContext) INCLUDING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINCLUDING, 0)
}

func (s *NonReservedContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINPUT, 0)
}

func (s *NonReservedContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTEGER, 0)
}

func (s *NonReservedContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserINTERVAL, 0)
}

func (s *NonReservedContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserISOLATION, 0)
}

func (s *NonReservedContext) LAST() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLAST, 0)
}

func (s *NonReservedContext) LATERAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLATERAL, 0)
}

func (s *NonReservedContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLEVEL, 0)
}

func (s *NonReservedContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLIMIT, 0)
}

func (s *NonReservedContext) LOGICAL() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserLOGICAL, 0)
}

func (s *NonReservedContext) MAP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMAP, 0)
}

func (s *NonReservedContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMINUTE, 0)
}

func (s *NonReservedContext) MONTH() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserMONTH, 0)
}

func (s *NonReservedContext) NFC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNFC, 0)
}

func (s *NonReservedContext) NFD() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNFD, 0)
}

func (s *NonReservedContext) NFKC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNFKC, 0)
}

func (s *NonReservedContext) NFKD() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNFKD, 0)
}

func (s *NonReservedContext) NO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNO, 0)
}

func (s *NonReservedContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNULLIF, 0)
}

func (s *NonReservedContext) NULLS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserNULLS, 0)
}

func (s *NonReservedContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserONLY, 0)
}

func (s *NonReservedContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOPTION, 0)
}

func (s *NonReservedContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserORDINALITY, 0)
}

func (s *NonReservedContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOUTPUT, 0)
}

func (s *NonReservedContext) OVER() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserOVER, 0)
}

func (s *NonReservedContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPARTITION, 0)
}

func (s *NonReservedContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPARTITIONS, 0)
}

func (s *NonReservedContext) POSITION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPOSITION, 0)
}

func (s *NonReservedContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPRECEDING, 0)
}

func (s *NonReservedContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPRIVILEGES, 0)
}

func (s *NonReservedContext) PROPERTIES() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPROPERTIES, 0)
}

func (s *NonReservedContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserPUBLIC, 0)
}

func (s *NonReservedContext) RANGE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRANGE, 0)
}

func (s *NonReservedContext) READ() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREAD, 0)
}

func (s *NonReservedContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRENAME, 0)
}

func (s *NonReservedContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREPEATABLE, 0)
}

func (s *NonReservedContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREPLACE, 0)
}

func (s *NonReservedContext) RESET() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRESET, 0)
}

func (s *NonReservedContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserRESTRICT, 0)
}

func (s *NonReservedContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserREVOKE, 0)
}

func (s *NonReservedContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROLLBACK, 0)
}

func (s *NonReservedContext) ROW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROW, 0)
}

func (s *NonReservedContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserROWS, 0)
}

func (s *NonReservedContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSCHEMA, 0)
}

func (s *NonReservedContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSCHEMAS, 0)
}

func (s *NonReservedContext) SECOND() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSECOND, 0)
}

func (s *NonReservedContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSERIALIZABLE, 0)
}

func (s *NonReservedContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSESSION, 0)
}

func (s *NonReservedContext) SET() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSET, 0)
}

func (s *NonReservedContext) SETS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSETS, 0)
}

func (s *NonReservedContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSHOW, 0)
}

func (s *NonReservedContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSMALLINT, 0)
}

func (s *NonReservedContext) SOME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSOME, 0)
}

func (s *NonReservedContext) START() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSTART, 0)
}

func (s *NonReservedContext) STATS() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSTATS, 0)
}

func (s *NonReservedContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSUBSTRING, 0)
}

func (s *NonReservedContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserSYSTEM, 0)
}

func (s *NonReservedContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLES, 0)
}

func (s *NonReservedContext) TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTABLESAMPLE, 0)
}

func (s *NonReservedContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTEXT, 0)
}

func (s *NonReservedContext) TIME() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTIME, 0)
}

func (s *NonReservedContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTIMESTAMP, 0)
}

func (s *NonReservedContext) TINYINT() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTINYINT, 0)
}

func (s *NonReservedContext) TO() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTO, 0)
}

func (s *NonReservedContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTRANSACTION, 0)
}

func (s *NonReservedContext) TRY_CAST() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTRY_CAST, 0)
}

func (s *NonReservedContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserTYPE, 0)
}

func (s *NonReservedContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUNBOUNDED, 0)
}

func (s *NonReservedContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUNCOMMITTED, 0)
}

func (s *NonReservedContext) USE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserUSE, 0)
}

func (s *NonReservedContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVALIDATE, 0)
}

func (s *NonReservedContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVERBOSE, 0)
}

func (s *NonReservedContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserVIEW, 0)
}

func (s *NonReservedContext) WORK() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWORK, 0)
}

func (s *NonReservedContext) WRITE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserWRITE, 0)
}

func (s *NonReservedContext) YEAR() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserYEAR, 0)
}

func (s *NonReservedContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SqlBaseParserZONE, 0)
}

func (s *NonReservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonReservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NonReservedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SqlBaseVisitor:
		return t.VisitNonReserved(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SqlBaseParser) NonReserved() (localctx INonReservedContext) {
	localctx = NewNonReservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SqlBaseParserRULE_nonReserved)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1500)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SqlBaseParserADD)|(1<<SqlBaseParserALL)|(1<<SqlBaseParserANALYZE)|(1<<SqlBaseParserANY)|(1<<SqlBaseParserARRAY)|(1<<SqlBaseParserASC)|(1<<SqlBaseParserAT)|(1<<SqlBaseParserBERNOULLI)|(1<<SqlBaseParserCALL)|(1<<SqlBaseParserCASCADE)|(1<<SqlBaseParserCATALOGS)|(1<<SqlBaseParserCOALESCE)|(1<<SqlBaseParserCOLUMN)|(1<<SqlBaseParserCOLUMNS)|(1<<SqlBaseParserCOMMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SqlBaseParserCOMMIT-32))|(1<<(SqlBaseParserCOMMITTED-32))|(1<<(SqlBaseParserCURRENT-32))|(1<<(SqlBaseParserDATA-32))|(1<<(SqlBaseParserDATE-32))|(1<<(SqlBaseParserDAY-32))|(1<<(SqlBaseParserDESC-32))|(1<<(SqlBaseParserDISTRIBUTED-32))|(1<<(SqlBaseParserEXCLUDING-32))|(1<<(SqlBaseParserEXPLAIN-32))|(1<<(SqlBaseParserFILTER-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SqlBaseParserFIRST-64))|(1<<(SqlBaseParserFOLLOWING-64))|(1<<(SqlBaseParserFORMAT-64))|(1<<(SqlBaseParserFUNCTIONS-64))|(1<<(SqlBaseParserGRANT-64))|(1<<(SqlBaseParserGRANTS-64))|(1<<(SqlBaseParserGRAPHVIZ-64))|(1<<(SqlBaseParserHOUR-64))|(1<<(SqlBaseParserIF-64))|(1<<(SqlBaseParserINCLUDING-64))|(1<<(SqlBaseParserINPUT-64))|(1<<(SqlBaseParserINTEGER-64))|(1<<(SqlBaseParserINTERVAL-64))|(1<<(SqlBaseParserISOLATION-64))|(1<<(SqlBaseParserLAST-64))|(1<<(SqlBaseParserLATERAL-64))|(1<<(SqlBaseParserLEVEL-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(SqlBaseParserLIMIT-96))|(1<<(SqlBaseParserLOGICAL-96))|(1<<(SqlBaseParserMAP-96))|(1<<(SqlBaseParserMINUTE-96))|(1<<(SqlBaseParserMONTH-96))|(1<<(SqlBaseParserNFC-96))|(1<<(SqlBaseParserNFD-96))|(1<<(SqlBaseParserNFKC-96))|(1<<(SqlBaseParserNFKD-96))|(1<<(SqlBaseParserNO-96))|(1<<(SqlBaseParserNULLIF-96))|(1<<(SqlBaseParserNULLS-96))|(1<<(SqlBaseParserONLY-96))|(1<<(SqlBaseParserOPTION-96))|(1<<(SqlBaseParserORDINALITY-96))|(1<<(SqlBaseParserOUTPUT-96))|(1<<(SqlBaseParserOVER-96))|(1<<(SqlBaseParserPARTITION-96))|(1<<(SqlBaseParserPARTITIONS-96))|(1<<(SqlBaseParserPOSITION-96))|(1<<(SqlBaseParserPRECEDING-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(SqlBaseParserPRIVILEGES-128))|(1<<(SqlBaseParserPROPERTIES-128))|(1<<(SqlBaseParserPUBLIC-128))|(1<<(SqlBaseParserRANGE-128))|(1<<(SqlBaseParserREAD-128))|(1<<(SqlBaseParserRENAME-128))|(1<<(SqlBaseParserREPEATABLE-128))|(1<<(SqlBaseParserREPLACE-128))|(1<<(SqlBaseParserRESET-128))|(1<<(SqlBaseParserRESTRICT-128))|(1<<(SqlBaseParserREVOKE-128))|(1<<(SqlBaseParserROLLBACK-128))|(1<<(SqlBaseParserROW-128))|(1<<(SqlBaseParserROWS-128))|(1<<(SqlBaseParserSCHEMA-128))|(1<<(SqlBaseParserSCHEMAS-128))|(1<<(SqlBaseParserSECOND-128))|(1<<(SqlBaseParserSERIALIZABLE-128))|(1<<(SqlBaseParserSESSION-128))|(1<<(SqlBaseParserSET-128))|(1<<(SqlBaseParserSETS-128))|(1<<(SqlBaseParserSHOW-128))|(1<<(SqlBaseParserSMALLINT-128))|(1<<(SqlBaseParserSOME-128))|(1<<(SqlBaseParserSTART-128))|(1<<(SqlBaseParserSTATS-128))|(1<<(SqlBaseParserSUBSTRING-128))|(1<<(SqlBaseParserSYSTEM-128)))) != 0) || (((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(SqlBaseParserTABLES-161))|(1<<(SqlBaseParserTABLESAMPLE-161))|(1<<(SqlBaseParserTEXT-161))|(1<<(SqlBaseParserTIME-161))|(1<<(SqlBaseParserTIMESTAMP-161))|(1<<(SqlBaseParserTINYINT-161))|(1<<(SqlBaseParserTO-161))|(1<<(SqlBaseParserTRANSACTION-161))|(1<<(SqlBaseParserTRY_CAST-161))|(1<<(SqlBaseParserTYPE-161))|(1<<(SqlBaseParserUNBOUNDED-161))|(1<<(SqlBaseParserUNCOMMITTED-161))|(1<<(SqlBaseParserUSE-161))|(1<<(SqlBaseParserVALIDATE-161))|(1<<(SqlBaseParserVERBOSE-161))|(1<<(SqlBaseParserVIEW-161))|(1<<(SqlBaseParserWORK-161))|(1<<(SqlBaseParserWRITE-161))|(1<<(SqlBaseParserYEAR-161))|(1<<(SqlBaseParserZONE-161)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *SqlBaseParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 11:
		var t *QueryTermContext = nil
		if localctx != nil {
			t = localctx.(*QueryTermContext)
		}
		return p.QueryTerm_Sempred(t, predIndex)

	case 22:
		var t *RelationContext = nil
		if localctx != nil {
			t = localctx.(*RelationContext)
		}
		return p.Relation_Sempred(t, predIndex)

	case 31:
		var t *BooleanExpressionContext = nil
		if localctx != nil {
			t = localctx.(*BooleanExpressionContext)
		}
		return p.BooleanExpression_Sempred(t, predIndex)

	case 34:
		var t *ValueExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ValueExpressionContext)
		}
		return p.ValueExpression_Sempred(t, predIndex)

	case 35:
		var t *PrimaryExpressionContext = nil
		if localctx != nil {
			t = localctx.(*PrimaryExpressionContext)
		}
		return p.PrimaryExpression_Sempred(t, predIndex)

	case 44:
		var t *SqltypeContext = nil
		if localctx != nil {
			t = localctx.(*SqltypeContext)
		}
		return p.Sqltype_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SqlBaseParser) QueryTerm_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SqlBaseParser) Relation_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SqlBaseParser) BooleanExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SqlBaseParser) ValueExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SqlBaseParser) PrimaryExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 12)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SqlBaseParser) Sqltype_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 11:
		return p.Precpred(p.GetParserRuleContext(), 6)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
